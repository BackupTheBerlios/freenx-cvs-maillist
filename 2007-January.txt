From fabianx at mail.berlios.de  Tue Jan 23 03:15:29 2007
From: fabianx at mail.berlios.de (fabianx at BerliOS)
Date: Tue, 23 Jan 2007 03:15:29 +0100
Subject: [Freenx-cvs] r283 - freenx-server/trunk
Message-ID: <200701230215.l0N2FTAi010953@sheep.berlios.de>

Author: fabianx
Date: 2007-01-23 03:15:28 +0100 (Tue, 23 Jan 2007)
New Revision: 283

Modified:
   freenx-server/trunk/ChangeLog
   freenx-server/trunk/nxloadconfig
Log:
* Added version 2.1.0 support.
* Fixed LD_LIBRARY_PRELOAD default path in nxloadconfig.
* Added autodetection of backend.

Prepared for release.



Modified: freenx-server/trunk/ChangeLog
===================================================================
--- freenx-server/trunk/ChangeLog	2006-09-23 09:38:53 UTC (rev 282)
+++ freenx-server/trunk/ChangeLog	2007-01-23 02:15:28 UTC (rev 283)
@@ -1,4 +1,4 @@
-xx.xx.2006 FreeNX 0.6.0
+23.01.2007 FreeNX 0.6.0 "Juliana birthday edition"
 	* Opened the 0.6.0 branch.
 	* Added nxnode slave mode.
 	* General code cleanup.
@@ -14,6 +14,9 @@
 	* Added example script for "load" based loadbalancing.
 	* Fixed spaces in parameters for NX Client 2.0.0.
 	  (ssycplkbocve at spammotel.com)
+	* Added version 2.1.0 support.
+	* Fixed LD_LIBRARY_PRELOAD default path in nxloadconfig.
+	* Added autodetection of backend.
 
 01.07.2006 FreeNX 0.5.0 "UKUUG 2006 Edition"
 	* Opened the 0.5.0 branch.

Modified: freenx-server/trunk/nxloadconfig
===================================================================
--- freenx-server/trunk/nxloadconfig	2006-09-23 09:38:53 UTC (rev 282)
+++ freenx-server/trunk/nxloadconfig	2007-01-23 02:15:28 UTC (rev 283)
@@ -52,7 +52,7 @@
 # DO NOT TOUCH unless you REALLY know what you are doing
 #########################################################################
 
-NX_VERSION=1.5.0-60-SVN
+NX_VERSION=1.5.0-60
 NX_LICENSE="OS (GPL)"
 
 # Where can different nx components be found
@@ -171,7 +171,7 @@
 
 # Misc directives
 
-ENABLE_2_0_0_BACKEND="0"
+ENABLE_2_0_0_BACKEND=""
 ENABLE_AUTORECONNECT="0"
 ENABLE_AUTORECONNECT_BEFORE_140="1"
 EXPORT_USERIP="0"
@@ -263,7 +263,12 @@
 [ -z "$AGENT_LIBRARY_PATH" ] && AGENT_LIBRARY_PATH=$PATH_LIB
 [ -z "$PROXY_LIBRARY_PATH" ] && PROXY_LIBRARY_PATH=$PATH_LIB
 [ -z "$APPLICATION_LIBRARY_PATH" ] && APPLICATION_LIBRARY_PATH=$PATH_LIB
-[ -z "$APPLICATION_LIBRARY_PRELOAD" ] && APPLICATION_LIBRARY_PRELOAD="$APPLICATION_LIBRARY_PATH/libX11.so.6.2:$APPLICATION_LIBRARY_PATH/libXext.so.6.4:$APPLICATION_LIBRARY_PATH/libXcomp.so.1:$APPLICATION_LIBRARY_PATH/libXcompext.so.1:$APPLICATION_LIBRARY_PATH/libXrender.so.1.2"
+[ -z "$APPLICATION_LIBRARY_PRELOAD" ] && APPLICATION_LIBRARY_PRELOAD="$APPLICATION_LIBRARY_PATH/libX11.so.6.2:$APPLICATION_LIBRARY_PATH/libXext.so.6.4:$APPLICATION_LIBRARY_PATH/libXcomp.so:$APPLICATION_LIBRARY_PATH/libXcompext.so.1:$APPLICATION_LIBRARY_PATH/libXrender.so.1.2"
+if [ -z "$ENABLE_2_0_0_BACKEND" ]
+then
+	ENABLE_2_0_0_BACKEND="1"
+	[ -z "$(strings $PATH_BIN/nxagent | egrep 'NXAGENT - Version 2.[01].0')" ] && ENABLE_2_0_0_BACKEND="0"
+fi 
 
 [ -z "$KDE_PRINTRC" -a -n "$KDEHOME" ] && KDE_PRINTRC="$KDEHOME/share/config/kdeprintrc"
 [ -z "$KDE_PRINTRC" -a -z "$KDEHOME" ] && KDE_PRINTRC="$HOME/.kde/share/config/kdeprintrc"
@@ -504,8 +509,8 @@
 	[ -z $(echo "$ENABLE_ROOTLESS_MODE" | egrep "^[0|1]$") ] && \
 		ERROR="yes" && echo "Error: Invalid value \"ENABLE_ROOTLESS_MODE=$ENABLE_ROOTLESS_MODE\""
 
-	[ -z "$(strings $PATH_BIN/nxagent | egrep 'NXAGENT - Version 1.5.0|NXAGENT - Version 2.0.0')" ] && \
-		ERROR="yes" && echo "Error: Could not find 1.5.0 or 2.0.0 version string in nxagent. NX 1.5.0 or 2.0.0 backend is needed for this version of FreeNX."
+	[ -z "$(strings $PATH_BIN/nxagent | egrep 'NXAGENT - Version 1.5.0|NXAGENT - Version 2.[01].0')" ] && \
+		ERROR="yes" && echo "Error: Could not find 1.5.0 or 2.[01].0 version string in nxagent. NX 1.5.0 or 2.[01].0 backend is needed for this version of FreeNX."
 		
 	[ -z $(echo "$ENABLE_USESSION" | egrep "^[0|1]$") ] && \
 		ERROR="yes" && echo "Error: Invalid value \"ENABLE_USESSION=$ENABLE_USESSION\""



From fabianx at mail.berlios.de  Tue Jan 23 03:33:18 2007
From: fabianx at mail.berlios.de (fabianx at BerliOS)
Date: Tue, 23 Jan 2007 03:33:18 +0100
Subject: [Freenx-cvs] r284 - freenx-server/trunk
Message-ID: <200701230233.l0N2XII9012180@sheep.berlios.de>

Author: fabianx
Date: 2007-01-23 03:33:17 +0100 (Tue, 23 Jan 2007)
New Revision: 284

Modified:
   freenx-server/trunk/ChangeLog
   freenx-server/trunk/nxclient
Log:
+       * Fixed nxclient to work with 2.1.0 backend.


Modified: freenx-server/trunk/ChangeLog
===================================================================
--- freenx-server/trunk/ChangeLog	2007-01-23 02:15:28 UTC (rev 283)
+++ freenx-server/trunk/ChangeLog	2007-01-23 02:33:17 UTC (rev 284)
@@ -16,6 +16,7 @@
 	  (ssycplkbocve at spammotel.com)
 	* Added version 2.1.0 support.
 	* Fixed LD_LIBRARY_PRELOAD default path in nxloadconfig.
+	* Fixed nxclient to work with 2.1.0 backend.
 	* Added autodetection of backend.
 
 01.07.2006 FreeNX 0.5.0 "UKUUG 2006 Edition"

Modified: freenx-server/trunk/nxclient
===================================================================
--- freenx-server/trunk/nxclient	2007-01-23 02:15:28 UTC (rev 283)
+++ freenx-server/trunk/nxclient	2007-01-23 02:33:17 UTC (rev 284)
@@ -43,8 +43,8 @@
 		--local) DIALOG_LOCAL="yes"; shift ;;
 		--noautokill) DIALOG_NOAUTOKILL="yes"; shift ;;
 		--display) DISPLAY="$2"; shift 2 ;;
-		--printer) DIALOG_PRINTER="$2"; shift 2 ; break ;;
-		--parent) DIALOG_PARENT="$2"; shift 2 ; break ;;
+		--printer) DIALOG_PRINTER="$2"; shift 2 ;;
+		--parent) DIALOG_PARENT="$2"; shift 2 ;;
 		--) shift ; break ;;
                 *) echo "Internal error!" ; exit 1; ;;
 	esac



From fabianx at mail.berlios.de  Tue Jan 23 04:11:19 2007
From: fabianx at mail.berlios.de (fabianx at BerliOS)
Date: Tue, 23 Jan 2007 04:11:19 +0100
Subject: [Freenx-cvs] r285 - in freenx-server/tags: . FreeNX-0.6.0
Message-ID: <200701230311.l0N3BJ1e013643@sheep.berlios.de>

Author: fabianx
Date: 2007-01-23 04:11:18 +0100 (Tue, 23 Jan 2007)
New Revision: 285

Added:
   freenx-server/tags/FreeNX-0.6.0/
   freenx-server/tags/FreeNX-0.6.0/ChangeLog
   freenx-server/tags/FreeNX-0.6.0/nxclient
Removed:
   freenx-server/tags/FreeNX-0.6.0/ChangeLog
   freenx-server/tags/FreeNX-0.6.0/nxclient
Log:
Tagged 0.6.0 release.



Copied: freenx-server/tags/FreeNX-0.6.0 (from rev 283, freenx-server/trunk)

Deleted: freenx-server/tags/FreeNX-0.6.0/ChangeLog
===================================================================
--- freenx-server/trunk/ChangeLog	2007-01-23 02:15:28 UTC (rev 283)
+++ freenx-server/tags/FreeNX-0.6.0/ChangeLog	2007-01-23 03:11:18 UTC (rev 285)
@@ -1,325 +0,0 @@
-23.01.2007 FreeNX 0.6.0 "Juliana birthday edition"
-	* Opened the 0.6.0 branch.
-	* Added nxnode slave mode.
-	* General code cleanup.
-		* Huge cleanup of nxnode.
-	* Removed "no-x11-forwarding" from keys to allow client to use the
-	  faster interactive sessions.
-	* Fixed nxsetup automatic testing of sessions and cleared up
-	  explanations.
-	* Added support for NX 2.0.0 style nxclient dialogs.
-	* Support for NX 2.0.0 backend in nxloadconfig.
-	* Fixed cups printing (added username and password).
-	* Fixed one more stray tail process.
-	* Added example script for "load" based loadbalancing.
-	* Fixed spaces in parameters for NX Client 2.0.0.
-	  (ssycplkbocve at spammotel.com)
-	* Added version 2.1.0 support.
-	* Fixed LD_LIBRARY_PRELOAD default path in nxloadconfig.
-	* Added autodetection of backend.
-
-01.07.2006 FreeNX 0.5.0 "UKUUG 2006 Edition"
-	* Opened the 0.5.0 branch.
-	* Added load balancing.
-	* Completely removed support for 1.4.0 backend.
-	* Rootless mode is now the default.
-	* Reworked nxnode / suspend on connection failure should work now.
-	* Added support for "Running" sessions.
-	* Fixed --send command. (Emmanuel Blindauer <freenx at mooby.net>)
-	* Fixed resume with nxclient >=1.5.0-106 for Windows.
-	* Fixed rootless sessions with Windows nxclient.
-	* Fixed keyboard issues by enabling the keybd channel.
-	* Fixed one more stray tail process and being able to
-	  cleanup after a hopelessly failed reconnection. (i.e. agent died)
-	* Fixed detection of xauth / netcat. Added option to disable extra
-	  checks.
-	* Fixed --terminate / --suspend when hostname has a '-' in it.
-	  (Emmanuel Blindauer <freenx at mooby.net>)
-	* ESD_NO_SPAWN is always set when ESPEAKER is set.
-	  ("Felipe Alfaro Solana" <felipe.alfaro at gmail.com>)
-	* Added perl replacement for 'rev' function on Sun OS 5.10.
-	* Fixed NODE_AUTOSTART to be unable to block sessions.
-	* Fixed stale sessions introduced by the new session handling model.
-	* Added usage of TCP NODELAY option.
-	* Fixed loadbalancing IP issues.
-	* Added --force-terminate to remove session info.
-	  Fixed issue with suspend/terminate commands.
-	* Added correct errorcode 596 instead of 504.
-	* Implemented "round-robin" and "load" loadbalancing algorithms.
-	  Cleaned up node.conf keys.
-	* Fixed help for --restart.
-	* Fixed session_running function, which fixes all remaining stale
-	  session problems.
-	* Removed termination of nxagent in case of rootless mode.
-	  (Fixes kontact without --nofork)
-	* Last minute fixes for new functions using rev.
-	* Added experimental last minute support for NX 2.0.0 backend.
-	  (set ENABLE_2_0_0_BACKEND=1)
-
-XX.XX.2006 FreeNX 0.4.5 "aKademy Edition"
-	* Made nxsetup more user-friendly and hopefully finally failsafe.
-	* Added --agent to nxnode/nxserver to allow easier debugging.
-	* Added addgroup/groupadd to nxsetup
-	* Added --ignore-errors support on nxsetup/nxloadconfig
-	* Added check for expect.
-
-06.08.2005 FreeNX 0.4.4 "UKUUG Enterprise Edition"
-	* Added ENABLE_1_5_0_BACKEND configuration directive:
-		* Fixed fullscreen support in nxdesktop (still feels more like
-		  'Available Area', but with Ctrl-Alt-F you can get "real"
-		  fullscreen)
-	* Added COMMAND_MD5SUM directive
-	* Security: $USER_FAKE_HOME/.nx now gets 0700
-	* Fixed support for CUPS forwarding.
-	* Added secure re-transmitting to client.
-	* Removed grep from getent to not search through the whole database.
-	  (Suggestion by "Matthew S. Harris" <mharris at google.com>,
-	                 "Ed Warnicke"       <eaw at cisco.com>)
-	* Set sleeps to 60 instead of 10 seconds, removed one wrong trap.
-	  (Suggestion by "Sunil" <funtoos at yahoo.com>)
-	* Made automatic timeout configurable.
-	  (Patch by "Ed Warnicke" <eaw at cisco.com>)
-	* Made nxsetup more enterprise friendly. Added --localuser
-	  (RedHat only) and --gid. 
-	  (Based on a patch by "Ed Warnicke" <eaw at cisco.com>)
-	* Fixed resume of multiple sessions.	
-
-28.07.2005 FreeNX 0.4.3 "NoMachine 1.5.0 Edition"
-	* Fixed reconnection problems with !M 1.5.0 client.
-	* Fixed reconnection problems with !M 1.5.0 backend.
-	* Added evaluation of $NX_ETC_DIR/node.conf.d/* config files.
-	* Fixed a possible security problem. (The client was able
-	  to overwrite parameters set by the server)
-	* Added ENABLE_1_5_0_BACKEND configuration directive:
-		* Added support for fake cookie authentication with
-		  !M 1.5.0 client and 1.5.0 backend.
-		* Fixed nxagent termination problems with !M 1.5.0
-		  backend.
-		* Added RDP highcolor support for !M 1.5.0 client
-		  with !M 1.5.0 backend.
-	* Added secure logging - Passwords are no longer shown in log files.
-	* Security: Certain passwords for VNC/RDP could have been visible via 
-	  `ps aux`.
-	* Added experimental usermode authentication scheme.
-	  (Disabled by default)
-
-16.07.2005 FreeNX 0.4.2 "Solaris / Bugfix / Linux Infotag Pforzheim Edition"
-	* Removed forwarding support via "freenx.<user>", because it was
-	  buggy.
-	* Cleaned up lots of code.
-		* Fixed one case of a left over file.
-		* Removed one unnecessary usage of a temporary file.
-	* Added exit handlers in nxserver and nxnode for more stability on 
-	  reboot of system.
-	* Changed nxnode to be much more stable.
-		* Catched one additional "unclean termination of nxagent" 
-		  case, which lead to "zombie" sessions.
-	* Reworked reconnection support for more stability.
-		* Added displaying of reconnection failure in
-		  system log / client ssh log.
-	* Added even more possibilities to catch and report session startup 
-	  failures.
-	* Fixed PNG and JPEG-levels pack method.
-	* Added usage of netcat -z to check that the port is really not used by
-	  another agent.
-	* Added nxserver --cleanup, which terminates all running sessions.
-	  Useful after a power outage.
-	* Fixed nxclient invocation with non-standard installation path
-	* Added detection of SSH2_CLIENT variable (commercial ssh)
-	* Finally fixed problems with GNOME.
-	* FINALLY added Solaris Support Patch.
-
-24.06.2005 FreeNX 0.4.1 "LinuxTag Edition"
-	* Fixed a small security problem giving access to session database.
-	* Added support for 1.5.0 OSS components. (especially rootless mode)
-	* Fixed Filesharing over the Internet. (Thanks to rogierm at users.berlios.de)
-	* Fixed Resume on Windows with non-fullscreen sessions.
-	* Added suspend/resume support for 1.5.0 OSS components.
-	* Fixed display of suspended sessions in nxserver --list.
-
-04.05.2005 FreeNX 0.4.0 "SambaXP Edition"
-	* Opened the 0.4.0 branch.
-	* Added initial support for filesharing via samba.
-	* Improvements to be more node.conf compatible.
-	* Added COMMAND_NETCAT, COMMAND_SSH & COMMAND_SSH_KEYGEN directive
-	* Added support for 'nxloadconfig --check' to validate node.conf 
-	  settings
-	* Added initial support for sound (esd/artsd).
-	* Added optional support for utmp/wtmp/lastlog database.
-	* Removed support for OSS components prior version 1.4.0 in nxnode.
-	  Added -option option to nxagent/nxdesktop/nxviewer.
-	* Added forwarding to commercial server via destination port.
-	* Added more compatible getparam function
-	* Sets LD_PRELOAD for applications and LD_LIBRARY_PATH for 
-	  nxagent/nxproxy by default.
-		- SET_LD_LIBRARY_PATH replaces NX_NOMACHINE_WAY and is 
-		  enabled by default, as it is now safe to do so
-	* Implemented SSHD_CHECK_IP directive.
-	* Added the SESSION_HISTORY directive. Session history will by default 
-	  be kept for 30 days.
-	* Implemented DEFAULT_X_WM for unix-application virtual desktop mode.
-	* Implemented SESSION_LIMIT and SESSION_USER_LIMIT.
-	* Fixed nxviewer commandline for geometry and fullscreen-support
-	* Added NX_LOG_LEVEL instead of NX_LOGGING, allowing less verbose 
-	  logfile.
-	* Added SESSION_LOG_CLEAN for configurable removal of the temporary 
-	  session directory.
-	* Added "--ssh2" cmdline switch for commercial ssh2-server support 
-	  in nxsetup.
-	* Added ENABLE_FORCE_ENCRYPTION to enforce the usage of encryption on 
-	  the server.
-	* Added nxprint and added -printer to nxclient together with handling
-	  of drivers cache.
-	* Fixed a possible race-condition. (reported by Edward Warnicke
-	  <eaw at cisco.com>)
-	* Feature Request #847 (stderror of some applications to log-file)
-	* Feature Request #900 (Detect ssh/sshd in nxsetup)
-	* Added printing support via userspace CUPSd and Samba.
-
-20.03.2005 FreeNX 0.3.1 "Bugfix Edition"
-	* Fixed keyboard mapping problems.
-	* Fixed unix-custom mode; now allowing parameters to be passed.
-	* Fixed password prompt detection support in nxnode-login.
-	* Fixed locking to prevent usage of the same display.
-	* Fixed resume when agent is no longer there.
-	* Fixed error message shown to user, when session startup fails.
-	* Fixed handling of /tmp/.X*-lock files.
-	* Fixed handling of not closed sessions in "Terminating" status.
-	* Fixed resume of multiple suspended sessions.
-
-05.03.2005 FreeNX 0.3.0 "Chemnitzer LinuxTage Edition"
-	* Initial CVS checkin.
-	* Added unix-default as session type - by Kalev Lember 
-	  <kalev at smartlink.ee>
-	* Fixed nxclient loop - by "Neil Wilson" <neil at aldur.co.uk>.
-	* Several fixes by Thorsten Sandfuchs <fux at users.berlios.de>.
-	* Optional config file support (system- and user-wide)
-		- by Jon Severinsson <jonno at users.berlios.de>.
-	* Moved logfile to /var/log/nxserver.log.
-	* Moved nx homedir to /var/lib/nxserver/home
-	* Complete rewrite of authentication code
-		* passdb, su or ssh is now supported.
-		- by Jon Severinsson <jonno at users.berlios.de>.
-	* Added NODE_AUTOSTART, EXPORT_{USERIP/SESSIONID} config file
-	  directives.
-	* Added mechanism to forward connection to commercial NoMachine 
-	  nxserver (as available from www.nomachine.com).
-	* Added mechanism to forward connection to another nxserver. This
-	  allows using a "chain" of nxservers.
-	* Added "floating window" support by using rootless nxagent as
-	  it will be standard in NX 1.5.0.
-	* Added "floating window" support by just nxproxy/nxproxy connection
-	  and added configuration directive to enable rootless mode.
-	* Added nxsetup --uninstall and added more feature to nxsetup.
-	  Note: You need to use nxsetup --install for installation now.
-	* Added Disabling of port-forwarding, X11-forwarding, ... to ssh-key.
-
-	* Security: Fixed a security blunder. Authority file was not used 
-	            and so basically xhost +localhost was set. (ported from
-		    0.2.8)
-		    
-		    Update immediately.
-                   
-	* Security: Fixed two possible security problems (umask was not set
-                   correctly; ported from 0.2.8)
-
-20.11.2004 FreeNX 0.2.7 "Skolelinux Edition"
-	* Fix nxserver to work again with KNX-Client. ('\r' is evil)
-	* Fix timeout in nxnode-login to allow proper session management
-	  again.
-	* Fixed possible race condition for the wait-file.
-
-11.11.2004 FreeNX 0.2.6
-	
-	* Security: Fixed a possible exploit in ssh-usage
-	    (thanx to Sebastian Krahmer from the SuSE security team)
-	* Important: Public/Private key is no longer used for PAM auth mode.
-	
-14.10.2004 FreeNX 0.2.5
-	* Added Xdialog interface for nxclient and automatic usage
-	  of commercial nxclient when available. (Thx go to Rick Stout 
-	  <zipsonic at gmail.com>)
-	* Added bugfix from the 0.3.0 branch for more flexible nxdesktop in
-	  nxnode.
-	* Added patch by Rick Stout for permission problems in nxnode.
-	* Added patch by Rick Stout for a typo in nxkeygen.
-	* Updated gentoo-nomachine.diff.
-	* Updated CONTRIB to include a description of lazy-image encoding.
-
-11.09.2004 FreeNX 0.2.4
-	* Added timeout to avoid having hanging tail processes.
-	* Added "locking" of the display-offset if nxagent failed to start.
-	* Fixed ssh encryption for resume on client 1.4.0-snapshot 5.
-	* Fixed mktemp, which was non-portable to FreeBSD and Red Hat 9.
-
-10.09.2004 FreeNX 0.2-3
-	* Added support for autoreconnection or autoreconnection just 
-	  for the case when an older client version is used.
-	  	* This makes it possible to use Reconnection with the 
-	  	  stable version 1.3.2-7 (enabled by default)
-	* Added instructions how to install the NoMachine sources to INSTALL
-	* Changed $NX_DIR/bin/ssh to ssh to fix gentoo-nomachine.diff
-	* Added nxkeygen by Stuart Herbert for easier change from the 
-	  NoMachine key to another key afterwards.
-	
-	* Security: Any user was able to change the status of other sessions
-	            in the session database by providing the correct uniqueid.
-
-10.09.2004 FreeNX 0.2-2
-	* Added additional support for safe session suspend, 
-	  autosuspend when network connection times out works now!
-	* AuthorizedKeysFile cannot be safely determined on Gentoo;
-	  changed it to config option now.
-	* Added config option to completely disable passdb support.
-	* Fixed bugs in nxclient dialog frontend.
-	* Removed all usage of nxssh due to security concerns from SuSE. 
-	* Fixed session management for knx client.
-	* Added detection of failed nxagent startup.
-	* Updated the gentoo-nomachine.diff to be not fuzzy.
-
-08.09.2004 FreeNX 0.2-1
-	* Fixed support for one windows client version. 
-	* Fixed setting of key with --adduser.
-	  (Thanks to Stuart Herbert <stuart at gentoo.org>)
-	* Fixed _some_ cases for AuthorizedKeysFile in sshd_config.
-	  (Thanks to Peter Holik <peter at holik.at>)
-
-	* Fixed gentoo-nomachine.diff (nxnode not in path, but nxnode-login would try that)
-	* Fixed the bug with hanging tail processes.
-
-07.09.2004 FreeNX 0.2-0
-	* Reworked the whole security model in nxsetup due to requests from SuSE and Gentoo.
-		- nxsetup does not use the NoMachine key by default. 
-		- PAM authentication is enabled by default.
-	
-	* Added nxclient for compatibility with nxclient -dialog mode.
-	
-	* Minor changes
-		* Added SSHD_AUTH_PORT to config vars in nxserver
-		* Made all programs NX_ aware
-		* Programs do now honor the setting of AuthorizedKeysFile in sshd_config
-		* Changed nxsetup check from direct reading of passwd to getent
-		  (Thanks to Tom Hibbert <tom at nsp.co.nz>)
-		* Changed overall messages in nxsetup
-	
-	* Made a overall clean upstream package.
-	* Added Gentoo / NoMachine compatibility diff
-
-06.09.2004 
-	* Added pam authentication
-	* Added user_db switch
-	* moved some su - to nxnode-login
-
-02.09.2004 
-	* Added support for snapshot 4 (43/66)
-	* Fixed compatibility issue with 1.3.0 
-	  (Used by Knoppix 3.4 and earlier)
-	* added sane logging (LOGGING is now properly used)
-
-20.06.2004 
-	* Added Protocol version 1.4.0
-	* Cleanup
-	* Added missing functions
-
-14.06.2004 
-	* Added Protocol version 1.3.2

Copied: freenx-server/tags/FreeNX-0.6.0/ChangeLog (from rev 284, freenx-server/trunk/ChangeLog)

Deleted: freenx-server/tags/FreeNX-0.6.0/nxclient
===================================================================
--- freenx-server/trunk/nxclient	2007-01-23 02:15:28 UTC (rev 283)
+++ freenx-server/tags/FreeNX-0.6.0/nxclient	2007-01-23 03:11:18 UTC (rev 285)
@@ -1,336 +0,0 @@
-#!/bin/bash
-#
-# Copyright (c) 2004 by Fabian Franz <freenx at fabian-franz.de>
-#           (c) 2004 by Rick Stout <zipsonic at gmail.com>
-#
-# License: GPL, version 2
-#
-# Note: NX does not check the exit-code from nxclient,
-#       but we set it to a "good value" anyway in case 
-#       it does check it someday.
-#
-# SVN: $Id$
-#
-# ========================================================================
-
-# First check if the commercial nxclient is available and use it
-# but check that it isn't this script to prevent a loop!
-NXCLIENT="/usr/NX/bin/nxclient"
-[ -x "$NXCLIENT" -a "$(file -bi $NXCLIENT)" != 'application/x-shellscript' ] \
-	&& exec ${NXCLIENT} "$@"
-
-TEMP=`getopt -a -o d: --long local,noautokill,dialog:,caption:,message:,display:,printer:,parent: -n $(basename $0) -- "$@"`
-
-if [ $? != 0 ] ; then echo "Terminating..." >&2 ; exit 1 ; fi
-
-# Note the quotes around `$TEMP': they are essential!
-eval set -- "$TEMP"
-
-DIALOG_TYPE="ok";
-DIALOG_CAPTION=""
-DIALOG_MESSAGE=""
-DIALOG_LOCAL=""
-DIALOG_NOAUTOKILL=""
-DIALOG_PRINTER=""
-DIALOG_PARENT="$PPID"
-
-while true
-do
-        case "$1" in
-		--dialog) DIALOG_TYPE="$2"; shift 2 ;;
-		--caption) DIALOG_CAPTION="$2"; shift 2 ;;
-		--message) DIALOG_MESSAGE="$2"; shift 2 ;;
-		--local) DIALOG_LOCAL="yes"; shift ;;
-		--noautokill) DIALOG_NOAUTOKILL="yes"; shift ;;
-		--display) DISPLAY="$2"; shift 2 ;;
-		--printer) DIALOG_PRINTER="$2"; shift 2 ; break ;;
-		--parent) DIALOG_PARENT="$2"; shift 2 ; break ;;
-		--) shift ; break ;;
-                *) echo "Internal error!" ; exit 1; ;;
-	esac
-done
-
-export DISPLAY
-
-# if --printer is set, the dialog type is overridden
-[ -n "$DIALOG_PRINTER" ] && DIALOG_TYPE="printer"
-
-if [ -x /usr/bin/Xdialog ] 
-then
-	dialog_interface="xdialog"
-	DIALOG=/usr/bin/Xdialog # just in case that we have no good path
-else
-	dialog_interface="xmessage"
-	xmessage=$(which xmessage 2>/dev/null)
-	[ -z "$xmessage" ] && xmessage="/usr/X11R6/bin/xmessage"
-fi
-
-#
-# utility functions for all interfaces
-#
-
-# utility_printer "get|set|getlist|getvendlist|getdrvlist"
-#
-#	get <name> - gets the current driver for name
-#	set <name> <driver> <description> - sets the current driver and description for name
-#	getvendlist - gets a list of vendors
-#	getdrvlist <vendor> - gets a list of drivers for vendor
-#	getextdrvlist <vendor> - gets an extended list (with driver and 
-#                                description) of drivers for vendor
-#	getdesc <driver> - gets the description for driver <driver>
-#	getlist - gets a list of drivers
-
-#
-# drivers.cache has the following format:
-#	
-#	driver|<printername>|<ppdfile>|<description>
-#
-
-#
-# Example: IFS='|' DEFAULT_PRINTER=( $(utility_printer get <myprinter>) )
-# 	  
-#	You can then select ${DEFAULT_PRINTER[1]} for <printername>.
-# 
-
-utility_printer()
-{
-	UTILITY_DRIVERS_CACHE="$HOME/.nx/config/drivers.cache"
-	[ -n "$USER_FAKE_HOME" ] && UTILITY_DRIVERS_CACHE="$USER_FAKE_HOME/.nx/config/drivers.cache"
-	UTILITY_NXPRINT="nxprint"
-	[ -n "$PATH_BIN" ] && UTILITY_NXPRINT="$PATH_BIN/nxprint"
-	case "$1" in 
-		get)
-			grep "driver|$2|" "$UTILITY_DRIVERS_CACHE" 2>/dev/null
-		;;
-		set)
-			# FIXME: Handle possible race conditions?
-			grep -v "driver|$2|" "$UTILITY_DRIVERS_CACHE" 2>/dev/null > $UTILITY_DRIVERS_CACHE.tmp
-			echo "driver|$2|$3|$4" >> $UTILITY_DRIVERS_CACHE.tmp
-			mv -f $UTILITY_DRIVERS_CACHE.tmp $UTILITY_DRIVERS_CACHE
-		;;
-		getvendlist)
-			$UTILITY_NXPRINT -d | awk -F'|' '{ print $2 }' | uniq | tr '\n' '|'
-		;;
-		getdrvlist)
-			$UTILITY_NXPRINT -d | awk -F'|' '($2=="'$2'") { print $4}' | tr '\n' '|'
-		;;
-		getextdrvlist)
-			$UTILITY_NXPRINT -d | awk -F'|' '($2=="'$2'") { print $4 "|" $3 }'
-		;;
-
-		getdesc)
-			$UTILITY_NXPRINT -d | awk -F'|' '($4=="'$2'") { print $3}'
-		;;
-		getlist)
-			$UTILITY_NXPRINT -d
-		;;
-	esac
-}
-
-#
-# xmessage dialog interface
-#
-
-xmessage_ok()
-{
-	$xmessage -buttons "Ok:0" -center "$DIALOG_MESSAGE"
-	return 0 # Give cancel on close ...
-}
-
-xmessage_yesno()
-{
-	$xmessage -buttons "Yes:2,No:0" -center "$DIALOG_MESSAGE"
-}
-
-xmessage_yesnosuspend()
-{
-	$xmessage -buttons "Suspend:3,Terminate:2,Cancel:0" -center "$DIALOG_MESSAGE"
-}
-
-xmessage_panic()
-{
-	$xmessage -buttons "Terminate:2,Cancel:0" -center "$DIALOG_MESSAGE"
-}
-
-xmessage_quit()
-{
-	$xmessage -buttons "Quit:0" -center "$DIALOG_MESSAGE"
-	return 0 # Give cancel on close ...
-}
-
-xmessage_printer_ask()
-{
-	$xmessage -buttons "Ok:100,Configure:101,Cancel:102" -center "$DIALOG_MESSAGE"
-	RC=$?
-	[ $RC -lt 100 ] && return 2
-	let RC=$RC-100
-	return $RC
-}
-
-xmessage_printer_configure()
-{
-	IFS=','
-	$xmessage -buttons "$*" -center "$DIALOG_MESSAGE"
-	RC=$?
-	unset IFS
-	VENDOR=""
-	if [ $RC -gt 100 ]
-	then
-		let NR=$RC-100
-		VENDOR="${!NR}"
-	fi
-	echo "$VENDOR"
-}
-
-xmessage_printer_configure_vendor()
-{
-	IFS='|' VENDOR_LIST=( $(utility_printer getvendlist) )
-	xmessage_printer_configure "${VENDOR_LIST[@]}"
-}
-
-xmessage_printer_configure_driver()
-{
-	IFS='|' DRIVER_LIST=( $(utility_printer getdrvlist "$1") )
-	xmessage_printer_configure "${DRIVER_LIST[@]}"
-}
-
-#
-# xdialog interface
-#
-
-xdialog_ok()
-{
-	$DIALOG --title "$DIALOG_CAPTION" --msgbox "$DIALOG_MESSAGE" 0 0
-	return 0 # Give cancel on close ...
-}
-
-xdialog_yesno()
-{
-	$DIALOG --title "$DIALOG_CAPTION" --yesno "$DIALOG_MESSAGE" 0 0
-	RC=$?
-	[ $RC -eq 0 ] && return 2
-	[ $RC -eq 1 ] && return 0
-}
-
-xdialog_yesnosuspend()
-{
-	$DIALOG --title "$DIALOG_CAPTION" --buttons-style text --ok-label "Suspend" --cancel-label "Terminate" --yesno "$DIALOG_MESSAGE Close window to cancel." 400x150
-	RC=$?
-	[ $RC -eq 0 ] && return 3
-	[ $RC -eq 1 ] && return 2
-}
-
-xdialog_panic()
-{
-	$DIALOG --title "$DIALOG_CAPTION" --buttons-style text --default-no --ok-label "Terminate" --cancel-label "Cancel" --yesno "$DIALOG_MESSAGE" 0x0
-	RC=$?
-	[ $RC -eq 0 ] && return 2
-	[ $RC -eq 1 ] && return 0
-}
-
-xdialog_quit()
-{
-        $DIALOG --buttons-style text --ok-label "Quit" --title "$DIALOG_CAPTION" --msgbox "$DIALOG_MESSAGE" 0 0
-        return 0 # Give cancel on close ...
-}
-
-xdialog_printer_ask()
-{
-	$DIALOG --title "$DIALOG_CAPTION" --buttons-style text --ok-label "Ok" --cancel-label "Configure" --yesno "$DIALOG_MESSAGE\n\nClose window to cancel." 400x250
-	RC=$?
-	[ $RC -eq 255 ] && return 2
-	return $RC
-}
-
-xdialog_printer_configure_vendor()
-{
-	IFS='|' VENDOR_LIST=( $(utility_printer getvendlist | sed 's/|/||off|/g') )
-	$DIALOG --stdout --title "$DIALOG_CAPTION" --radiolist "$DIALOG_MESSAGE" 0 0 6 "${VENDOR_LIST[@]}"
-}
-
-# xdialog_printer_configure_driver vendor old_driver
-xdialog_printer_configure_driver()
-{
-	IFS='|' XDIALOG_LIST=( $(utility_printer getextdrvlist "$1" | sed 's/$/|off/g; /'"$2"'/ s/|off/|on/g' | tr '\n' '|') )
-	$DIALOG --stdout --title "$DIALOG_CAPTION" --radiolist "$DIALOG_MESSAGE" 0 0 6 "${XDIALOG_LIST[@]}"
-}
-
-
-#
-# helper functions
-#
-
-helper_dialog_printer()
-{
-	IFS="|" PRINTER_INFORMATION=( $(utility_printer get "$DIALOG_PRINTER") )
-	PRINTER_CONFIGURE="yes"
-	[ -z "$DIALOG_CAPTION" ] && DIALOG_CAPTION="NX Printer configuration for $DIALOG_PRINTER"
-	
-	# Do we have old printer information present?
-	if [ -n "$PRINTER_INFORMATION" ]
-	then
-		DIALOG_MESSAGE=$(echo -e "Found driver for printer $DIALOG_PRINTER.\n\nOld choice was: ${PRINTER_INFORMATION[3]}.\n\nIf you want to keep the settings click on 'Ok' \n- else click on 'Configure'.") ${dialog_interface}_printer_ask
-		RC=$?
-		# bail out with exit code 2 in case the user cancelled the operation
-		[ $RC -eq 2 ] && echo "cancel: aborted" && exit 2
-		[ $RC -eq 0 ] && PRINTER_CONFIGURE="no"
-	fi
-	
-	VENDOR=""
-	OLD_DRIVER="${PRINTER_INFORMATION[2]}"
-
-	if [ "$PRINTER_CONFIGURE" = "yes" ]
-	then
-		DRIVER=""
-		VENDOR=$(DIALOG_MESSAGE="Choose vendor for printer $DIALOG_PRINTER." ${dialog_interface}_printer_configure_vendor)
-		[ -n "$VENDOR" ] && DRIVER=$(DIALOG_MESSAGE="Choose driver for printer $DIALOG_PRINTER." ${dialog_interface}_printer_configure_driver "$VENDOR" "${OLD_DRIVER:-invalid}")
-		# set the new printer driver
-		if [ -n "$DRIVER" ]
-		then
-			DESC=$(utility_printer getdesc "$DRIVER")
-			utility_printer set "$DIALOG_PRINTER" "$DRIVER" "$DESC"
-		fi
-	else
-		DRIVER="$OLD_DRIVER"
-	fi
-
-	# echo the choosen <ppdfile> to stdout
-	[ -n "$DRIVER" ] && echo "$DRIVER"
-	[ -z "$DRIVER" ] && echo "cancel: aborted" && exit 2
-			
-	exit 0
-}
-
-#
-# main case statement
-#
-
-case $DIALOG_TYPE in 
-	ok)
-		${dialog_interface}_ok
-	;;
-	yesno)
-		${dialog_interface}_yesno
-	;;
-	yesnosuspend)
-		${dialog_interface}_yesnosuspend
-	;;
-	panic)
-		${dialog_interface}_panic
-	;;
-	quit)
-		${dialog_interface}_quit
-	;;
-	printer)
-		helper_dialog_printer
-	;;
-esac
-
-#
-# Time for exit code checks :)
-#
-
-RC=$?
-	[ $RC -eq 2 ] && kill -TERM $DIALOG_PARENT
-	[ $RC -eq 3 ] && kill -HUP $DIALOG_PARENT
-exit 0

Copied: freenx-server/tags/FreeNX-0.6.0/nxclient (from rev 284, freenx-server/trunk/nxclient)



From fabianx at mail.berlios.de  Tue Jan 23 04:56:21 2007
From: fabianx at mail.berlios.de (fabianx at BerliOS)
Date: Tue, 23 Jan 2007 04:56:21 +0100
Subject: [Freenx-cvs] r286 - freenx-website
Message-ID: <200701230356.l0N3uLac015485@sheep.berlios.de>

Author: fabianx
Date: 2007-01-23 04:56:21 +0100 (Tue, 23 Jan 2007)
New Revision: 286

Modified:
   freenx-website/download.inc
Log:
Updated the downloads.



Modified: freenx-website/download.inc
===================================================================
--- freenx-website/download.inc	2007-01-23 03:11:18 UTC (rev 285)
+++ freenx-website/download.inc	2007-01-23 03:56:21 UTC (rev 286)
@@ -20,10 +20,10 @@
 		<dt>
 			Debian/Ubuntu DEBs
 		</dt>
-		<dd>
+<!--		<dd>
 			<a href="http://kanotix.com/files/debian/pool/main/f/freenx/">http://kanotix.com/files/debian/pool/main/f/freenx/</a>
 		</dd>
-<!--                <dd>
+                <dd>
                         <a href="http://kalyxo-archive.mornfall.net/pool/main/f/freenx/">http://kalyxo-archive.mornfall.net/pool/main/f/freenx/</a>
                 </dd>
 		<dd>
@@ -33,6 +33,12 @@
 			<a href="http://packages.debianbase.de/">http://packages.debianbase.de/</a>
 		</dd>
 		<dt>
+			CentOS RPMs &amp; HOWTO
+		</dt>
+		<dd>
+			<a href="http://wiki.centos.org/FreeNX">http://wiki.centos.org/FreeNX</a>
+		</dd>
+		<dt>
 			Fedora/Redhat RPMs &amp; HOWTO
 		</dt>
 		<dd>



From fabianx at mail.berlios.de  Tue Jan 23 05:04:03 2007
From: fabianx at mail.berlios.de (fabianx at BerliOS)
Date: Tue, 23 Jan 2007 05:04:03 +0100
Subject: [Freenx-cvs] r287 - freenx-website
Message-ID: <200701230404.l0N443Bm016155@sheep.berlios.de>

Author: fabianx
Date: 2007-01-23 05:04:03 +0100 (Tue, 23 Jan 2007)
New Revision: 287

Modified:
   freenx-website/home.inc
Log:
Release 0.6.0.



Modified: freenx-website/home.inc
===================================================================
--- freenx-website/home.inc	2007-01-23 03:56:21 UTC (rev 286)
+++ freenx-website/home.inc	2007-01-23 04:04:03 UTC (rev 287)
@@ -10,6 +10,82 @@
 	<h2>
 		News
 	</h2>
+	<h3>
+		<a
+	href="http://mail.kde.org/pipermail/freenx-knx/2007-January/004535.html">FreeNX
+	0.6.0 Released</a> 
+        - Tuesday, January 23, 2007 - 	
+	[<a title="Download"
+	href="http://prdownload.berlios.de/freenx/freenx-0.6.0.tar.gz">Download</a>]
+	</h3>
+	<pre>
+23.01.2007 FreeNX 0.6.0 "Juliana birthday edition"
+        * Opened the 0.6.0 branch.
+        * Added nxnode slave mode.
+        * General code cleanup.
+                * Huge cleanup of nxnode.
+        * Removed "no-x11-forwarding" from keys to allow client to use the
+          faster interactive sessions.
+        * Fixed nxsetup automatic testing of sessions and cleared up
+          explanations.
+        * Added support for NX 2.0.0 style nxclient dialogs.
+        * Support for NX 2.0.0 backend in nxloadconfig.
+        * Fixed cups printing (added username and password).
+        * Fixed one more stray tail process.
+        * Added example script for "load" based loadbalancing.
+        * Fixed spaces in parameters for NX Client 2.0.0.
+          (ssycplkbocve at spammotel.com)
+        * Added version 2.1.0 support.
+        * Fixed LD_LIBRARY_PRELOAD default path in nxloadconfig.
+        * Fixed nxclient to work with 2.1.0 backend.
+        * Added autodetection of backend.
+
+01.07.2006 FreeNX 0.5.0 "UKUUG 2006 Edition"
+        * Opened the 0.5.0 branch.
+        * Added load balancing.
+        * Completely removed support for 1.4.0 backend.
+        * Rootless mode is now the default.
+        * Reworked nxnode / suspend on connection failure should work now.
+        * Added support for "Running" sessions.
+        * Fixed --send command. (Emmanuel Blindauer )
+        * Fixed resume with nxclient >=1.5.0-106 for Windows.
+        * Fixed rootless sessions with Windows nxclient.
+        * Fixed keyboard issues by enabling the keybd channel.
+        * Fixed one more stray tail process and being able to
+          cleanup after a hopelessly failed reconnection. (i.e. agent died)
+        * Fixed detection of xauth / netcat. Added option to disable extra
+          checks.
+        * Fixed --terminate / --suspend when hostname has a '-' in it.
+          (Emmanuel Blindauer )
+        * ESD_NO_SPAWN is always set when ESPEAKER is set.
+          ("Felipe Alfaro Solana" )
+        * Added perl replacement for 'rev' function on Sun OS 5.10.
+        * Fixed NODE_AUTOSTART to be unable to block sessions.
+        * Fixed stale sessions introduced by the new session handling model.
+        * Added usage of TCP NODELAY option.
+        * Fixed loadbalancing IP issues.
+        * Added --force-terminate to remove session info.
+          Fixed issue with suspend/terminate commands.
+        * Added correct errorcode 596 instead of 504.
+        * Implemented "round-robin" and "load" loadbalancing algorithms.
+          Cleaned up node.conf keys.
+        * Fixed help for --restart.
+        * Fixed session_running function, which fixes all remaining stale
+          session problems.
+        * Removed termination of nxagent in case of rootless mode.
+          (Fixes kontact without --nofork)
+        * Last minute fixes for new functions using rev.
+        * Added experimental last minute support for NX 2.0.0 backend.
+          (set ENABLE_2_0_0_BACKEND=1)
+
+XX.XX.2006 FreeNX 0.4.5 "aKademy Edition"
+        * Made nxsetup more user-friendly and hopefully finally failsafe.
+        * Added --agent to nxnode/nxserver to allow easier debugging.
+        * Added addgroup/groupadd to nxsetup
+        * Added --ignore-errors support on nxsetup/nxloadconfig
+        * Added check for expect.
+	</pre>
+
 	<h3>		<a
 	href="http://wiki.debian.org/DebianEdu/DevCamp2006">FreeNX at Debian-Edu DevCamp 2006.</a> 
         - Saturday, July 08, 2006 -



From fabianx at mail.berlios.de  Wed Jan 24 15:46:12 2007
From: fabianx at mail.berlios.de (fabianx at BerliOS)
Date: Wed, 24 Jan 2007 15:46:12 +0100
Subject: [Freenx-cvs] r288 - freenx-server/trunk
Message-ID: <200701241446.l0OEkCA7028327@sheep.berlios.de>

Author: fabianx
Date: 2007-01-24 15:46:11 +0100 (Wed, 24 Jan 2007)
New Revision: 288

Modified:
   freenx-server/trunk/ChangeLog
   freenx-server/trunk/nxclient
   freenx-server/trunk/nxloadconfig
   freenx-server/trunk/nxnode
   freenx-server/trunk/nxprint
   freenx-server/trunk/nxserver
Log:
        * Fixed the printing support for CUPS 1.2.
          Older versions of CUPS are no longer supported.
          * Note: You might need to do: chmod 755
                  /usr/lib/cups/backend/{ipp, http}
        * Added foomatic support.
          * Note: You might need to do: ln -s /usr/bin/foomatic-ppdfile
                  /usr/lib/cups/driver/
        * Added setting of CUPS_SERVER environment var.
        * Added automatic downloading of PPDs, if the client supports it.



Modified: freenx-server/trunk/ChangeLog
===================================================================
--- freenx-server/trunk/ChangeLog	2007-01-23 04:04:03 UTC (rev 287)
+++ freenx-server/trunk/ChangeLog	2007-01-24 14:46:11 UTC (rev 288)
@@ -1,3 +1,14 @@
+xx.xx.2007 FreeNX 0.6.1
+	* Fixed the printing support for CUPS 1.2.
+	  Older versions of CUPS are no longer supported.
+	  * Note: You might need to do: chmod 755
+		  /usr/lib/cups/backend/{ipp, http}
+	* Added foomatic support.
+	  * Note: You might need to do: ln -s /usr/bin/foomatic-ppdfile
+	          /usr/lib/cups/driver/
+	* Added setting of CUPS_SERVER environment var.
+	* Added automatic downloading of PPDs, if the client supports it.
+
 23.01.2007 FreeNX 0.6.0 "Juliana birthday edition"
 	* Opened the 0.6.0 branch.
 	* Added nxnode slave mode.

Modified: freenx-server/trunk/nxclient
===================================================================
--- freenx-server/trunk/nxclient	2007-01-23 04:04:03 UTC (rev 287)
+++ freenx-server/trunk/nxclient	2007-01-24 14:46:11 UTC (rev 288)
@@ -251,7 +251,7 @@
 # xdialog_printer_configure_driver vendor old_driver
 xdialog_printer_configure_driver()
 {
-	IFS='|' XDIALOG_LIST=( $(utility_printer getextdrvlist "$1" | sed 's/$/|off/g; /'"$2"'/ s/|off/|on/g' | tr '\n' '|') )
+	IFS='|' XDIALOG_LIST=( $(utility_printer getextdrvlist "$1" | sed 's,$,|off,g; /'"$(basename $2)"'/ s,|off,|on,g' | tr '\n' '|') )
 	$DIALOG --stdout --title "$DIALOG_CAPTION" --radiolist "$DIALOG_MESSAGE" 0 0 6 "${XDIALOG_LIST[@]}"
 }
 

Modified: freenx-server/trunk/nxloadconfig
===================================================================
--- freenx-server/trunk/nxloadconfig	2007-01-23 04:04:03 UTC (rev 287)
+++ freenx-server/trunk/nxloadconfig	2007-01-24 14:46:11 UTC (rev 288)
@@ -52,7 +52,7 @@
 # DO NOT TOUCH unless you REALLY know what you are doing
 #########################################################################
 
-NX_VERSION=1.5.0-60
+NX_VERSION=1.5.0-61
 NX_LICENSE="OS (GPL)"
 
 # Where can different nx components be found

Modified: freenx-server/trunk/nxnode
===================================================================
--- freenx-server/trunk/nxnode	2007-01-23 04:04:03 UTC (rev 287)
+++ freenx-server/trunk/nxnode	2007-01-24 14:46:11 UTC (rev 288)
@@ -283,6 +283,8 @@
 		fi
 	fi
 
+	[ "$cups" = "1" ] && export CUPS_SERVER=$USER_FAKE_HOME/.nx/C-$sess_id/cups/cups.sock
+
 	#
 	# Do we need to PRELOAD any libraries?
 	#	
@@ -551,12 +553,13 @@
 	let NODE_CUPSD_PORT=$display+9000 # offset 9000 for userspace cupsd's
 	export NODE_CUPSD_PORT
 	
+	export NODE_CUPSD_SOCKET="$USER_FAKE_HOME/.nx/C-$sess_id/cups/cups.sock"
+	
 	mkdir -p "$USER_FAKE_HOME/.nx/C-$sess_id/pids/"
 	[ -e "$USER_FAKE_HOME/.nx/C-$sess_id/pids/cupsd" ] && return
 	touch "$USER_FAKE_HOME/.nx/C-$sess_id/pids/cupsd"
 	
-	mkdir -p "$USER_FAKE_HOME/.nx/C-$sess_id/cups/spool/tmp" "$USER_FAKE_HOME/.nx/C-$sess_id/cups/spool/certs" "$USER_FAKE_HOME/.nx/C-$sess_id/cups/ppd"
-	ln -sf spool/certs "$USER_FAKE_HOME/.nx/C-$sess_id/cups/certs"
+	mkdir -p "$USER_FAKE_HOME/.nx/C-$sess_id/cups/spool/tmp" "$USER_FAKE_HOME/.nx/C-$sess_id/cups/spool/certs" "$USER_FAKE_HOME/.nx/C-$sess_id/cups/ppd" "$USER_FAKE_HOME/.nx/C-$sess_id/cups/cache"
 
 cat <<EOF > $USER_FAKE_HOME/.nx/C-$sess_id/cups/cupsd.conf
 AccessLog /dev/null
@@ -566,15 +569,27 @@
 TempDir $USER_FAKE_HOME/.nx/C-$sess_id/cups/spool/tmp
 RequestRoot $USER_FAKE_HOME/.nx/C-$sess_id/cups/spool
 ServerRoot $USER_FAKE_HOME/.nx/C-$sess_id/cups/
-Port $NODE_CUPSD_PORT
+StateDir $USER_FAKE_HOME/.nx/C-$sess_id/cups/
+CacheDir $USER_FAKE_HOME/.nx/C-$sess_id/cups/cache
+
+Listen $NODE_CUPSD_SOCKET
 Browsing Off
 ServerName localhost
+PidFile $USER_FAKE_HOME/.nx/C-$sess_id/pids/cupsd
 
 <Location />
 Order Deny,Allow
 Deny From All
 Allow from 127.0.0.1
 </Location>
+
+# Allow everything for anonymous, because we are protected through UNIX socket
+<Policy default>
+  <Limit All>
+    AuthType None
+    Order deny,allow
+  </Limit>
+</Policy>
 EOF
 
 	touch "$USER_FAKE_HOME/.nx/C-$sess_id/cups/printers.conf" "$USER_FAKE_HOME/.nx/C-$sess_id/cups/classes.conf"
@@ -583,20 +598,17 @@
 	cp -af "$CUPS_ETC"/mime.* "$USER_FAKE_HOME/.nx/C-$sess_id/cups/"
 
 	# start cupsd
-	$COMMAND_CUPSD -f -c "$USER_FAKE_HOME/.nx/C-$sess_id/cups/cupsd.conf" &>/dev/null </dev/null &
-	NODE_CUPSD_PID=$!
-	sleep 3
-	echo $NODE_CUPSD_PID >"$USER_FAKE_HOME/.nx/C-$sess_id/pids/cupsd"
+	$COMMAND_CUPSD -c "$USER_FAKE_HOME/.nx/C-$sess_id/cups/cupsd.conf" &>/dev/null </dev/null
 
 	# setup KDE
 	if [ "$ENABLE_KDE_CUPS" = "1" -a -e "$KDE_PRINTRC" ]
 	then
-		if egrep -q "^Port=" "$KDE_PRINTRC"
+		if egrep -q "^Host=" "$KDE_PRINTRC"
 		then
-			perl -pi -e 's/^Port=.*/Port='"$NODE_CUPSD_PORT"'/g' "$KDE_PRINTRC"
+			perl -pi -e 's/^Host=.*/Host='"$NODE_CUPSD_SOCKET"'/g' "$KDE_PRINTRC"
 		else
 			echo "[CUPS]" >> "$KDE_PRINTRC"
-			echo "Port=$NODE_CUPSD_PORT" >> "$KDE_PRINTRC"
+			echo "Host=$NODE_CUPSD_SOCKET" >> "$KDE_PRINTRC"
 		fi
 	fi
 }
@@ -614,10 +626,10 @@
 	[ -n "$NODE_CUPSD_PID" ] && kill -0 $NODE_CUPSD_PID && kill -HUP $NODE_CUPSD_PID
 }
 
-node_cupsd_get_port()
+node_cupsd_get_socket()
 {
 	node_cupsd_setup
-	echo $NODE_CUPSD_PORT
+	echo $NODE_CUPSD_SOCKET
 }
 
 node_umount_smb()
@@ -1180,25 +1192,46 @@
 	sess_id="$SERVER_NAME-$display-$sessionid"
 	
 	# this will also setup the userspace cupsd
-	IPP_PORT=$(node_cupsd_get_port)
-	export IPP_PORT
+	export CUPS_SERVER=$(node_cupsd_get_socket)
 	
 	if [ "$type" = "smb" ]
 	then
-		DEVICE_URI="smb://$username:$password at localhost:$port/$share"
+		DEVICE_URI="smb://$username:$password at 127.0.0.1:$port/$share"
 		NAME="$share"
 	else
-		DEVICE_URI="ipp://$username:$password at localhost:$port/printers/$printer"
+		DEVICE_URI="ipp://$username:$password at 127.0.0.1:$port/printers/$printer"
 		NAME="$printer"
 	fi
+	export PATH_BIN
 	
 	MODEL=$($PATH_BIN/nxclient -printer "$NAME" -noautokill -display :$display)
 	[ -z "$MODEL" -o "$MODEL" = "cancel: aborted" ] && return
 	
 	PUBLIC="-u allow:$USER"
 	[ "$public" == "1" ] && PUBLIC=""
-	lpadmin -p "$NAME" -E -v "$DEVICE_URI" -m "$MODEL" $PUBLIC
-	[ "$defaultPrinter" = "1" ] && lpadmin -d "$NAME"
+
+	if [ "$MODEL" = "download_new" -o "$MODEL" = "download_cached" ]
+	then
+		mkdir -p "$USER_FAKE_HOME/.nx/config/ppd/"
+		if [ "$MODEL" = "download_new" -o ! -r "$USER_FAKE_HOME/.nx/config/ppd/$printer.ppd" ]
+		then
+			curl --digest -o "$USER_FAKE_HOME/.nx/config/ppd/$printer.ppd" "http://$username:$password at 127.0.0.1:$port/ppd/${printer}_nxdl.ppd" &> $USER_FAKE_HOME/.nx/C-$sess_id/cups/curl.log
+		RC=$?
+		[ $RC -eq 0 ] && $PATH_BIN/nxclient --message "Download successful." -noautokill -display :$display
+		[ $RC -eq 0 ] || $PATH_BIN/nxclient --message "Download failed. Log is: $USER_FAKE_HOME/.nx/C-$sess_id/cups/curl.log" -noautokill -display :$display
+		fi
+		MODEL="$USER_FAKE_HOME/.nx/config/ppd/$printer.ppd"
+	fi
+	
+	if [ ! -r "$MODEL" ]
+	then
+		# Foomatic and co
+		/usr/sbin/lpadmin -p "$NAME" -E -v "$DEVICE_URI" -m "$MODEL" $PUBLIC
+	else
+		/usr/sbin/lpadmin -p "$NAME" -E -v "$DEVICE_URI" -P "$MODEL" $PUBLIC
+	fi
+
+	[ "$defaultPrinter" = "1" ] && /usr/sbin/lpadmin -d "$NAME"
 }
 
 nxnode_func()

Modified: freenx-server/trunk/nxprint
===================================================================
--- freenx-server/trunk/nxprint	2007-01-23 04:04:03 UTC (rev 287)
+++ freenx-server/trunk/nxprint	2007-01-24 14:46:11 UTC (rev 288)
@@ -9,8 +9,8 @@
 # SVN: $Id$
 #
 
-# disable foomatic by default
-FOOMATIC="no"
+# enable foomatic by default
+FOOMATIC="yes"
 
 HELP="no"
 DRIVERS="no"
@@ -35,7 +35,7 @@
 	echo ""
         echo "Syntax: nxprint --help"
         echo "        nxprint --drivers"
-        echo "        nxprint --printes"
+        echo "        nxprint --printers"
         echo
         echo "  --drivers                prints a list of available CUPS drivers"
         echo "  --printers               prints a list of available CUPS printers"
@@ -45,21 +45,22 @@
 if [ "$DRIVERS" = "yes" ]
 then
 	echo "driver|Raw|Raw Queue|raw"
+	echo "driver|Download (CUPS)|Download from CUPS server (cached)|download_cached"
+	echo "driver|Download (CUPS)|Download from CUPS server (redownload)|download_new"
 	{ 
-        cd /usr/share/cups/model
-        awk -F '"' '/*Manufacturer:/ { a[FILENAME]=$2 }
-                    /*NickName:/ { b[FILENAME]=$2 } 
+        cd /usr/share/ppd/
+        awk -F '"' '/\*Manufacturer:/ { a[FILENAME]=$2 }
+                    /\*NickName:/ { b[FILENAME]=$2 } 
                     END { 
                        for (i in a) 
-                          print "driver|" (a[i]=="ESP"?substr(b[i],0,index(b[i]," ")-1):a[i]) "|"b[i]"|"i
-                    }' *.ppd
-        } | sort
+                          print "driver|" (a[i]=="ESP"?substr(b[i],0,index(b[i]," ")-1):a[i]) "|"b[i]"|"i"|en"
+                    }' $(find -name "*.ppd")
 
-	if [ $FOOMATIC="yes" ]
+	if [ "$FOOMATIC" = "yes" ]
 	then
-		# TODO: Add support for foomatic-style ppds
-		:
+		foomatic-ppdfile list | awk -F'"' '{ A=""; if ($4 == "HP") { B=substr($6,index($6," ")+1); A=" "substr(B,0,index(B," ")); } printf("driver|%s%s|%s|%s|%s\n",$4,A,$6,$2,substr($3,2)) } '
 	fi
+	} | sort
 fi
 
 if [ "$PRINTERS" = "yes" ]

Modified: freenx-server/trunk/nxserver
===================================================================
--- freenx-server/trunk/nxserver	2007-01-23 04:04:03 UTC (rev 287)
+++ freenx-server/trunk/nxserver	2007-01-24 14:46:11 UTC (rev 288)
@@ -1340,6 +1340,7 @@
 			PARAMS=$SERVER_PARAMS
 			# TODO: This redirecion is crap here.
 			server_nxnode_start --addprinter "$USER" "$PARAMS" >/dev/null 2>&1 | log_error >/dev/null
+			echo_x "NX> 719 CUPS printer: running"
 		;;
 		*)
 			# disabled for 1.4.0-5 snapshot client



From fabianx at mail.berlios.de  Wed Jan 24 16:51:37 2007
From: fabianx at mail.berlios.de (fabianx at BerliOS)
Date: Wed, 24 Jan 2007 16:51:37 +0100
Subject: [Freenx-cvs] r289 - freenx-server/trunk
Message-ID: <200701241551.l0OFpb8K032545@sheep.berlios.de>

Author: fabianx
Date: 2007-01-24 16:51:37 +0100 (Wed, 24 Jan 2007)
New Revision: 289

Modified:
   freenx-server/trunk/ChangeLog
   freenx-server/trunk/node.conf.sample
   freenx-server/trunk/nxclient
   freenx-server/trunk/nxloadconfig
   freenx-server/trunk/nxnode
   freenx-server/trunk/nxprint
Log:
       * Added configuration vars to tweak the new behaviour.



Modified: freenx-server/trunk/ChangeLog
===================================================================
--- freenx-server/trunk/ChangeLog	2007-01-24 14:46:11 UTC (rev 288)
+++ freenx-server/trunk/ChangeLog	2007-01-24 15:51:37 UTC (rev 289)
@@ -8,6 +8,7 @@
 	          /usr/lib/cups/driver/
 	* Added setting of CUPS_SERVER environment var.
 	* Added automatic downloading of PPDs, if the client supports it.
+	* Added configuration vars to tweak the new behaviour.
 
 23.01.2007 FreeNX 0.6.0 "Juliana birthday edition"
 	* Opened the 0.6.0 branch.

Modified: freenx-server/trunk/node.conf.sample
===================================================================
--- freenx-server/trunk/node.conf.sample	2007-01-24 14:46:11 UTC (rev 288)
+++ freenx-server/trunk/node.conf.sample	2007-01-24 15:51:37 UTC (rev 289)
@@ -252,6 +252,23 @@
 
 #ENABLE_KDE_CUPS="0"
 #KDE_PRINTRC="$KDEHOME/share/config/kdeprintrc"
+
+# FreeNX with ENABLE_CUPS_SERVER_EXPORT="1" will automatically
+# export the environment variable CUPS_SERVER.
+
+#ENABLE_CUPS_SERVER_EXPORT="1"
+
+# FreeNX with ENABLE_FOOMATIC will integrate the foomatic db to the list
+# of available ppd drivers via the $COMMAND_FOOMATIC command.
+
+#ENABLE_FOOMATIC="1"
+#COMMAND_FOOMATIC="/usr/lib/cups/driver/foomatic-ppdfile"
+
+
+# CUPS_BACKEND and CUPS_ETC are the corresponding paths of your CUPS 
+# installation.
+
+#CUPS_BACKEND="/usr/lib/cups/backend"
 #CUPS_ETC="/etc/cups"
 
 #########################################################################

Modified: freenx-server/trunk/nxclient
===================================================================
--- freenx-server/trunk/nxclient	2007-01-24 14:46:11 UTC (rev 288)
+++ freenx-server/trunk/nxclient	2007-01-24 15:51:37 UTC (rev 289)
@@ -98,6 +98,8 @@
 	[ -n "$USER_FAKE_HOME" ] && UTILITY_DRIVERS_CACHE="$USER_FAKE_HOME/.nx/config/drivers.cache"
 	UTILITY_NXPRINT="nxprint"
 	[ -n "$PATH_BIN" ] && UTILITY_NXPRINT="$PATH_BIN/nxprint"
+	# Export configuration vars for nxprint
+	export ENABLE_FOOMATIC COMMAND_FOOMATIC
 	case "$1" in 
 		get)
 			grep "driver|$2|" "$UTILITY_DRIVERS_CACHE" 2>/dev/null

Modified: freenx-server/trunk/nxloadconfig
===================================================================
--- freenx-server/trunk/nxloadconfig	2007-01-24 14:46:11 UTC (rev 288)
+++ freenx-server/trunk/nxloadconfig	2007-01-24 15:51:37 UTC (rev 289)
@@ -52,7 +52,7 @@
 # DO NOT TOUCH unless you REALLY know what you are doing
 #########################################################################
 
-NX_VERSION=1.5.0-61
+NX_VERSION=1.5.0-61-SVN
 NX_LICENSE="OS (GPL)"
 
 # Where can different nx components be found
@@ -144,6 +144,12 @@
 
 ENABLE_KDE_CUPS="0"
 KDE_PRINTRC="" # Calculated
+
+ENABLE_CUPS_SERVER_EXPORT="1"
+ENABLE_FOOMATIC="1"
+COMMAND_FOOMATIC="/usr/lib/cups/driver/foomatic-ppdfile"
+
+CUPS_BACKEND="/usr/lib/cups/backend"
 CUPS_ETC="/etc/cups/"
 
 # Path directives
@@ -436,6 +442,17 @@
 		ERROR="yes" && echo "Error: Invalid value \"ENABLE_KDE_CUPS=$ENABLE_KDE_CUPS\""
 	[ "$ENABLE_KDE_CUPS" = "1" -a ! -e "$KDE_PRINTRC" ] && \
 		ERROR="yes" && echo "Error: Invalid value \"KDE_PRINTRC=$KDE_PRINTRC\""
+
+
+	[ "$ENABLE_FOOMATIC" = "1" ] && ! which "$COMMAND_FOOMATIC" >/dev/null 2>&1 && \
+		WARNING="yes" && echo "Warning: Invalid value \"COMMAND_FOOMATIC=$COMMAND_FOOMATIC\"" \
+					  && echo "         Users will not be able to use foomatic."
+	[ ! -x "$CUPS_BACKEND/ipp" ] && \
+		WARNING="yes" && echo "Warning: \"CUPS_BACKEND/ipp\" is not executable." \
+					  && echo "         Users will not be able to enable printing."
+	[ ! -x "$CUPS_BACKEND/smb" ] && \
+		WARNING="yes" && echo "Warning: \"CUPS_BACKEND/smb\" is not executable." \
+					  && echo "         Users will not be able to enable printing."
 	[ ! -e "$CUPS_ETC/mime.types" -o ! -e "$CUPS_ETC/mime.convs" ] && \
 		WARNING="yes" && echo "Warning: Invalid value \"CUPS_ETC=$CUPS_ETC\"" \
 					  && echo "         Users will not be able to enable printing."
@@ -483,6 +500,9 @@
 	! which "$COMMAND_CUPSD" >/dev/null 2>&1 && \
 		WARNING="yes" && echo "Warning: Invalid value \"COMMAND_CUPSD=$COMMAND_CUPSD\"" \
 					  && echo "         Users will not be able to enable printing."
+	[ -z "$(strings $COMMAND_CUPSD | egrep 'CUPS\/1.2')" ] && \
+		WARNING="yes" && echo "Warning: Invalid cupsd version of \"$COMMAND_CUPSD\". Need version 1.2." \
+					  && echo "         Users will not be able to enable printing."
 	! which "$COMMAND_MD5SUM" >/dev/null 2>&1 && \
 		ERROR="yes" && echo "Error: Invalid value \"COMMAND_MD5SUM=$COMMAND_MD5SUM\""
 

Modified: freenx-server/trunk/nxnode
===================================================================
--- freenx-server/trunk/nxnode	2007-01-24 14:46:11 UTC (rev 288)
+++ freenx-server/trunk/nxnode	2007-01-24 15:51:37 UTC (rev 289)
@@ -283,7 +283,7 @@
 		fi
 	fi
 
-	[ "$cups" = "1" ] && export CUPS_SERVER=$USER_FAKE_HOME/.nx/C-$sess_id/cups/cups.sock
+	[ "$cups" = "1" -a "$ENABLE_CUPS_SERVER_EXPORT" = "1" ] && export CUPS_SERVER="$USER_FAKE_HOME/.nx/C-$sess_id/cups/cups.sock"
 
 	#
 	# Do we need to PRELOAD any libraries?

Modified: freenx-server/trunk/nxprint
===================================================================
--- freenx-server/trunk/nxprint	2007-01-24 14:46:11 UTC (rev 288)
+++ freenx-server/trunk/nxprint	2007-01-24 15:51:37 UTC (rev 289)
@@ -9,9 +9,6 @@
 # SVN: $Id$
 #
 
-# enable foomatic by default
-FOOMATIC="yes"
-
 HELP="no"
 DRIVERS="no"
 PRINTERS="no"
@@ -56,9 +53,10 @@
                           print "driver|" (a[i]=="ESP"?substr(b[i],0,index(b[i]," ")-1):a[i]) "|"b[i]"|"i"|en"
                     }' $(find -name "*.ppd")
 
-	if [ "$FOOMATIC" = "yes" ]
+	if [ "$ENABLE_FOOMATIC" = "1" ]
 	then
-		foomatic-ppdfile list | awk -F'"' '{ A=""; if ($4 == "HP") { B=substr($6,index($6," ")+1); A=" "substr(B,0,index(B," ")); } printf("driver|%s%s|%s|%s|%s\n",$4,A,$6,$2,substr($3,2)) } '
+		[ -z "$COMMAND_FOOMATIC" ] && COMMAND_FOOMATIC="foomatic-ppdfile" 
+		$COMMAND_FOOMATIC list | awk -F'"' '{ A=""; if ($4 == "HP") { B=substr($6,index($6," ")+1); A=" "substr(B,0,index(B," ")); } printf("driver|%s%s|%s|%s|%s\n",$4,A,$6,$2,substr($3,2)) } '
 	fi
 	} | sort
 fi



From fabianx at mail.berlios.de  Wed Jan 24 17:22:04 2007
From: fabianx at mail.berlios.de (fabianx at BerliOS)
Date: Wed, 24 Jan 2007 17:22:04 +0100
Subject: [Freenx-cvs] r290 - freenx-server/trunk
Message-ID: <200701241622.l0OGM4UV002441@sheep.berlios.de>

Author: fabianx
Date: 2007-01-24 17:22:04 +0100 (Wed, 24 Jan 2007)
New Revision: 290

Modified:
   freenx-server/trunk/ChangeLog
   freenx-server/trunk/node.conf.sample
   freenx-server/trunk/nxloadconfig
   freenx-server/trunk/nxnode
Log:
* Added cups seamless support with no "use this driver?" dialogs at all.

Note: You need nxcupsd-wrapper on the client side.
      Get it from nxutils repository.



Modified: freenx-server/trunk/ChangeLog
===================================================================
--- freenx-server/trunk/ChangeLog	2007-01-24 15:51:37 UTC (rev 289)
+++ freenx-server/trunk/ChangeLog	2007-01-24 16:22:04 UTC (rev 290)
@@ -9,6 +9,9 @@
 	* Added setting of CUPS_SERVER environment var.
 	* Added automatic downloading of PPDs, if the client supports it.
 	* Added configuration vars to tweak the new behaviour.
+	* Added cups seamless support with no "use this driver?" dialogs at all.
+	  * Note: You need nxcupsd-wrapper on the client side.
+	          Get it from nxutils repository.
 
 23.01.2007 FreeNX 0.6.0 "Juliana birthday edition"
 	* Opened the 0.6.0 branch.

Modified: freenx-server/trunk/node.conf.sample
===================================================================
--- freenx-server/trunk/node.conf.sample	2007-01-24 15:51:37 UTC (rev 289)
+++ freenx-server/trunk/node.conf.sample	2007-01-24 16:22:04 UTC (rev 290)
@@ -258,13 +258,23 @@
 
 #ENABLE_CUPS_SERVER_EXPORT="1"
 
+# FreeNX with ENABLE_CUPS_SEAMLESS will automatically try to download the 
+# necessary ppds from the client.
+# 
+# As the forwarding is just active as soon as nxagent is started,
+# we need a small delay of $CUPS_SEAMLESS_DELAY.
+#
+# Note: You need to use a patched cupsd on client side.
+
+#ENABLE_CUPS_SEAMLESS="0"
+#CUPS_SEAMLESS_DELAY="10"
+
 # FreeNX with ENABLE_FOOMATIC will integrate the foomatic db to the list
 # of available ppd drivers via the $COMMAND_FOOMATIC command.
 
 #ENABLE_FOOMATIC="1"
 #COMMAND_FOOMATIC="/usr/lib/cups/driver/foomatic-ppdfile"
 
-
 # CUPS_BACKEND and CUPS_ETC are the corresponding paths of your CUPS 
 # installation.
 

Modified: freenx-server/trunk/nxloadconfig
===================================================================
--- freenx-server/trunk/nxloadconfig	2007-01-24 15:51:37 UTC (rev 289)
+++ freenx-server/trunk/nxloadconfig	2007-01-24 16:22:04 UTC (rev 290)
@@ -146,6 +146,8 @@
 KDE_PRINTRC="" # Calculated
 
 ENABLE_CUPS_SERVER_EXPORT="1"
+ENABLE_CUPS_SEAMLESS="0"
+CUPS_SEAMLESS_DELAY="10"
 ENABLE_FOOMATIC="1"
 COMMAND_FOOMATIC="/usr/lib/cups/driver/foomatic-ppdfile"
 

Modified: freenx-server/trunk/nxnode
===================================================================
--- freenx-server/trunk/nxnode	2007-01-24 15:51:37 UTC (rev 289)
+++ freenx-server/trunk/nxnode	2007-01-24 16:22:04 UTC (rev 290)
@@ -1203,10 +1203,16 @@
 		NAME="$printer"
 	fi
 	export PATH_BIN
+
+	if [ "$ENABLE_CUPS_SEAMLESS" != "1" ]
+	then
+		MODEL=$($PATH_BIN/nxclient -printer "$NAME" -noautokill -display :$display)
+		[ -z "$MODEL" -o "$MODEL" = "cancel: aborted" ] && return
+	else
+		sleep $CUPS_SEAMLESS_DELAY
+		MODEL="download_cached"
+	fi
 	
-	MODEL=$($PATH_BIN/nxclient -printer "$NAME" -noautokill -display :$display)
-	[ -z "$MODEL" -o "$MODEL" = "cancel: aborted" ] && return
-	
 	PUBLIC="-u allow:$USER"
 	[ "$public" == "1" ] && PUBLIC=""
 
@@ -1215,10 +1221,10 @@
 		mkdir -p "$USER_FAKE_HOME/.nx/config/ppd/"
 		if [ "$MODEL" = "download_new" -o ! -r "$USER_FAKE_HOME/.nx/config/ppd/$printer.ppd" ]
 		then
-			curl --digest -o "$USER_FAKE_HOME/.nx/config/ppd/$printer.ppd" "http://$username:$password at 127.0.0.1:$port/ppd/${printer}_nxdl.ppd" &> $USER_FAKE_HOME/.nx/C-$sess_id/cups/curl.log
+			curl --digest -o "$USER_FAKE_HOME/.nx/config/ppd/$printer.ppd" "http://$username:$password at 127.0.0.1:$port/ppd/${printer}_nxdl.ppd" >>$USER_FAKE_HOME/.nx/C-$sess_id/cups/curl.log 2>&1
 		RC=$?
-		[ $RC -eq 0 ] && $PATH_BIN/nxclient --message "Download successful." -noautokill -display :$display
-		[ $RC -eq 0 ] || $PATH_BIN/nxclient --message "Download failed. Log is: $USER_FAKE_HOME/.nx/C-$sess_id/cups/curl.log" -noautokill -display :$display
+		[ $RC -eq 0 -a "$ENABLE_CUPS_SEAMLESS" != "1" ] && $PATH_BIN/nxclient --message "Download successful." -noautokill -display :$display
+		[ $RC -ne 0 -a "$ENABLE_CUPS_SEAMLESS" != "1" ] && $PATH_BIN/nxclient --message "Download failed. Log is: $USER_FAKE_HOME/.nx/C-$sess_id/cups/curl.log" -noautokill -display :$display
 		fi
 		MODEL="$USER_FAKE_HOME/.nx/config/ppd/$printer.ppd"
 	fi



From fabianx at mail.berlios.de  Wed Jan 24 17:24:47 2007
From: fabianx at mail.berlios.de (fabianx at BerliOS)
Date: Wed, 24 Jan 2007 17:24:47 +0100
Subject: [Freenx-cvs] r291 - in nx-utils: . nxcups-wrapper
Message-ID: <200701241624.l0OGOliJ002757@sheep.berlios.de>

Author: fabianx
Date: 2007-01-24 17:24:47 +0100 (Wed, 24 Jan 2007)
New Revision: 291

Added:
   nx-utils/nxcups-wrapper/
   nx-utils/nxcups-wrapper/nxcups-wrapper
Log:
Added the nxcups-wrapper.



Added: nx-utils/nxcups-wrapper/nxcups-wrapper
===================================================================
--- nx-utils/nxcups-wrapper/nxcups-wrapper	2007-01-24 16:22:04 UTC (rev 290)
+++ nx-utils/nxcups-wrapper/nxcups-wrapper	2007-01-24 16:24:47 UTC (rev 291)
@@ -0,0 +1,13 @@
+#!/bin/sh
+
+echo "PidFile /home/info/ff/.nx/cups/cupsd.pid" >> $NX_HOME/.nx/cups/cupsd.conf
+echo "StateDir /home/info/ff/.nx/cups/" >> $NX_HOME/.nx/cups/cupsd.conf
+
+mkdir -p $NX_HOME/.nx/cups/ppd/
+
+for i in $(lpstat -s | cut -d" " -f4)
+do
+	LD_LIBRARY_PATH="" wget -q ${i/ipp/http}.ppd -O $NX_HOME/.nx/cups/ppd/$(basename $i)_nxdl.ppd
+done
+
+exec /usr/sbin/cupsd "$@"


Property changes on: nx-utils/nxcups-wrapper/nxcups-wrapper
___________________________________________________________________
Name: svn:executable
   + *



From fabianx at mail.berlios.de  Wed Jan 24 17:34:36 2007
From: fabianx at mail.berlios.de (fabianx at BerliOS)
Date: Wed, 24 Jan 2007 17:34:36 +0100
Subject: [Freenx-cvs] r292 - nx-utils/nxcups-wrapper
Message-ID: <200701241634.l0OGYaD9003497@sheep.berlios.de>

Author: fabianx
Date: 2007-01-24 17:34:36 +0100 (Wed, 24 Jan 2007)
New Revision: 292

Modified:
   nx-utils/nxcups-wrapper/nxcups-wrapper
Log:
Some improvements like killing a still running userspace cupsd.



Modified: nx-utils/nxcups-wrapper/nxcups-wrapper
===================================================================
--- nx-utils/nxcups-wrapper/nxcups-wrapper	2007-01-24 16:24:47 UTC (rev 291)
+++ nx-utils/nxcups-wrapper/nxcups-wrapper	2007-01-24 16:34:36 UTC (rev 292)
@@ -1,8 +1,13 @@
 #!/bin/sh
 
-echo "PidFile /home/info/ff/.nx/cups/cupsd.pid" >> $NX_HOME/.nx/cups/cupsd.conf
-echo "StateDir /home/info/ff/.nx/cups/" >> $NX_HOME/.nx/cups/cupsd.conf
 
+[ -f "$NX_HOME/.nx/cups/cupsd.pid" ] && CPID=$(cat "$NX_HOME/.nx/cups/cupsd.pid")
+
+[ -n "$PID" ] && kill -0 $PID && kill $PID && sleep 2 &&  kill -9 $PID 2>/dev/null
+
+echo "PidFile $NX_HOME/.nx/cups/cupsd.pid" >> $NX_HOME/.nx/cups/cupsd.conf
+echo "StateDir $NX_HOME/.nx/cups/" >> $NX_HOME/.nx/cups/cupsd.conf
+
 mkdir -p $NX_HOME/.nx/cups/ppd/
 
 for i in $(lpstat -s | cut -d" " -f4)
@@ -10,4 +15,5 @@
 	LD_LIBRARY_PATH="" wget -q ${i/ipp/http}.ppd -O $NX_HOME/.nx/cups/ppd/$(basename $i)_nxdl.ppd
 done
 
-exec /usr/sbin/cupsd "$@"
+/usr/sbin/cupsd "$@"
+rm -f "$NX_HOME/.nx/cups/cupsd.pid"



From fabianx at mail.berlios.de  Wed Jan 24 17:35:03 2007
From: fabianx at mail.berlios.de (fabianx at BerliOS)
Date: Wed, 24 Jan 2007 17:35:03 +0100
Subject: [Freenx-cvs] r293 - nx-utils/nxcups-wrapper
Message-ID: <200701241635.l0OGZ3Ps003561@sheep.berlios.de>

Author: fabianx
Date: 2007-01-24 17:35:03 +0100 (Wed, 24 Jan 2007)
New Revision: 293

Added:
   nx-utils/nxcups-wrapper/nxcupsd-wrapper
Removed:
   nx-utils/nxcups-wrapper/nxcups-wrapper
Log:
Small rename.



Deleted: nx-utils/nxcups-wrapper/nxcups-wrapper
===================================================================
--- nx-utils/nxcups-wrapper/nxcups-wrapper	2007-01-24 16:34:36 UTC (rev 292)
+++ nx-utils/nxcups-wrapper/nxcups-wrapper	2007-01-24 16:35:03 UTC (rev 293)
@@ -1,19 +0,0 @@
-#!/bin/sh
-
-
-[ -f "$NX_HOME/.nx/cups/cupsd.pid" ] && CPID=$(cat "$NX_HOME/.nx/cups/cupsd.pid")
-
-[ -n "$PID" ] && kill -0 $PID && kill $PID && sleep 2 &&  kill -9 $PID 2>/dev/null
-
-echo "PidFile $NX_HOME/.nx/cups/cupsd.pid" >> $NX_HOME/.nx/cups/cupsd.conf
-echo "StateDir $NX_HOME/.nx/cups/" >> $NX_HOME/.nx/cups/cupsd.conf
-
-mkdir -p $NX_HOME/.nx/cups/ppd/
-
-for i in $(lpstat -s | cut -d" " -f4)
-do
-	LD_LIBRARY_PATH="" wget -q ${i/ipp/http}.ppd -O $NX_HOME/.nx/cups/ppd/$(basename $i)_nxdl.ppd
-done
-
-/usr/sbin/cupsd "$@"
-rm -f "$NX_HOME/.nx/cups/cupsd.pid"

Copied: nx-utils/nxcups-wrapper/nxcupsd-wrapper (from rev 292, nx-utils/nxcups-wrapper/nxcups-wrapper)



From fabianx at mail.berlios.de  Wed Jan 24 17:36:17 2007
From: fabianx at mail.berlios.de (fabianx at BerliOS)
Date: Wed, 24 Jan 2007 17:36:17 +0100
Subject: [Freenx-cvs] r294 - in nx-utils: . nxcupsd-wrapper
Message-ID: <200701241636.l0OGaH91003749@sheep.berlios.de>

Author: fabianx
Date: 2007-01-24 17:36:17 +0100 (Wed, 24 Jan 2007)
New Revision: 294

Added:
   nx-utils/nxcupsd-wrapper/
   nx-utils/nxcupsd-wrapper/nxcupsd-wrapper
Removed:
   nx-utils/nxcups-wrapper/
   nx-utils/nxcupsd-wrapper/nxcups-wrapper
Log:
And another rename.



Copied: nx-utils/nxcupsd-wrapper (from rev 291, nx-utils/nxcups-wrapper)

Deleted: nx-utils/nxcupsd-wrapper/nxcups-wrapper
===================================================================
--- nx-utils/nxcups-wrapper/nxcups-wrapper	2007-01-24 16:24:47 UTC (rev 291)
+++ nx-utils/nxcupsd-wrapper/nxcups-wrapper	2007-01-24 16:36:17 UTC (rev 294)
@@ -1,13 +0,0 @@
-#!/bin/sh
-
-echo "PidFile /home/info/ff/.nx/cups/cupsd.pid" >> $NX_HOME/.nx/cups/cupsd.conf
-echo "StateDir /home/info/ff/.nx/cups/" >> $NX_HOME/.nx/cups/cupsd.conf
-
-mkdir -p $NX_HOME/.nx/cups/ppd/
-
-for i in $(lpstat -s | cut -d" " -f4)
-do
-	LD_LIBRARY_PATH="" wget -q ${i/ipp/http}.ppd -O $NX_HOME/.nx/cups/ppd/$(basename $i)_nxdl.ppd
-done
-
-exec /usr/sbin/cupsd "$@"

Copied: nx-utils/nxcupsd-wrapper/nxcupsd-wrapper (from rev 293, nx-utils/nxcups-wrapper/nxcupsd-wrapper)



From fabianx at mail.berlios.de  Wed Jan 24 18:05:55 2007
From: fabianx at mail.berlios.de (fabianx at BerliOS)
Date: Wed, 24 Jan 2007 18:05:55 +0100
Subject: [Freenx-cvs] r295 - nx-utils/nxcupsd-wrapper
Message-ID: <200701241705.l0OH5t4c005340@sheep.berlios.de>

Author: fabianx
Date: 2007-01-24 18:05:55 +0100 (Wed, 24 Jan 2007)
New Revision: 295

Modified:
   nx-utils/nxcupsd-wrapper/nxcupsd-wrapper
Log:
More improvements.



Modified: nx-utils/nxcupsd-wrapper/nxcupsd-wrapper
===================================================================
--- nx-utils/nxcupsd-wrapper/nxcupsd-wrapper	2007-01-24 16:36:17 UTC (rev 294)
+++ nx-utils/nxcupsd-wrapper/nxcupsd-wrapper	2007-01-24 17:05:55 UTC (rev 295)
@@ -1,19 +1,17 @@
 #!/bin/sh
 
+[ -f "$NX_ROOT/cups/cupsd.pid" ] && CPID=$(cat "$NX_ROOT/cups/cupsd.pid")
 
-[ -f "$NX_HOME/.nx/cups/cupsd.pid" ] && CPID=$(cat "$NX_HOME/.nx/cups/cupsd.pid")
+[ -n "$CPID" ] && kill -0 $CPID && kill $CPID
 
-[ -n "$PID" ] && kill -0 $PID && kill $PID && sleep 2 &&  kill -9 $PID 2>/dev/null
+echo "PidFile $NX_ROOT/cups/cupsd.pid" >> $NX_ROOT/cups/cupsd.conf
+echo "StateDir $NX_ROOT/cups/" >> $NX_ROOT/cups/cupsd.conf
 
-echo "PidFile $NX_HOME/.nx/cups/cupsd.pid" >> $NX_HOME/.nx/cups/cupsd.conf
-echo "StateDir $NX_HOME/.nx/cups/" >> $NX_HOME/.nx/cups/cupsd.conf
+mkdir -p $NX_HOME/cups/ppd/
 
-mkdir -p $NX_HOME/.nx/cups/ppd/
-
 for i in $(lpstat -s | cut -d" " -f4)
 do
-	LD_LIBRARY_PATH="" wget -q ${i/ipp/http}.ppd -O $NX_HOME/.nx/cups/ppd/$(basename $i)_nxdl.ppd
+	LD_LIBRARY_PATH="" wget -q ${i/ipp/http}.ppd -O $NX_ROOT/cups/ppd/$(basename $i)_nxdl.ppd
 done
 
-/usr/sbin/cupsd "$@"
-rm -f "$NX_HOME/.nx/cups/cupsd.pid"
+exec /usr/sbin/cupsd "$@" 



From fabianx at mail.berlios.de  Wed Jan 24 18:10:23 2007
From: fabianx at mail.berlios.de (fabianx at BerliOS)
Date: Wed, 24 Jan 2007 18:10:23 +0100
Subject: [Freenx-cvs] r296 - nx-utils/nxcupsd-wrapper
Message-ID: <200701241710.l0OHANsU005654@sheep.berlios.de>

Author: fabianx
Date: 2007-01-24 18:10:23 +0100 (Wed, 24 Jan 2007)
New Revision: 296

Added:
   nx-utils/nxcupsd-wrapper/README.txt
Log:
Added a small README to package.



Added: nx-utils/nxcupsd-wrapper/README.txt
===================================================================
--- nx-utils/nxcupsd-wrapper/README.txt	2007-01-24 17:05:55 UTC (rev 295)
+++ nx-utils/nxcupsd-wrapper/README.txt	2007-01-24 17:10:23 UTC (rev 296)
@@ -0,0 +1,7 @@
+To use this install nxcupsd-wrapper somewhere and point the linux nxclient NX 2.1.0 to it.
+
+The wrapper enables usage with client CUPS v1.2 and also enables the seamless and download mode
+of the printer support of FreeNX 0.6.1-devel.
+
+Note: You can only run one session with local cupsds enabled at a time.
+      This is a limitation of the commercial nxclient.



From fabianx at mail.berlios.de  Wed Jan 24 19:38:38 2007
From: fabianx at mail.berlios.de (fabianx at BerliOS)
Date: Wed, 24 Jan 2007 19:38:38 +0100
Subject: [Freenx-cvs] r297 - freenx-server/trunk
Message-ID: <200701241838.l0OIcc6R020513@sheep.berlios.de>

Author: fabianx
Date: 2007-01-24 19:38:38 +0100 (Wed, 24 Jan 2007)
New Revision: 297

Modified:
   freenx-server/trunk/ChangeLog
   freenx-server/trunk/nxnode
   freenx-server/trunk/nxserver
Log:
Fixed support for "Running" sessions - again.



Modified: freenx-server/trunk/ChangeLog
===================================================================
--- freenx-server/trunk/ChangeLog	2007-01-24 17:10:23 UTC (rev 296)
+++ freenx-server/trunk/ChangeLog	2007-01-24 18:38:38 UTC (rev 297)
@@ -12,6 +12,7 @@
 	* Added cups seamless support with no "use this driver?" dialogs at all.
 	  * Note: You need nxcupsd-wrapper on the client side.
 	          Get it from nxutils repository.
+	* Fixed Support for "Running" sessions - again.
 
 23.01.2007 FreeNX 0.6.0 "Juliana birthday edition"
 	* Opened the 0.6.0 branch.

Modified: freenx-server/trunk/nxnode
===================================================================
--- freenx-server/trunk/nxnode	2007-01-24 17:10:23 UTC (rev 296)
+++ freenx-server/trunk/nxnode	2007-01-24 18:38:38 UTC (rev 297)
@@ -1198,6 +1198,7 @@
 	then
 		DEVICE_URI="smb://$username:$password at 127.0.0.1:$port/$share"
 		NAME="$share"
+		ENABLE_CUPS_SEAMLESS="0"
 	else
 		DEVICE_URI="ipp://$username:$password at 127.0.0.1:$port/printers/$printer"
 		NAME="$printer"

Modified: freenx-server/trunk/nxserver
===================================================================
--- freenx-server/trunk/nxserver	2007-01-24 17:10:23 UTC (rev 296)
+++ freenx-server/trunk/nxserver	2007-01-24 18:38:38 UTC (rev 297)
@@ -798,6 +798,7 @@
 
 server_nxnode_echo()
 {
+	log 6 "server_nxnode_echo: $@"
 	[ "$SERVER_CHANNEL" = "1" ] && echo "$@"
 	[ "$SERVER_CHANNEL" = "2" ] && echo "$@" >&2
 }
@@ -839,18 +840,30 @@
 					*running*)
 						[ "$KILL_WAIT_PID" = "1" ] && kill $SERVER_WAIT_PID
 						KILL_WAIT_PID=0
+						log 6 session_status $uniqueid "Running"
 						session_status $uniqueid "Running"
 						[ "$SERVER_CHANNEL" = "1" ] && SERVER_CHANNEL=2
 					;;
 					*closed*)
+						log 6 session_close $uniqueid
 						session_close $uniqueid
 					;;
 					*suspended*)
 						[ "$KILL_WAIT_PID" = "1" ] && kill $SERVER_WAIT_PID
 						KILL_WAIT_PID=0
+						log 6 session_suspend $uniqueid
 						session_suspend $uniqueid
 					;;
+					*suspending*)
+						log 6 session_status $uniqueid "Suspending"
+						session_status $uniqueid "Suspending"
+						# we need to stop sending to client as it will have already
+						# closed his side of the channel and this will lead to not 
+						# closed sessions.
+						SERVER_CHANNEL=0
+					;;
 					*terminating*)
+						log 6 session_status $uniqueid "Terminating"
 						session_status $uniqueid "Terminating"
 						# we need to stop sending to client as it will have already
 						# closed his side of the channel and this will lead to not 



From fabianx at mail.berlios.de  Wed Jan 24 19:41:16 2007
From: fabianx at mail.berlios.de (fabianx at BerliOS)
Date: Wed, 24 Jan 2007 19:41:16 +0100
Subject: [Freenx-cvs] r298 - freenx-server/trunk
Message-ID: <200701241841.l0OIfGac020730@sheep.berlios.de>

Author: fabianx
Date: 2007-01-24 19:41:15 +0100 (Wed, 24 Jan 2007)
New Revision: 298

Modified:
   freenx-server/trunk/nxnode
Log:
Do not set cups seamless mode if smb should be used.



Modified: freenx-server/trunk/nxnode
===================================================================
--- freenx-server/trunk/nxnode	2007-01-24 18:38:38 UTC (rev 297)
+++ freenx-server/trunk/nxnode	2007-01-24 18:41:15 UTC (rev 298)
@@ -1198,6 +1198,7 @@
 	then
 		DEVICE_URI="smb://$username:$password at 127.0.0.1:$port/$share"
 		NAME="$share"
+		# SEAMLESS mode is not available with smb
 		ENABLE_CUPS_SEAMLESS="0"
 	else
 		DEVICE_URI="ipp://$username:$password at 127.0.0.1:$port/printers/$printer"



From fabianx at mail.berlios.de  Wed Jan 24 20:14:40 2007
From: fabianx at mail.berlios.de (fabianx at BerliOS)
Date: Wed, 24 Jan 2007 20:14:40 +0100
Subject: [Freenx-cvs] r299 - freenx-server/trunk
Message-ID: <200701241914.l0OJEeBh023423@sheep.berlios.de>

Author: fabianx
Date: 2007-01-24 20:14:37 +0100 (Wed, 24 Jan 2007)
New Revision: 299

Modified:
   freenx-server/trunk/ChangeLog
   freenx-server/trunk/nxnode
Log:
* Made the NXAgent exited with exit code 1 message more verbose.



Modified: freenx-server/trunk/ChangeLog
===================================================================
--- freenx-server/trunk/ChangeLog	2007-01-24 18:41:15 UTC (rev 298)
+++ freenx-server/trunk/ChangeLog	2007-01-24 19:14:37 UTC (rev 299)
@@ -13,6 +13,7 @@
 	  * Note: You need nxcupsd-wrapper on the client side.
 	          Get it from nxutils repository.
 	* Fixed Support for "Running" sessions - again.
+	* Made the NXAgent exited with exit code 1 message more verbose.
 
 23.01.2007 FreeNX 0.6.0 "Juliana birthday edition"
 	* Opened the 0.6.0 branch.

Modified: freenx-server/trunk/nxnode
===================================================================
--- freenx-server/trunk/nxnode	2007-01-24 18:41:15 UTC (rev 298)
+++ freenx-server/trunk/nxnode	2007-01-24 19:14:37 UTC (rev 299)
@@ -497,7 +497,8 @@
 	NODE_FAILED=""
 	if [ $NODE_AGENT_EXIT_STATUS -ne 0 ]
 	then
-		echo "NX> 1004 Error: NX Agent exited with exit status 1."
+		echo "NX> 1004 Error: NX Agent exited with exit status 1. To troubleshoot set SESSION_LOG_CLEAN=0 in node.conf and investigate \"$USER_FAKE_HOME/.nx/F-C-$sess_id/session\". You might also want to try: ssh -X myserver; $PATH_BIN/nxnode --agent to test the basic functionality. Session log follows:"
+		cat "$USER_FAKE_HOME/.nx/C-$sess_id/session" 1>&2
 		NODE_FAILED="failed"
 	fi
 	echo "NX> 1006 Session status: closed"
@@ -1198,7 +1199,6 @@
 	then
 		DEVICE_URI="smb://$username:$password at 127.0.0.1:$port/$share"
 		NAME="$share"
-		# SEAMLESS mode is not available with smb
 		ENABLE_CUPS_SEAMLESS="0"
 	else
 		DEVICE_URI="ipp://$username:$password at 127.0.0.1:$port/printers/$printer"



From fabianx at mail.berlios.de  Wed Jan 24 23:31:10 2007
From: fabianx at mail.berlios.de (fabianx at BerliOS)
Date: Wed, 24 Jan 2007 23:31:10 +0100
Subject: [Freenx-cvs] r301 - nx-utils/nxcupsd-wrapper
Message-ID: <200701242231.l0OMVANW004101@sheep.berlios.de>

Author: fabianx
Date: 2007-01-24 23:31:10 +0100 (Wed, 24 Jan 2007)
New Revision: 301

Modified:
   nx-utils/nxcupsd-wrapper/nxcupsd-wrapper
Log:
Added support for CUPS 1.1 and local protos like pdf. Also added timeout to wget.



Modified: nx-utils/nxcupsd-wrapper/nxcupsd-wrapper
===================================================================
--- nx-utils/nxcupsd-wrapper/nxcupsd-wrapper	2007-01-24 19:29:36 UTC (rev 300)
+++ nx-utils/nxcupsd-wrapper/nxcupsd-wrapper	2007-01-24 22:31:10 UTC (rev 301)
@@ -1,17 +1,49 @@
 #!/bin/sh
 
+CUPS_1_1=""
+strings /usr/sbin/cupsd | grep -q "CUPS/1.1" && CUPS_1_1="1"
+
 [ -f "$NX_ROOT/cups/cupsd.pid" ] && CPID=$(cat "$NX_ROOT/cups/cupsd.pid")
 
 [ -n "$CPID" ] && kill -0 $CPID && kill $CPID
 
-echo "PidFile $NX_ROOT/cups/cupsd.pid" >> $NX_ROOT/cups/cupsd.conf
-echo "StateDir $NX_ROOT/cups/" >> $NX_ROOT/cups/cupsd.conf
+if [ -z "$CUPS_1_1" ]
+then
+	echo "PidFile $NX_ROOT/cups/cupsd.pid" >> $NX_ROOT/cups/cupsd.conf
+	echo "StateDir $NX_ROOT/cups/" >> $NX_ROOT/cups/cupsd.conf
+fi
 
-mkdir -p $NX_HOME/cups/ppd/
+mkdir -p $NX_ROOT/cups/ppd/
 
-for i in $(lpstat -s | cut -d" " -f4)
+lpstat -s | egrep "^device" | while read x x printer destination
 do
-	LD_LIBRARY_PATH="" wget -q ${i/ipp/http}.ppd -O $NX_ROOT/cups/ppd/$(basename $i)_nxdl.ppd
+	proto=$(echo $destination | cut -d: -f1)
+	printer=$(echo $printer | cut -d: -f1)
+	if [ $proto = "ipp" -o "$proto" = "http" ]
+	then
+		# get it from remote printer
+		LD_LIBRARY_PATH="" wget -q -t 1 -T 1 ${destination/ipp/http}.ppd -O $NX_ROOT/cups/ppd/${printer}_nxdl.ppd
+	else
+		# get it from local host
+		[ -z "$IPP_PORT" ] && IPP_PORT=631
+		LD_LIBRARY_PATH="" wget -q -t 1 -T 1 "http://127.0.0.1:$IPP_PORT/printers/$printer.ppd" -O $NX_ROOT/cups/ppd/${printer}_nxdl.ppd
+	fi
 done
 
-exec /usr/sbin/cupsd "$@" 
+start_cupsd_1_1()
+{
+	/usr/sbin/cupsd -f "$@" &
+	CPID=$!
+	echo "$CPID" >"$NX_ROOT/cups/cupsd.pid"
+	trap "kill $CPID; rm -f $NX_ROOT/cups/cupsd.pid" EXIT
+	wait $CPID
+	rm -f "$NX_ROOT/cups/cupsd.pid"
+}
+
+if [ -z "$CUPS_1_1" ]
+then
+	exec /usr/sbin/cupsd "$@" 
+else
+	start_cupsd_1_1 "$@" &
+	disown $!
+fi



From k1pfeifle at gmx.net  Thu Jan 25 03:25:55 2007
From: k1pfeifle at gmx.net (Kurt Pfeifle)
Date: Thu, 25 Jan 2007 02:25:55 +0000
Subject: [Freenx-cvs] r289 - freenx-server/trunk
In-Reply-To: <200701241551.l0OFpb8K032545@sheep.berlios.de>
References: <200701241551.l0OFpb8K032545@sheep.berlios.de>
Message-ID: <200701250225.56587.k1pfeifle@gmx.net>

On Wednesday 24 January 2007 15:51, fabianx at BerliOS wrote:

> ?#ENABLE_KDE_CUPS="0"
> ?#KDE_PRINTRC="$KDEHOME/share/config/kdeprintrc"

This begs the question: how is the value of KDEHOME discovered/set?
It may be empty, for some users, no some systems...  And it may not 
be $HOME/.kde/

I think the most generic way is

   KDEHOME=$(kde-config --localprefix)




From k1pfeifle at gmx.net  Thu Jan 25 03:31:10 2007
From: k1pfeifle at gmx.net (Kurt Pfeifle)
Date: Thu, 25 Jan 2007 02:31:10 +0000
Subject: [Freenx-cvs] r291 - in nx-utils: . nxcups-wrapper
In-Reply-To: <200701241624.l0OGOliJ002757@sheep.berlios.de>
References: <200701241624.l0OGOliJ002757@sheep.berlios.de>
Message-ID: <200701250231.11634.k1pfeifle@gmx.net>

On Wednesday 24 January 2007 16:24, fabianx at BerliOS wrote:
> +#!/bin/sh
> +
> +echo "PidFile /home/info/ff/.nx/cups/cupsd.pid" >> $NX_HOME/.nx/cups/cupsd.conf
> +echo "StateDir /home/info/ff/.nx/cups/" >> $NX_HOME/.nx/cups/cupsd.conf

                    ".../info/ff/..."   ????     


From FabianFranz at gmx.de  Thu Jan 25 20:18:43 2007
From: FabianFranz at gmx.de (Fabian Franz)
Date: Thu, 25 Jan 2007 20:18:43 +0100
Subject: [Freenx-cvs] r289 - freenx-server/trunk
In-Reply-To: <200701250225.56587.k1pfeifle@gmx.net>
References: <200701241551.l0OFpb8K032545@sheep.berlios.de>
	<200701250225.56587.k1pfeifle@gmx.net>
Message-ID: <20070125191843.186490@gmx.net>

> On Wednesday 24 January 2007 15:51, fabianx at BerliOS wrote:
> 
> > ?#ENABLE_KDE_CUPS="0"
> > ?#KDE_PRINTRC="$KDEHOME/share/config/kdeprintrc"
> 
> This begs the question: how is the value of KDEHOME discovered/set?
> It may be empty, for some users, no some systems...  And it may not 
> be $HOME/.kde/
> 
> I think the most generic way is
> 
>    KDEHOME=$(kde-config --localprefix)

Thanks.

The new code for detection is:

[ -z "$KDE_PRINTRC" -a -n "$KDEHOME" ] && KDE_PRINTRC="$KDEHOME/share/config/kdeprintrc"
[ -z "$KDE_PRINTRC" ] && KDE_PRINTRC=$(kde-config --localprefix)"/share/config/kdeprintrc"
[ -z "$KDE_PRINTRC" -o ! -r "$KDE_PRINTRC" ] && KDE_PRINTRC="$HOME/.kde/share/config/kdeprintrc"

As you will shortly see  in SVN commit.

cu

Fabian


From fabianx at mail.berlios.de  Thu Jan 25 20:40:07 2007
From: fabianx at mail.berlios.de (fabianx at BerliOS)
Date: Thu, 25 Jan 2007 20:40:07 +0100
Subject: [Freenx-cvs] r302 - freenx-server/trunk
Message-ID: <200701251940.l0PJe7Z8002845@sheep.berlios.de>

Author: fabianx
Date: 2007-01-25 20:40:07 +0100 (Thu, 25 Jan 2007)
New Revision: 302

Modified:
   freenx-server/trunk/nxloadconfig
Log:
Enhanced KDE_PRINTRC detection.


Modified: freenx-server/trunk/nxloadconfig
===================================================================
--- freenx-server/trunk/nxloadconfig	2007-01-24 22:31:10 UTC (rev 301)
+++ freenx-server/trunk/nxloadconfig	2007-01-25 19:40:07 UTC (rev 302)
@@ -279,7 +279,8 @@
 fi 
 
 [ -z "$KDE_PRINTRC" -a -n "$KDEHOME" ] && KDE_PRINTRC="$KDEHOME/share/config/kdeprintrc"
-[ -z "$KDE_PRINTRC" -a -z "$KDEHOME" ] && KDE_PRINTRC="$HOME/.kde/share/config/kdeprintrc"
+[ -z "$KDE_PRINTRC" ] && KDE_PRINTRC=$(kde-config --localprefix)"/share/config/kdeprintrc"
+[ -z "$KDE_PRINTRC" -o ! -r "$KDE_PRINTRC" ] && KDE_PRINTRC="$HOME/.kde/share/config/kdeprintrc"
 
 #########################################################################
 # Support for --check



From k1pfeifle at gmx.net  Thu Jan 25 23:34:51 2007
From: k1pfeifle at gmx.net (Kurt Pfeifle)
Date: Thu, 25 Jan 2007 22:34:51 +0000
Subject: [Freenx-cvs] r289 - freenx-server/trunk
In-Reply-To: <20070125191843.186490@gmx.net>
References: <200701241551.l0OFpb8K032545@sheep.berlios.de>
	<200701250225.56587.k1pfeifle@gmx.net>
	<20070125191843.186490@gmx.net>
Message-ID: <200701252234.51423.k1pfeifle@gmx.net>

On Thursday 25 January 2007 19:18, Fabian Franz wrote:

> KDE_PRINTRC=$(kde-config --localprefix)"/share/config/kdeprintrc"

Are the quotes you use here on purpose? I don't think they are
needed. They don't seem to do any harm either...

Also, I discovered that "kde-config --localprefix" outputs with
a trailing slash -- the variable will have two slashes included
then (but that's also not harmful).


From fabianx at mail.berlios.de  Fri Jan 26 03:47:49 2007
From: fabianx at mail.berlios.de (fabianx at BerliOS)
Date: Fri, 26 Jan 2007 03:47:49 +0100
Subject: [Freenx-cvs] r303 - nx-utils/nxfish
Message-ID: <200701260247.l0Q2ln0p016283@sheep.berlios.de>

Author: fabianx
Date: 2007-01-26 03:47:48 +0100 (Fri, 26 Jan 2007)
New Revision: 303

Added:
   nx-utils/nxfish/ChangeLog
   nx-utils/nxfish/README
   nx-utils/nxfish/nx-fishsrv.sh
   nx-utils/nxfish/nxfish
Modified:
   nx-utils/nxfish/nx-fishsrv.pl
Log:
0.0.3-nx-3
        * Added cookie authentication.
        * Added sample script for starting the nx-fishsrv.pl.
        * Added sample nxfish script with authentication via encrypted session cookie.
        * Fixed a security problem. If nx-fishsrv.pl was running with . as
          path it was possible to access "..".
        * Added a changelog. :)
        * Added a README.

In general: Made nxfish usable.



Added: nx-utils/nxfish/ChangeLog
===================================================================
--- nx-utils/nxfish/ChangeLog	2007-01-25 19:40:07 UTC (rev 302)
+++ nx-utils/nxfish/ChangeLog	2007-01-26 02:47:48 UTC (rev 303)
@@ -0,0 +1,14 @@
+0.0.3-nx-3
+	* Added cookie authentication.
+	* Added sample script for starting the nx-fishsrv.pl.
+	* Added sample nxfish script with authentication via encrypted session cookie.
+	* Fixed a security problem. If nx-fishsrv.pl was running with . as
+	  path it was possible to access "..".
+	* Added a changelog. :)
+	* Added a README.
+
+0.0.3-nx-2
+	* Prepared KDE patch.
+
+0.0.3-nx-1
+	* Original version.

Added: nx-utils/nxfish/README
===================================================================
--- nx-utils/nxfish/README	2007-01-25 19:40:07 UTC (rev 302)
+++ nx-utils/nxfish/README	2007-01-26 02:47:48 UTC (rev 303)
@@ -0,0 +1,51 @@
+Okay, here we go.
+
+We need:
+
+- KDE 3.5.5 or install kio_nxfish ourselves using the provided sources.
+- ssh access to the nx server we want to use nxfish on.
+- netpipes installed on the client computer.
+
+Now we do:
+
+Client:
+	- Start nx session
+	- Look into ~/.nx/S-<yoursession>/options for the right cookie.
+
+	- Start:
+	
+	$ ./nx-fishsrv.sh <the directory you want to share> - <some port>
+	Please provide password: <cookie>
+	Starting nx-fishsrv.pl ...
+
+	Note:
+	   
+	   You will have complete access from the remote session to the directory 
+	   that you share.
+
+	   It should not contain any symlinks to things you don't want to share.
+
+	   Perhaps a symlink detection is later built into nx-fishrv.pl.
+
+Server:
+	- Install nxfish to /usr/bin or somewhere else in your PATH.
+	- Make sure that (Free)NX does export NXSESSIONID.
+
+	  You might need to use a custom startkde script, where you export it yourself using something
+	  like:
+
+	  for i in $( echo $HOME/.nx/C-*$(echo $DISPLAY | cut -d: -f2)-* | tr ' ' '\n' )
+	  do
+	      [ -f "$i/pids/agent" ] && break
+	  done
+	  export NXSESSIONID=$i
+
+	- Just open konqueror and browse to nxfish:/
+
+	- Done :)
+
+That's it folk.
+
+Please enjoy.
+
+	Fabian - January 2007

Modified: nx-utils/nxfish/nx-fishsrv.pl
===================================================================
--- nx-utils/nxfish/nx-fishsrv.pl	2007-01-25 19:40:07 UTC (rev 302)
+++ nx-utils/nxfish/nx-fishsrv.pl	2007-01-26 02:47:48 UTC (rev 303)
@@ -1,5 +1,17 @@
 #!/usr/bin/perl
 
+# nx-fishrv.pl - Originally based on KDE sources.
+#
+#   A simple fileserver to allow remote browsing via nxfish://.
+# 
+# License: GPL - v2
+#
+# Made "secure" for use by NX by Fabian Franz <freenx at fabian-franz.de>.
+# 
+# Version: 0.0.3-nx-3
+#
+# SVN: $$ 
+
 =pod
 =cut
 
@@ -7,12 +19,19 @@
 $|++;
 
 my $substpath=$ARGV[0];
+my $cookie=$ARGV[1];
+my $authenticated=0;
 
-if ($substpath eq '')
+if ($substpath eq '' or $substpath eq '.')
 {
-	$substpath='.';
+	$substpath='./';
 }
 
+if ($cookie eq '')
+{
+	$authenticated=1;
+}
+
 use strict;
 use POSIX qw(getcwd dup2 strftime);
 $SIG{'CHLD'} = 'IGNORE';
@@ -20,6 +39,30 @@
 MAIN: while (<STDIN>) {
     chomp;
     chomp;
+
+    #print STDERR "$_\n"; # debug
+    
+    /^#PASS\s+((?:\\.|[^\\])*?)\s*$/ && do {
+        my $usercookie    = $1;
+	
+	if ($usercookie eq $cookie or $authenticated eq 1)
+	{
+		$authenticated=1;
+		#print "### 200\n";
+	}
+	else
+	{
+		print "### 500 Wrong password supplied.\n";
+	}
+        next; # or should we bail out here?
+    };
+    
+    if ($authenticated eq 0)
+    {
+    	print "### 500 Not authenticated please use #PASS command.\n";
+	next;
+    }
+
     /\#FISH/ && do {
 	print "### 200\n";
 	next;

Added: nx-utils/nxfish/nx-fishsrv.sh
===================================================================
--- nx-utils/nxfish/nx-fishsrv.sh	2007-01-25 19:40:07 UTC (rev 302)
+++ nx-utils/nxfish/nx-fishsrv.sh	2007-01-26 02:47:48 UTC (rev 303)
@@ -0,0 +1,37 @@
+#!/bin/sh
+
+# nx-fishssrv.sh - Copyright (c) 2007 by Fabian Franz.
+#
+#    A simple wrapper script for nx-fishsrv.pl with proper authentication.
+#
+# This is an example how to start nx-fishsrv using faucet and the supplied 
+# nx-fishsrv.pl
+#
+# If - is supplied as cookie the password is read from stdin.
+#
+# Again: 6201 is just an arbitrary port I use for testing.
+#
+# It is assumed that you forward the port via ssh -R.
+
+if [ $# -lt 1 ]
+then
+	echo "Usage: $(basename $0) <directory> <cookie> [port]"
+fi
+
+if [ $1 = '-' ]
+then
+	echo -n "Please provide password: "
+	read -s rawcookie
+	echo ""
+else
+	rawcookie="$2"
+fi
+echo "Starting nx-fishsrv.pl ..."
+
+PORT=$3
+[ -z "$PORT" ] && PORT=6201
+
+# We use md5sum so that no one can get our original session cookie to easily
+cookie=$(htpasswd -nbs nxfish ":NXFISH:$rawcookie" | cut -d: -f2 )
+
+faucet $PORT -io sh -c 'echo "FISH:" ; ./nx-fishsrv.pl '"'$1'"' '"'$cookie'"''


Property changes on: nx-utils/nxfish/nx-fishsrv.sh
___________________________________________________________________
Name: svn:executable
   + *

Added: nx-utils/nxfish/nxfish
===================================================================
--- nx-utils/nxfish/nxfish	2007-01-25 19:40:07 UTC (rev 302)
+++ nx-utils/nxfish/nxfish	2007-01-26 02:47:48 UTC (rev 303)
@@ -0,0 +1,25 @@
+#!/bin/sh
+
+# nxfish - Copyright (c) 2007 by Fabian Franz.
+#
+#   A simple client for the nxfish kio_slave.
+#
+# This is just a sample script how nxfish could be used on a NX server.
+# It gets the cookie from the NXSESSIONID filedir and encrypts it.
+# Then it sends the cookie and gives control to netcat.
+#
+# If NXFISH_SERVER is set netcat does connect to that one.
+# 
+# The default of 6201 is arbitrary and could as well be DISPLAY+11000
+# once proper forwarding is done.
+#
+# For now this script assumes that you set up the forwarding yourself via ssh -R.
+
+rawcookie=$(cat $HOME/.nx/C-$NXSESSIONID/options | tr ',' '\n' | grep cookie= | cut -d= -f2)
+
+# We use SHA so that no one can get our original session cookie
+cookie=$(htpasswd -nbs nxfish ":NXFISH:$rawcookie" | cut -d: -f2 )
+
+[ -z "$NXFISH_SERVER" ] && NXFISH_SERVER="localhost 6201"
+
+(echo "#PASS $cookie"; cat -) | netcat $NXFISH_SERVER


Property changes on: nx-utils/nxfish/nxfish
___________________________________________________________________
Name: svn:executable
   + *



From fabianx at mail.berlios.de  Fri Jan 26 04:41:12 2007
From: fabianx at mail.berlios.de (fabianx at BerliOS)
Date: Fri, 26 Jan 2007 04:41:12 +0100
Subject: [Freenx-cvs] r304 - in nx-utils: . nxfastkde
Message-ID: <200701260341.l0Q3fCJa020066@sheep.berlios.de>

Author: fabianx
Date: 2007-01-26 04:41:12 +0100 (Fri, 26 Jan 2007)
New Revision: 304

Added:
   nx-utils/nxfastkde/
   nx-utils/nxfastkde/README
   nx-utils/nxfastkde/kdeglobals
   nx-utils/nxfastkde/kdesktoprc
   nx-utils/nxfastkde/kdesktoprc.fnxwp
   nx-utils/nxfastkde/kickerrc
   nx-utils/nxfastkde/konqiconviewrc
   nx-utils/nxfastkde/konquerorrc
   nx-utils/nxfastkde/kwin.eventsrc
   nx-utils/nxfastkde/kwinrc
Log:
Added first experimental profile for a fast NX KDE profile.

It is almost automatically created by comparing what kpersonalizer disabled from fast CPU settings to slow CPU settings.



Added: nx-utils/nxfastkde/README
===================================================================
--- nx-utils/nxfastkde/README	2007-01-26 02:47:48 UTC (rev 303)
+++ nx-utils/nxfastkde/README	2007-01-26 03:41:12 UTC (rev 304)
@@ -0,0 +1,3 @@
+This config files are a try to create a fast NX profile for KDE. It should be usable via KDE's kiosk functions.
+
+Fabian

Added: nx-utils/nxfastkde/kdeglobals
===================================================================
--- nx-utils/nxfastkde/kdeglobals	2007-01-26 02:47:48 UTC (rev 303)
+++ nx-utils/nxfastkde/kdeglobals	2007-01-26 03:41:12 UTC (rev 304)
@@ -0,0 +1,14 @@
+[DesktopIcons]
+ActiveEffect[$i]=none
+Animated[$i]=false
+
+[KDE]
+EffectAnimateCombo[$i]=false
+EffectFadeMenu[$i]=false
+EffectFadeTooltip[$i]=false
+EffectsEnabled[$i]=false
+OpaqueResize[$i]=false
+ShowIconsOnPushButtons[$i]=false
+
+[PanelIcons]
+ActiveEffect[$i]=none

Added: nx-utils/nxfastkde/kdesktoprc
===================================================================
--- nx-utils/nxfastkde/kdesktoprc	2007-01-26 02:47:48 UTC (rev 303)
+++ nx-utils/nxfastkde/kdesktoprc	2007-01-26 03:41:12 UTC (rev 304)
@@ -0,0 +1,5 @@
+[Desktop Icons]
+Preview[$i]=
+
+[Desktop0]
+WallpaperMode[$i]=NoWallpaper

Added: nx-utils/nxfastkde/kdesktoprc.fnxwp
===================================================================
--- nx-utils/nxfastkde/kdesktoprc.fnxwp	2007-01-26 02:47:48 UTC (rev 303)
+++ nx-utils/nxfastkde/kdesktoprc.fnxwp	2007-01-26 03:41:12 UTC (rev 304)
@@ -0,0 +1,6 @@
+[Desktop Icons]
+Preview[$i]=
+
+[Desktop0]
+Wallpaper[$i]=FreeNX.png
+WallpaperMode[$i]=Scaled

Added: nx-utils/nxfastkde/kickerrc
===================================================================
--- nx-utils/nxfastkde/kickerrc	2007-01-26 02:47:48 UTC (rev 303)
+++ nx-utils/nxfastkde/kickerrc	2007-01-26 03:41:12 UTC (rev 304)
@@ -0,0 +1,5 @@
+[General]
+UseBackgroundTheme[$i]=false
+
+[buttons]
+EnableIconZoom[$i]=false

Added: nx-utils/nxfastkde/konqiconviewrc
===================================================================
--- nx-utils/nxfastkde/konqiconviewrc	2007-01-26 02:47:48 UTC (rev 303)
+++ nx-utils/nxfastkde/konqiconviewrc	2007-01-26 03:41:12 UTC (rev 304)
@@ -0,0 +1,2 @@
+[Settings]
+PreviewsEnabled[$i]=false

Added: nx-utils/nxfastkde/konquerorrc
===================================================================
--- nx-utils/nxfastkde/konquerorrc	2007-01-26 02:47:48 UTC (rev 303)
+++ nx-utils/nxfastkde/konquerorrc	2007-01-26 03:41:12 UTC (rev 304)
@@ -0,0 +1,2 @@
+[Settings]
+BgImage[$i]=

Added: nx-utils/nxfastkde/kwin.eventsrc
===================================================================
--- nx-utils/nxfastkde/kwin.eventsrc	2007-01-26 02:47:48 UTC (rev 303)
+++ nx-utils/nxfastkde/kwin.eventsrc	2007-01-26 03:41:12 UTC (rev 304)
@@ -0,0 +1,71 @@
+[close]
+presentation[$i]=0
+
+[deiconify]
+presentation[$i]=0
+
+[desktop1]
+presentation[$i]=0
+
+[desktop2]
+presentation[$i]=0
+
+[desktop3]
+presentation[$i]=0
+
+[desktop4]
+presentation[$i]=0
+
+[desktop5]
+presentation[$i]=0
+
+[desktop6]
+presentation[$i]=0
+
+[desktop7]
+presentation[$i]=0
+
+[desktop8]
+presentation[$i]=0
+
+[iconify]
+presentation[$i]=0
+
+[maximize]
+presentation[$i]=0
+
+[minimize]
+presentation[$i]=0
+
+[new]
+presentation[$i]=0
+
+[not_on_all_desktops]
+presentation[$i]=0
+
+[on_all_desktops]
+presentation[$i]=0
+
+[shadedown]
+presentation[$i]=0
+
+[shadeup]
+presentation[$i]=0
+
+[sticky]
+presentation[$i]=0
+
+[transdelete]
+presentation[$i]=0
+
+[transnew]
+presentation[$i]=0
+
+[unmaximize]
+presentation[$i]=0
+
+[unminimize]
+presentation[$i]=0
+
+[unsticky]
+presentation[$i]=0

Added: nx-utils/nxfastkde/kwinrc
===================================================================
--- nx-utils/nxfastkde/kwinrc	2007-01-26 02:47:48 UTC (rev 303)
+++ nx-utils/nxfastkde/kwinrc	2007-01-26 03:41:12 UTC (rev 304)
@@ -0,0 +1,7 @@
+[Windows]
+AnimateMinimize[$i]=false
+AnimateShade[$i]=false
+MoveMode[$i]=Transparent
+MoveResizeMaximizedWindows[$i]=false
+ResizeMode[$i]=Transparent
+ShadeHover[$i]=false



From fabianx at mail.berlios.de  Fri Jan 26 05:23:02 2007
From: fabianx at mail.berlios.de (fabianx at BerliOS)
Date: Fri, 26 Jan 2007 05:23:02 +0100
Subject: [Freenx-cvs] r305 - nx-utils/nxfastkde
Message-ID: <200701260423.l0Q4N2PI023140@sheep.berlios.de>

Author: fabianx
Date: 2007-01-26 05:23:02 +0100 (Fri, 26 Jan 2007)
New Revision: 305

Modified:
   nx-utils/nxfastkde/kdeglobals
   nx-utils/nxfastkde/kickerrc
Log:
Added two more animated nerve things.

Found by hand.



Modified: nx-utils/nxfastkde/kdeglobals
===================================================================
--- nx-utils/nxfastkde/kdeglobals	2007-01-26 03:41:12 UTC (rev 304)
+++ nx-utils/nxfastkde/kdeglobals	2007-01-26 04:23:02 UTC (rev 305)
@@ -4,6 +4,8 @@
 
 [KDE]
 EffectAnimateCombo[$i]=false
+EffectAnimateMenu[$i]=false
+EffectAnimateTooltip[$i]=false
 EffectFadeMenu[$i]=false
 EffectFadeTooltip[$i]=false
 EffectsEnabled[$i]=false
@@ -12,3 +14,4 @@
 
 [PanelIcons]
 ActiveEffect[$i]=none
+Animated[$i]=false

Modified: nx-utils/nxfastkde/kickerrc
===================================================================
--- nx-utils/nxfastkde/kickerrc	2007-01-26 03:41:12 UTC (rev 304)
+++ nx-utils/nxfastkde/kickerrc	2007-01-26 04:23:02 UTC (rev 305)
@@ -1,5 +1,7 @@
 [General]
 UseBackgroundTheme[$i]=false
+FadeOutAppletHandles[$i]=false
+HideAnimation[$i]=false
 
 [buttons]
 EnableIconZoom[$i]=false



From fabianx at mail.berlios.de  Fri Jan 26 07:27:47 2007
From: fabianx at mail.berlios.de (fabianx at BerliOS)
Date: Fri, 26 Jan 2007 07:27:47 +0100
Subject: [Freenx-cvs] r306 - freenx-server/trunk
Message-ID: <200701260627.l0Q6Rlxf006901@sheep.berlios.de>

Author: fabianx
Date: 2007-01-26 07:27:47 +0100 (Fri, 26 Jan 2007)
New Revision: 306

Added:
   freenx-server/trunk/nxcups-gethost
Modified:
   freenx-server/trunk/ChangeLog
   freenx-server/trunk/node.conf.sample
   freenx-server/trunk/nxloadconfig
   freenx-server/trunk/nxnode
   freenx-server/trunk/nxsetup
Log:
* Added support for nxipp to nxnode and nxsetup.
* Added nxcups-gethost script for automatic usage in KDE.





Modified: freenx-server/trunk/ChangeLog
===================================================================
--- freenx-server/trunk/ChangeLog	2007-01-26 04:23:02 UTC (rev 305)
+++ freenx-server/trunk/ChangeLog	2007-01-26 06:27:47 UTC (rev 306)
@@ -1,8 +1,13 @@
 xx.xx.2007 FreeNX 0.6.1
 	* Fixed the printing support for CUPS 1.2.
 	  Older versions of CUPS are no longer supported.
-	  * Note: You might need to do: chmod 755
-		  /usr/lib/cups/backend/{ipp, http}
+	  * Note: You must do as root:
+
+	          cp /usr/lib/cups/backend/ipp /usr/lib/cups/backend/nxipp
+		  chmod 755 /usr/lib/cups/backend/nxipp
+
+		  Or alternatively re-run nxsetup.
+
 	* Added foomatic support.
 	  * Note: You might need to do: ln -s /usr/bin/foomatic-ppdfile
 	          /usr/lib/cups/driver/
@@ -10,10 +15,15 @@
 	* Added automatic downloading of PPDs, if the client supports it.
 	* Added configuration vars to tweak the new behaviour.
 	* Added cups seamless support with no "use this driver?" dialogs at all.
-	  * Note: You need nxcupsd-wrapper on the client side.
+	  * Note: You need nxcupsd-wrapper on the client side for CUPS 1.2
+	          clients.
+
 	          Get it from nxutils repository.
+
 	* Fixed Support for "Running" sessions - again.
 	* Made the NXAgent exited with exit code 1 message more verbose.
+	* Added support for nxipp to nxnode and nxsetup.
+	* Added nxcups-gethost script for automatic usage in KDE.
 
 23.01.2007 FreeNX 0.6.0 "Juliana birthday edition"
 	* Opened the 0.6.0 branch.

Modified: freenx-server/trunk/node.conf.sample
===================================================================
--- freenx-server/trunk/node.conf.sample	2007-01-26 04:23:02 UTC (rev 305)
+++ freenx-server/trunk/node.conf.sample	2007-01-26 06:27:47 UTC (rev 306)
@@ -247,10 +247,21 @@
 #ARTSD_BIN_PRELOAD="artsdsp"
 
 # FreeNX with ENABLE_KDE_CUPS="1" will automatically write 
-# $KDE_PRINTRC and put the current used port into it.
+# $KDE_PRINTRC and put the current used socket into it.
+#
+# If you additionally enable ENABLE_KDE_CUPS_DYNAMIC it will set the 
+# Host entry to the script nxcups-gethost, which dynamically tries all 
+# possible entries to find the current printing host.
+#
+# The order is: CUPS_SERVER (env var), ~/.cups/client.conf, $KDE_PRINTRC,
+#               $CUPS_DEFAULT_SOCK, localhost
+#
+# So this option is most useful with ENABLE_CUPS_SERVER_EXPORT="1".
+# 
 # $KDE_PRINTRC is automatically calculated if its not set.
 
 #ENABLE_KDE_CUPS="0"
+#ENABLE_KDE_CUPS_DYNAMIC="0"
 #KDE_PRINTRC="$KDEHOME/share/config/kdeprintrc"
 
 # FreeNX with ENABLE_CUPS_SERVER_EXPORT="1" will automatically
@@ -279,6 +290,8 @@
 # installation.
 
 #CUPS_BACKEND="/usr/lib/cups/backend"
+#CUPS_IPP_BACKEND="$CUPS_BACKEND/nxipp"
+#CUPS_DEFAULT_SOCK="/var/run/cups/cups.sock"
 #CUPS_ETC="/etc/cups"
 
 #########################################################################

Added: freenx-server/trunk/nxcups-gethost
===================================================================
--- freenx-server/trunk/nxcups-gethost	2007-01-26 04:23:02 UTC (rev 305)
+++ freenx-server/trunk/nxcups-gethost	2007-01-26 06:27:47 UTC (rev 306)
@@ -0,0 +1,23 @@
+#!/bin/sh
+
+# Read the config file
+. $(PATH=$(cd $(dirname $0) && pwd):$PATH which nxloadconfig) --userconf
+
+CUPS_HOST=""
+
+# see if environment is helpful
+[ -n "$CUPS_SERVER" ] && CUPS_HOST=$CUPS_SERVER
+
+# no, lets see if the user has a cups config file
+[ -z "$CUPS_HOST" -a -f "$HOME/.cups/client.conf" ] && CUPS_HOST=$(grep "^ServerName " "$HOME/.cups/client.conf" | sed 's/^ServerName //g; s/#.*//g')
+
+# not even close, so lets use the kdeprintrcs configuration key
+[ -z "$CUPS_HOST" ] && CUPS_HOST=$(grep "^Host=" "$KDE_PRINTRC" | cut -d'=' -f2)
+
+# Hm, perhaps there is a global cupsd running on this host
+[ -z "$CUPS_HOST" -a -S "$CUPS_DEFAULT_SOCK" ] && CUPS_HOST="$CUPS_DEFAULT_SOCK" 
+
+# no, no, no - so we fallback to localhost
+[ -z "$CUPS_HOST" ] && CUPS_HOST="127.0.0.1"
+
+echo "$CUPS_HOST"


Property changes on: freenx-server/trunk/nxcups-gethost
___________________________________________________________________
Name: svn:executable
   + *

Modified: freenx-server/trunk/nxloadconfig
===================================================================
--- freenx-server/trunk/nxloadconfig	2007-01-26 04:23:02 UTC (rev 305)
+++ freenx-server/trunk/nxloadconfig	2007-01-26 06:27:47 UTC (rev 306)
@@ -143,6 +143,7 @@
 ARTSD_BIN_PRELOAD="artsdsp"
 
 ENABLE_KDE_CUPS="0"
+ENABLE_KDE_CUPS_DYNAMIC="0"
 KDE_PRINTRC="" # Calculated
 
 ENABLE_CUPS_SERVER_EXPORT="1"
@@ -152,6 +153,8 @@
 COMMAND_FOOMATIC="/usr/lib/cups/driver/foomatic-ppdfile"
 
 CUPS_BACKEND="/usr/lib/cups/backend"
+CUPS_IPP_BACKEND="$CUPS_BACKEND/nxipp"
+CUPS_DEFAULT_SOCK="/var/run/cups/cups.sock"
 CUPS_ETC="/etc/cups/"
 
 # Path directives
@@ -450,8 +453,8 @@
 	[ "$ENABLE_FOOMATIC" = "1" ] && ! which "$COMMAND_FOOMATIC" >/dev/null 2>&1 && \
 		WARNING="yes" && echo "Warning: Invalid value \"COMMAND_FOOMATIC=$COMMAND_FOOMATIC\"" \
 					  && echo "         Users will not be able to use foomatic."
-	[ ! -x "$CUPS_BACKEND/ipp" ] && \
-		WARNING="yes" && echo "Warning: \"CUPS_BACKEND/ipp\" is not executable." \
+	[ ! -x "$CUPS_BACKEND/$CUPS_IPP_BACKEND" ] && \
+		WARNING="yes" && echo "Warning: \"CUPS_BACKEND/$CUPS_IPP_BACKEND\" is not executable." \
 					  && echo "         Users will not be able to enable printing."
 	[ ! -x "$CUPS_BACKEND/smb" ] && \
 		WARNING="yes" && echo "Warning: \"CUPS_BACKEND/smb\" is not executable." \

Modified: freenx-server/trunk/nxnode
===================================================================
--- freenx-server/trunk/nxnode	2007-01-26 04:23:02 UTC (rev 305)
+++ freenx-server/trunk/nxnode	2007-01-26 06:27:47 UTC (rev 306)
@@ -606,10 +606,12 @@
 	then
 		if egrep -q "^Host=" "$KDE_PRINTRC"
 		then
-			perl -pi -e 's/^Host=.*/Host='"$NODE_CUPSD_SOCKET"'/g' "$KDE_PRINTRC"
+			[ "$ENABLE_KDE_CUPS_DYNAMIC" = "1" ] && perl -pi -e 's,^Host=.*,Host[\$ie]=\$\('"$PATH_BIN/nxcups-gethost"'),g' "$KDE_PRINTRC"
+			[ "$ENABLE_KDE_CUPS_DYNAMIC" != "1" ] && perl -pi -e 's,^Host=.*,Host='"$NODE_CUPSD_SOCKET"',g' "$KDE_PRINTRC"
 		else
 			echo "[CUPS]" >> "$KDE_PRINTRC"
-			echo "Host=$NODE_CUPSD_SOCKET" >> "$KDE_PRINTRC"
+			[ "$ENABLE_KDE_CUPS_DYNAMIC" = "1" ] && echo "Host[\$ie]=\$($PATH_BIN/nxcups-gethost)" >> "$KDE_PRINTRC"
+			[ "$ENABLE_KDE_CUPS_DYNAMIC" != "1" ] && echo "Host=$NODE_CUPSD_SOCKET" >> "$KDE_PRINTRC"
 		fi
 	fi
 }
@@ -1201,7 +1203,7 @@
 		NAME="$share"
 		ENABLE_CUPS_SEAMLESS="0"
 	else
-		DEVICE_URI="ipp://$username:$password at 127.0.0.1:$port/printers/$printer"
+		DEVICE_URI="nxipp://$username:$password at 127.0.0.1:$port/printers/$printer"
 		NAME="$printer"
 	fi
 	export PATH_BIN

Modified: freenx-server/trunk/nxsetup
===================================================================
--- freenx-server/trunk/nxsetup	2007-01-26 04:23:02 UTC (rev 305)
+++ freenx-server/trunk/nxsetup	2007-01-26 06:27:47 UTC (rev 306)
@@ -326,7 +326,16 @@
 	chown -R nx:root $NX_ETC_DIR
 	chown -R nx:root $NX_HOME_DIR
 	chown nx:root "$NX_LOGFILE"
+
 	echo "done"
+
+	if [ -d "$CUPS_BACKEND" ]
+	then
+		echo -n "Setting up cups nxipp backend ..."
+		cp -af "$CUPS_BACKEND/ipp" "$CUPS_IPP_BACKEND"
+		chmod 755 "$CUPS_IPP_BACKEND"
+		echo "done"
+	fi
 }
 
 test_nx()



From fabianx at mail.berlios.de  Mon Jan 29 19:50:50 2007
From: fabianx at mail.berlios.de (fabianx at BerliOS)
Date: Mon, 29 Jan 2007 19:50:50 +0100
Subject: [Freenx-cvs] r307 - freenx-server/trunk
Message-ID: <200701291850.l0TIooZh031233@sheep.berlios.de>

Author: fabianx
Date: 2007-01-29 19:50:50 +0100 (Mon, 29 Jan 2007)
New Revision: 307

Modified:
   freenx-server/trunk/nxloadconfig
Log:
Some problems with detection of nxipp backend fixed.


Modified: freenx-server/trunk/nxloadconfig
===================================================================
--- freenx-server/trunk/nxloadconfig	2007-01-26 06:27:47 UTC (rev 306)
+++ freenx-server/trunk/nxloadconfig	2007-01-29 18:50:50 UTC (rev 307)
@@ -453,11 +453,11 @@
 	[ "$ENABLE_FOOMATIC" = "1" ] && ! which "$COMMAND_FOOMATIC" >/dev/null 2>&1 && \
 		WARNING="yes" && echo "Warning: Invalid value \"COMMAND_FOOMATIC=$COMMAND_FOOMATIC\"" \
 					  && echo "         Users will not be able to use foomatic."
-	[ ! -x "$CUPS_BACKEND/$CUPS_IPP_BACKEND" ] && \
-		WARNING="yes" && echo "Warning: \"CUPS_BACKEND/$CUPS_IPP_BACKEND\" is not executable." \
+	[ ! -x "$CUPS_IPP_BACKEND" ] && \
+		WARNING="yes" && echo "Warning: \"$CUPS_IPP_BACKEND\" is not executable." \
 					  && echo "         Users will not be able to enable printing."
 	[ ! -x "$CUPS_BACKEND/smb" ] && \
-		WARNING="yes" && echo "Warning: \"CUPS_BACKEND/smb\" is not executable." \
+		WARNING="yes" && echo "Warning: \"$CUPS_BACKEND/smb\" is not executable." \
 					  && echo "         Users will not be able to enable printing."
 	[ ! -e "$CUPS_ETC/mime.types" -o ! -e "$CUPS_ETC/mime.convs" ] && \
 		WARNING="yes" && echo "Warning: Invalid value \"CUPS_ETC=$CUPS_ETC\"" \



From fabianx at mail.berlios.de  Tue Jan 30 06:36:54 2007
From: fabianx at mail.berlios.de (fabianx at BerliOS)
Date: Tue, 30 Jan 2007 06:36:54 +0100
Subject: [Freenx-cvs] r308 - nx-utils/nxfish
Message-ID: <200701300536.l0U5as7O029540@sheep.berlios.de>

Author: fabianx
Date: 2007-01-30 06:36:53 +0100 (Tue, 30 Jan 2007)
New Revision: 308

Added:
   nx-utils/nxfish/README.win32
   nx-utils/nxfish/nx-fishsrv-win32.pl
Log:
Added initial win32 version of nx-fishsrv.pl.

Maybe it will be later synced with unix version ...



Added: nx-utils/nxfish/README.win32
===================================================================
--- nx-utils/nxfish/README.win32	2007-01-29 18:50:50 UTC (rev 307)
+++ nx-utils/nxfish/README.win32	2007-01-30 05:36:53 UTC (rev 308)
@@ -0,0 +1,15 @@
+There is now also a windows version available.
+
+You need to install perl and create a start bat like:
+
+ at start perl C:\\PATH\\TO\\nx-fishsrv-win32.pl "C:\\Folder\\Shared\\" "" "<port>"
+
+You also need to install file to C:\\Programme\\GnuWin32\\bin\file.exe.
+
+Or tweak the path in nx-fishsrv-win32.pl.
+
+Enjoy!
+
+cu
+
+Fabian

Added: nx-utils/nxfish/nx-fishsrv-win32.pl
===================================================================
--- nx-utils/nxfish/nx-fishsrv-win32.pl	2007-01-29 18:50:50 UTC (rev 307)
+++ nx-utils/nxfish/nx-fishsrv-win32.pl	2007-01-30 05:36:53 UTC (rev 308)
@@ -0,0 +1,472 @@
+#!/usr/bin/perl
+
+# nx-fishrv.pl - Originally based on KDE sources.
+#
+#   A simple fileserver to allow remote browsing via nxfish://.
+# 
+# License: GPL - v2
+#
+# Made "secure" for use by NX by Fabian Franz <freenx at fabian-franz.de>.
+# 
+# Version: 0.0.3-nx-3
+#
+# SVN: $$ 
+
+=pod
+=cut
+
+use Fcntl;
+$|++;
+use strict;
+use POSIX qw(getcwd dup2 strftime);
+use IO::Socket ();
+
+my $substpath=$ARGV[0];
+my $cookie=$ARGV[1];
+my $port=$ARGV[2];
+my $authenticated=0;
+
+my $client_ich=undef;
+my $client_och=undef;
+
+if ($substpath eq '' or $substpath eq '.')
+{
+	$substpath='./';
+}
+
+if ($cookie eq '')
+{
+	$authenticated=1;
+}
+
+$| = 1;
+
+if ($port ne '')
+{
+	Server();
+}
+else
+{
+	Run(*STDIN, *STDOUT);
+}
+
+sub Server()
+{
+  my $verbose=1;
+  my $debug=0;
+  $verbose = 1 if $debug && !$verbose;
+
+  my $ah = IO::Socket::INET->new('LocalAddr' => "0.0.0.0",
+				 'LocalPort' => $port,
+				 'Reuse' => 1,
+				 'Listen' => 10)
+    || die "Failed to bind to local socket: $!";
+
+  print "Entering main loop.\n" if $verbose;
+  $SIG{'CHLD'} = 'IGNORE';
+  my $num = 0;
+  while (1) {
+    my $ch = $ah->accept();
+    if (!$ch) {
+      print STDERR "Failed to accept: $!\n";
+      next;
+    }
+    printf("Accepting client from %s, port %s.\n",
+	   $ch->peerhost(), $ch->peerport()) if $verbose;
+    ++$num;
+    my $pid = eval { fork () };
+    if ($@) {
+      # fork not supported, we handle a single connection
+      Run($ch, $ch);
+    } elsif (!defined($pid)) {
+      print STDERR "Failed to fork: $!\n";
+    } elsif ($pid == 0) {
+      # This is the child
+      $ah->close();
+      Run($ch, $ch);
+      exit 0;
+    } else {
+      print "Parent: Forked child, closing socket.\n" if $verbose;
+      $ch->close();
+    }
+  }
+}
+
+sub Run()
+{
+$SIG{'CHLD'} = 'IGNORE';
+$client_ich = shift;
+$client_och = shift;
+
+myprint("FISH:\n");
+
+MAIN: while (readline($client_ich)) {
+    chomp;
+    chomp;
+
+    write_file("debug.log", "$_\n"); # debug
+    
+    /^#PASS\s+((?:\\.|[^\\])*?)\s*$/ && do {
+        my $usercookie    = $1;
+	
+	if ($usercookie eq $cookie or $authenticated eq 1)
+	{
+		$authenticated=1;
+		#myprint("### 200\n");
+	}
+	else
+	{
+		myprint("### 500 Wrong password supplied.\n");
+	}
+        next; # or should we bail out here?
+    };
+    
+    if ($authenticated eq 0)
+    {
+    	myprint("### 500 Not authenticated please use #PASS command.\n");
+	next;
+    }
+
+    /\#FISH/ && do {
+	myprint("### 200\n");
+	next;
+    };
+
+    next if !length($_) || substr( $_, 0, 1 ) ne '#';
+    s/^#//;
+    /^VER / && do {
+        myprint("VER 0.0.3 copy lscount lslinks lsmime stat\n### 200\n");
+        next;
+    };
+    /^PWD$/ && do {
+        myprint("/", "\n### 200\n");
+        next;
+    };
+    /^SYMLINK\s+((?:\\.|[^\\])*?)\s+((?:\\.|[^\\])*?)\s*$/ && do {
+        my $ofn = unquote($1);
+        my $fn  = unquote($2);
+	#myprint( symlink( $ofn, $fn ) ? "### 200\n" : "### 500 $!\n" );
+	myprint( "### 500 Symlink not supported on Windows systems.\n" );
+        next;
+    };
+    /^COPY\s+((?:\\.|[^\\])*?)\s+((?:\\.|[^\\])*?)\s*$/ && do {
+        my $ofn    = unquote($1);
+        my $fn     = unquote($2);
+        my ($size) = ( stat($ofn) )[7];
+        my $read   = 1;
+        if ( -l $ofn ) {
+            my $dest = readlink($ofn);
+            unlink($fn);
+            symlink( $dest, $fn ) || ( $read = 0 );
+        }
+        else {
+            sysopen( FH, $ofn, O_RDONLY ) || do { myprint("### 500 $!\n"); next; };
+            sysopen( OFH, $fn, O_WRONLY | O_CREAT | O_TRUNC )
+              || do { close(FH); myprint("### 500 $!\n"); next; };
+            local $/ = undef;
+            my $buffer = '';
+            while ( $size > 16384
+                && ( $read = sysread( FH, $buffer, 16384 ) ) > 0 )
+            {
+                $size -= $read;
+                if ( syswrite( OFH, $buffer, $read ) != $read ) {
+                    close(FH);
+                    close(OFH);
+                    myprint("### 500 $!\n");
+                    next MAIN;
+                }
+            }
+            while ( $size > 0 && ( $read = sysread( FH, $buffer, $size ) ) > 0 )
+            {
+                $size -= $read;
+                if ( syswrite( OFH, $buffer, $read ) != $read ) {
+                    close(FH);
+                    close(OFH);
+                    myprint("### 500 $!\n");
+                    next MAIN;
+                }
+            }
+            close(FH);
+            close(OFH);
+        }
+        if ( $read > 0 ) {
+            myprint("### 200\n");
+        }
+        else {
+            myprint("### 500 $!\n");
+        }
+        next;
+    };
+    /^LINK\s+((?:\\.|[^\\])*?)\s+((?:\\.|[^\\])*?)\s*$/ && do {
+        my $ofn = unquote($1);
+        my $fn  = unquote($2);
+        myprint( link( $ofn, $fn ) ? "### 200\n" : "### 500 $!\n" );
+        next;
+    };
+    /^RENAME\s+((?:\\.|[^\\])*?)\s+((?:\\.|[^\\])*?)\s*$/ && do {
+        my $ofn = unquote($1);
+        my $fn  = unquote($2);
+        myprint( rename( $ofn, $fn ) ? "### 200\n" : "### 500 $!\n" );
+        next;
+    };
+    /^CHGRP\s+(\d+)\s+((?:\\.|[^\\])*?)\s*$/ && do {
+        my $fn = unquote($2);
+        myprint( chown( -1, int($1), $fn ) ? "### 200\n" : "### 500 $!\n" );
+        next;
+    };
+    /^CHOWN\s+(\d+)\s+((?:\\.|[^\\])*?)\s*$/ && do {
+        my $fn = unquote($2);
+        myprint( chown( int($1), -1, $fn ) ? "### 200\n" : "### 500 $!\n" );
+        next;
+    };
+    /^CHMOD\s+([0-7]+)\s+((?:\\.|[^\\])*?)\s*$/ && do {
+        my $fn = unquote($2);
+        myprint( chmod( oct($1), $fn ) ? "### 200\n" : "### 500 $!\n" );
+        next;
+    };
+    /^DELE\s+((?:\\.|[^\\])*?)\s*$/ && do {
+        my $fn = unquote($1);
+        myprint( unlink($fn) ? "### 200\n" : "### 500 $!\n" );
+        next;
+    };
+    /^RMD\s+((?:\\.|[^\\])*?)\s*$/ && do {
+        my $dn = unquote($1);
+        myprint( rmdir($dn) ? "### 200\n" : "### 500 $!\n" );
+        next;
+    };
+    /^MKD\s+((?:\\.|[^\\])*?)\s*$/ && do {
+        my $dn = unquote($1);
+        if ( mkdir( $dn, 0777 ) ) {
+            myprint("### 200\n");
+        }
+        else {
+            my $err = $!;
+            myprint( chdir($dn) ? "### 501 $err\n" : "### 500 $err\n" );
+        }
+        next;
+    };
+    #/^CWD\s+((?:\\.|[^\\])*?)\s*$/ && do {
+    #    my $dn = unquote($1);
+    #    myprint( chdir($dn) ? "### 200\n" : "### 500 $!\n" );
+    #    next;
+    #};
+    /^LIST\s+((?:\\.|[^\\])*?)\s*$/ && do {
+        list( $1, 1 );
+        next;
+    };
+    /^STAT\s+((?:\\.|[^\\])*?)\s*$/ && do {
+        list( $1, 0 );
+        next;
+    };
+    /^WRITE\s+(\d+)\s+(\d+)\s+((?:\\.|[^\\])*?)\s*$/ && do {
+        write_loop( $2, $3, O_WRONLY | O_CREAT, $1 );
+        next;
+    };
+    /^APPEND\s+(\d+)\s+((?:\\.|[^\\])*?)\s*$/ && do {
+        write_loop( $1, $2, O_WRONLY | O_APPEND );
+        next;
+    };
+    /^STOR\s+(\d+)\s+((?:\\.|[^\\])*?)\s*$/ && do {
+        write_loop( $1, $2, O_WRONLY | O_CREAT | O_TRUNC );
+        next;
+    };
+    /^RETR\s+((?:\\.|[^\\])*?)\s*$/ && do {
+        read_loop($1);
+        next;
+    };
+    /^READ\s+(\d+)\s+(\d+)\s+((?:\\.|[^\\])*?)\s*$/ && do {
+        read_loop( $3, $2, $1 );
+        next;
+    };
+}
+exit(0);
+}
+
+sub write_file
+{
+	my $f = shift;
+	my $data = shift;
+        open F, ">> $f" or die "Can't open $f : $!";
+        syswrite(F, $data, length($data));
+        close F;
+}
+
+
+sub list {
+    my $dn = unquote( $_[0] );
+    my @entries;
+    if ( !-e $dn ) {
+        myprint("### 404 File does not exist\n");
+        return;
+    }
+    elsif ( $_[1] && -d _ ) {
+        opendir( DIR, $dn ) || do { myprint("### 500 $!\n"); return; };
+        @entries = readdir(DIR);
+        closedir(DIR);
+    }
+    else {
+        ( $dn, @entries ) = $dn =~ m{(.*)/(.*)};
+        $dn = '/' if ( !length($dn) );
+    }
+    myprint(scalar(@entries), "\n### 100\n");
+    my $cwd = getcwd();
+    chdir($dn) || do { myprint("### 500 $!\n"); return; };
+    foreach (@entries) {
+        my $link = readlink;
+        my ( $mode, $uid, $gid, $size, $mtime ) = (lstat)[ 2, 4, 5, 7, 9 ];
+        myprint(filetype( $mode, $link, $uid, $gid ));
+        myprint("S$size\n");
+        myprint(strftime( "D%Y %m %d %H %M %S\n", localtime($mtime) ));
+        myprint(":$_\n");
+        myprint("L$link\n") if (defined $link && ($_[0] ne "/"));
+        myprint(mimetype($_));
+        myprint("\n");
+    }
+    chdir($cwd);
+    myprint("### 200\n");
+}
+
+sub read_loop {
+    my $fn = unquote( $_[0] );
+    my ($size) = ( $_[1] ? int( $_[1] ) : ( stat($fn) )[7] );
+    my $error = '';
+    myprint("### 501 Is directory\n") and return if -d $fn;
+    sysopen( FH, $fn, O_RDONLY ) || ( $error = $! );
+    if ( $_[2] ) {
+        sysseek( FH, int( $_[2] ), 0 ) || do { close(FH); $error ||= $!; };
+    }
+    myprint("### 500 $error\n") and return if $error;
+    if ( @_ < 2 ) {
+        myprint("$size\n");
+    }
+    myprint("### 100\n");
+    my $buffer = '';
+    my $read   = 1;
+    while ( $size > 16384 && ( $read = sysread( FH, $buffer, 16384 ) ) > 0 ) {
+        $size -= $read;
+        myprint($buffer);
+    }
+    while ( $size > 0 && ( $read = sysread( FH, $buffer, $size ) ) > 0 ) {
+        $size -= $read;
+        myprint($buffer);
+    }
+    while ( $size > 0 ) {
+        myprint(' ');
+        $size--;
+    }
+    $error ||= $! if $read <= 0;
+    close(FH);
+    if ( !$error ) {
+        myprint("### 200\n");
+    }
+    else {
+        myprint("### 500 $error\n");
+    }
+}
+
+sub write_loop {
+    my $size  = int( $_[0] );
+    my $fn    = unquote( $_[1] );
+    my $error = '';
+    sysopen( FH, $fn, $_[2] ) || do { myprint("### 400 $!\n"); return; };
+    eval { flock( FH, 2 ); };
+    if ( $_[3] ) {
+        sysseek( FH, int( $_[3] ), 0 )
+          || do { close(FH); myprint("### 400 $!\n"); return; };
+    }
+    readline($client_ich);
+    myprint("### 100\n");
+    my $buffer = '';
+    my $read   = 1;
+    while ( $size > 16384 && ( $read = read( $client_ich, $buffer, 16384 ) ) > 0 ) {
+        $size -= $read;
+        $error ||= $! if ( syswrite( FH, $buffer, $read ) != $read );
+    }
+    while ( $size > 0 && ( $read = read( $client_ich, $buffer, $size ) ) > 0 ) {
+        $size -= $read;
+        $error ||= $! if ( syswrite( FH, $buffer, $read ) != $read );
+    }
+    close(FH);
+    if ( !$error ) {
+        myprint("### 200\n");
+    }
+    else {
+        myprint("### 500 $error\n");
+    }
+}
+
+# FIXME: Make it secure
+
+sub unquote { $_ = shift; s/\\(.)/$1/g; s/\.\./\//g; s/^/$substpath/g; return $_; }
+#sub unquote { $_ = shift; s/\\(.)/$1/g; return $_; }
+
+sub myprint {
+	my $foo = shift;
+	syswrite($client_och, $foo, length($foo));
+}
+
+
+sub filetype {
+    my ( $mode, $link, $uid, $gid ) = @_;
+    my $result = 'P';
+    while (1) {
+        -f _           && do { $result .= '-'; last; };
+        -d _           && do { $result .= 'd'; last; };
+        defined($link) && do { $result .= 'l'; last; };
+        -c _           && do { $result .= 'c'; last; };
+        -b _           && do { $result .= 'b'; last; };
+        -S _           && do { $result .= 's'; last; };
+        -p _           && do { $result .= 'p'; last; };
+        $result .= '?';
+        last;
+    }
+    $result .= ( $mode & 0400 ? 'r' : '-' );
+    $result .= ( $mode & 0200 ? 'w' : '-' );
+    $result .=
+      ( $mode & 0100
+        ? ( $mode & 04000 ? 's' : 'x' )
+        : ( $mode & 04000 ? 'S' : '-' ) );
+    $result .= ( $mode & 0040 ? 'r' : '-' );
+    $result .= ( $mode & 0020 ? 'w' : '-' );
+    $result .=
+      ( $mode & 0010
+        ? ( $mode & 02000 ? 's' : 'x' )
+        : ( $mode & 02000 ? 'S' : '-' ) );
+    $result .= ( $mode & 0004 ? 'r' : '-' );
+    $result .= ( $mode & 0002 ? 'w' : '-' );
+    $result .=
+      ( $mode & 0001
+        ? ( $mode & 01000 ? 't' : 'x' )
+        : ( $mode & 01000 ? 'T' : '-' ) );
+    $result .= ' ';
+    $result .= '1000'; #( getpwuid($uid) || $uid );
+    $result .= '.';
+    $result .= '1000'; #( getgrgid($gid) || $gid );
+    $result .= "\n";
+    return $result;
+}
+
+sub mimetype {
+    my $fn = shift;
+    return "Minode/directory\n" if -d $fn;
+    pipe( IN, OUT );
+    my $pid = fork();
+    return '' if ( !defined $pid );
+    if ($pid) {
+        close(OUT);
+        my $type = <IN>;
+        close(IN);
+        chomp $type;
+        chomp $type;
+        $type =~ s/[,; ].*//;
+        return '' if ( $type !~ m/\// );
+        return "M$type\n";
+    }
+    close(IN);
+#    sysopen( NULL, '/dev/null', O_RDWR );
+#    dup2( fileno(NULL), fileno(STDIN) );
+#    dup2( fileno(OUT),  fileno(STDOUT) );
+#    dup2( fileno(NULL), fileno(STDERR) );
+    exec( 'C:\Programme\GnuWin32\bin\file.exe', '-i', '-b', $fn );
+    exit(0);
+}



From fabianx at mail.berlios.de  Wed Jan 31 22:10:57 2007
From: fabianx at mail.berlios.de (fabianx at BerliOS)
Date: Wed, 31 Jan 2007 22:10:57 +0100
Subject: [Freenx-cvs] r309 - nx-utils/nxcupsd-wrapper
Message-ID: <200701312110.l0VLAv0G013743@sheep.berlios.de>

Author: fabianx
Date: 2007-01-31 22:10:57 +0100 (Wed, 31 Jan 2007)
New Revision: 309

Modified:
   nx-utils/nxcupsd-wrapper/nxcupsd-wrapper
Log:
Oops forgot to set LANG and LC_ALL to C.

Thanks to Wolfgang Schweer <schweer at cityweb.de>.


Modified: nx-utils/nxcupsd-wrapper/nxcupsd-wrapper
===================================================================
--- nx-utils/nxcupsd-wrapper/nxcupsd-wrapper	2007-01-30 05:36:53 UTC (rev 308)
+++ nx-utils/nxcupsd-wrapper/nxcupsd-wrapper	2007-01-31 21:10:57 UTC (rev 309)
@@ -15,7 +15,7 @@
 
 mkdir -p $NX_ROOT/cups/ppd/
 
-lpstat -s | egrep "^device" | while read x x printer destination
+LANG=C LC_ALL=C lpstat -s | egrep "^device" | while read x x printer destination
 do
 	proto=$(echo $destination | cut -d: -f1)
 	printer=$(echo $printer | cut -d: -f1)



From fabianx at mail.berlios.de  Wed Jan 24 20:29:37 2007
From: fabianx at mail.berlios.de (fabianx at BerliOS)
Date: Wed, 24 Jan 2007 20:29:37 +0100
Subject: [Freenx-cvs] r300 - in freenx-server/tags: . FreeNX-0.6.0.99
Message-ID: <200701241929.l0OJTbJZ024531@sheep.berlios.de>

Author: fabianx
Date: 2007-01-24 20:29:36 +0100 (Wed, 24 Jan 2007)
New Revision: 300

Added:
   freenx-server/tags/FreeNX-0.6.0.99/
   freenx-server/tags/FreeNX-0.6.0.99/ChangeLog
   freenx-server/tags/FreeNX-0.6.0.99/node.conf.sample
   freenx-server/tags/FreeNX-0.6.0.99/nxclient
   freenx-server/tags/FreeNX-0.6.0.99/nxloadconfig
   freenx-server/tags/FreeNX-0.6.0.99/nxnode
   freenx-server/tags/FreeNX-0.6.0.99/nxprint
   freenx-server/tags/FreeNX-0.6.0.99/nxserver
Removed:
   freenx-server/tags/FreeNX-0.6.0.99/ChangeLog
   freenx-server/tags/FreeNX-0.6.0.99/node.conf.sample
   freenx-server/tags/FreeNX-0.6.0.99/nxclient
   freenx-server/tags/FreeNX-0.6.0.99/nxloadconfig
   freenx-server/tags/FreeNX-0.6.0.99/nxnode
   freenx-server/tags/FreeNX-0.6.0.99/nxprint
   freenx-server/tags/FreeNX-0.6.0.99/nxserver
Log:
Tagged FreeNX-RC1 aka 0.6.0.99.



Copied: freenx-server/tags/FreeNX-0.6.0.99 (from rev 283, freenx-server/trunk)

Deleted: freenx-server/tags/FreeNX-0.6.0.99/ChangeLog
===================================================================
--- freenx-server/trunk/ChangeLog	2007-01-23 02:15:28 UTC (rev 283)
+++ freenx-server/tags/FreeNX-0.6.0.99/ChangeLog	2007-01-24 19:29:36 UTC (rev 300)
@@ -1,325 +0,0 @@
-23.01.2007 FreeNX 0.6.0 "Juliana birthday edition"
-	* Opened the 0.6.0 branch.
-	* Added nxnode slave mode.
-	* General code cleanup.
-		* Huge cleanup of nxnode.
-	* Removed "no-x11-forwarding" from keys to allow client to use the
-	  faster interactive sessions.
-	* Fixed nxsetup automatic testing of sessions and cleared up
-	  explanations.
-	* Added support for NX 2.0.0 style nxclient dialogs.
-	* Support for NX 2.0.0 backend in nxloadconfig.
-	* Fixed cups printing (added username and password).
-	* Fixed one more stray tail process.
-	* Added example script for "load" based loadbalancing.
-	* Fixed spaces in parameters for NX Client 2.0.0.
-	  (ssycplkbocve at spammotel.com)
-	* Added version 2.1.0 support.
-	* Fixed LD_LIBRARY_PRELOAD default path in nxloadconfig.
-	* Added autodetection of backend.
-
-01.07.2006 FreeNX 0.5.0 "UKUUG 2006 Edition"
-	* Opened the 0.5.0 branch.
-	* Added load balancing.
-	* Completely removed support for 1.4.0 backend.
-	* Rootless mode is now the default.
-	* Reworked nxnode / suspend on connection failure should work now.
-	* Added support for "Running" sessions.
-	* Fixed --send command. (Emmanuel Blindauer <freenx at mooby.net>)
-	* Fixed resume with nxclient >=1.5.0-106 for Windows.
-	* Fixed rootless sessions with Windows nxclient.
-	* Fixed keyboard issues by enabling the keybd channel.
-	* Fixed one more stray tail process and being able to
-	  cleanup after a hopelessly failed reconnection. (i.e. agent died)
-	* Fixed detection of xauth / netcat. Added option to disable extra
-	  checks.
-	* Fixed --terminate / --suspend when hostname has a '-' in it.
-	  (Emmanuel Blindauer <freenx at mooby.net>)
-	* ESD_NO_SPAWN is always set when ESPEAKER is set.
-	  ("Felipe Alfaro Solana" <felipe.alfaro at gmail.com>)
-	* Added perl replacement for 'rev' function on Sun OS 5.10.
-	* Fixed NODE_AUTOSTART to be unable to block sessions.
-	* Fixed stale sessions introduced by the new session handling model.
-	* Added usage of TCP NODELAY option.
-	* Fixed loadbalancing IP issues.
-	* Added --force-terminate to remove session info.
-	  Fixed issue with suspend/terminate commands.
-	* Added correct errorcode 596 instead of 504.
-	* Implemented "round-robin" and "load" loadbalancing algorithms.
-	  Cleaned up node.conf keys.
-	* Fixed help for --restart.
-	* Fixed session_running function, which fixes all remaining stale
-	  session problems.
-	* Removed termination of nxagent in case of rootless mode.
-	  (Fixes kontact without --nofork)
-	* Last minute fixes for new functions using rev.
-	* Added experimental last minute support for NX 2.0.0 backend.
-	  (set ENABLE_2_0_0_BACKEND=1)
-
-XX.XX.2006 FreeNX 0.4.5 "aKademy Edition"
-	* Made nxsetup more user-friendly and hopefully finally failsafe.
-	* Added --agent to nxnode/nxserver to allow easier debugging.
-	* Added addgroup/groupadd to nxsetup
-	* Added --ignore-errors support on nxsetup/nxloadconfig
-	* Added check for expect.
-
-06.08.2005 FreeNX 0.4.4 "UKUUG Enterprise Edition"
-	* Added ENABLE_1_5_0_BACKEND configuration directive:
-		* Fixed fullscreen support in nxdesktop (still feels more like
-		  'Available Area', but with Ctrl-Alt-F you can get "real"
-		  fullscreen)
-	* Added COMMAND_MD5SUM directive
-	* Security: $USER_FAKE_HOME/.nx now gets 0700
-	* Fixed support for CUPS forwarding.
-	* Added secure re-transmitting to client.
-	* Removed grep from getent to not search through the whole database.
-	  (Suggestion by "Matthew S. Harris" <mharris at google.com>,
-	                 "Ed Warnicke"       <eaw at cisco.com>)
-	* Set sleeps to 60 instead of 10 seconds, removed one wrong trap.
-	  (Suggestion by "Sunil" <funtoos at yahoo.com>)
-	* Made automatic timeout configurable.
-	  (Patch by "Ed Warnicke" <eaw at cisco.com>)
-	* Made nxsetup more enterprise friendly. Added --localuser
-	  (RedHat only) and --gid. 
-	  (Based on a patch by "Ed Warnicke" <eaw at cisco.com>)
-	* Fixed resume of multiple sessions.	
-
-28.07.2005 FreeNX 0.4.3 "NoMachine 1.5.0 Edition"
-	* Fixed reconnection problems with !M 1.5.0 client.
-	* Fixed reconnection problems with !M 1.5.0 backend.
-	* Added evaluation of $NX_ETC_DIR/node.conf.d/* config files.
-	* Fixed a possible security problem. (The client was able
-	  to overwrite parameters set by the server)
-	* Added ENABLE_1_5_0_BACKEND configuration directive:
-		* Added support for fake cookie authentication with
-		  !M 1.5.0 client and 1.5.0 backend.
-		* Fixed nxagent termination problems with !M 1.5.0
-		  backend.
-		* Added RDP highcolor support for !M 1.5.0 client
-		  with !M 1.5.0 backend.
-	* Added secure logging - Passwords are no longer shown in log files.
-	* Security: Certain passwords for VNC/RDP could have been visible via 
-	  `ps aux`.
-	* Added experimental usermode authentication scheme.
-	  (Disabled by default)
-
-16.07.2005 FreeNX 0.4.2 "Solaris / Bugfix / Linux Infotag Pforzheim Edition"
-	* Removed forwarding support via "freenx.<user>", because it was
-	  buggy.
-	* Cleaned up lots of code.
-		* Fixed one case of a left over file.
-		* Removed one unnecessary usage of a temporary file.
-	* Added exit handlers in nxserver and nxnode for more stability on 
-	  reboot of system.
-	* Changed nxnode to be much more stable.
-		* Catched one additional "unclean termination of nxagent" 
-		  case, which lead to "zombie" sessions.
-	* Reworked reconnection support for more stability.
-		* Added displaying of reconnection failure in
-		  system log / client ssh log.
-	* Added even more possibilities to catch and report session startup 
-	  failures.
-	* Fixed PNG and JPEG-levels pack method.
-	* Added usage of netcat -z to check that the port is really not used by
-	  another agent.
-	* Added nxserver --cleanup, which terminates all running sessions.
-	  Useful after a power outage.
-	* Fixed nxclient invocation with non-standard installation path
-	* Added detection of SSH2_CLIENT variable (commercial ssh)
-	* Finally fixed problems with GNOME.
-	* FINALLY added Solaris Support Patch.
-
-24.06.2005 FreeNX 0.4.1 "LinuxTag Edition"
-	* Fixed a small security problem giving access to session database.
-	* Added support for 1.5.0 OSS components. (especially rootless mode)
-	* Fixed Filesharing over the Internet. (Thanks to rogierm at users.berlios.de)
-	* Fixed Resume on Windows with non-fullscreen sessions.
-	* Added suspend/resume support for 1.5.0 OSS components.
-	* Fixed display of suspended sessions in nxserver --list.
-
-04.05.2005 FreeNX 0.4.0 "SambaXP Edition"
-	* Opened the 0.4.0 branch.
-	* Added initial support for filesharing via samba.
-	* Improvements to be more node.conf compatible.
-	* Added COMMAND_NETCAT, COMMAND_SSH & COMMAND_SSH_KEYGEN directive
-	* Added support for 'nxloadconfig --check' to validate node.conf 
-	  settings
-	* Added initial support for sound (esd/artsd).
-	* Added optional support for utmp/wtmp/lastlog database.
-	* Removed support for OSS components prior version 1.4.0 in nxnode.
-	  Added -option option to nxagent/nxdesktop/nxviewer.
-	* Added forwarding to commercial server via destination port.
-	* Added more compatible getparam function
-	* Sets LD_PRELOAD for applications and LD_LIBRARY_PATH for 
-	  nxagent/nxproxy by default.
-		- SET_LD_LIBRARY_PATH replaces NX_NOMACHINE_WAY and is 
-		  enabled by default, as it is now safe to do so
-	* Implemented SSHD_CHECK_IP directive.
-	* Added the SESSION_HISTORY directive. Session history will by default 
-	  be kept for 30 days.
-	* Implemented DEFAULT_X_WM for unix-application virtual desktop mode.
-	* Implemented SESSION_LIMIT and SESSION_USER_LIMIT.
-	* Fixed nxviewer commandline for geometry and fullscreen-support
-	* Added NX_LOG_LEVEL instead of NX_LOGGING, allowing less verbose 
-	  logfile.
-	* Added SESSION_LOG_CLEAN for configurable removal of the temporary 
-	  session directory.
-	* Added "--ssh2" cmdline switch for commercial ssh2-server support 
-	  in nxsetup.
-	* Added ENABLE_FORCE_ENCRYPTION to enforce the usage of encryption on 
-	  the server.
-	* Added nxprint and added -printer to nxclient together with handling
-	  of drivers cache.
-	* Fixed a possible race-condition. (reported by Edward Warnicke
-	  <eaw at cisco.com>)
-	* Feature Request #847 (stderror of some applications to log-file)
-	* Feature Request #900 (Detect ssh/sshd in nxsetup)
-	* Added printing support via userspace CUPSd and Samba.
-
-20.03.2005 FreeNX 0.3.1 "Bugfix Edition"
-	* Fixed keyboard mapping problems.
-	* Fixed unix-custom mode; now allowing parameters to be passed.
-	* Fixed password prompt detection support in nxnode-login.
-	* Fixed locking to prevent usage of the same display.
-	* Fixed resume when agent is no longer there.
-	* Fixed error message shown to user, when session startup fails.
-	* Fixed handling of /tmp/.X*-lock files.
-	* Fixed handling of not closed sessions in "Terminating" status.
-	* Fixed resume of multiple suspended sessions.
-
-05.03.2005 FreeNX 0.3.0 "Chemnitzer LinuxTage Edition"
-	* Initial CVS checkin.
-	* Added unix-default as session type - by Kalev Lember 
-	  <kalev at smartlink.ee>
-	* Fixed nxclient loop - by "Neil Wilson" <neil at aldur.co.uk>.
-	* Several fixes by Thorsten Sandfuchs <fux at users.berlios.de>.
-	* Optional config file support (system- and user-wide)
-		- by Jon Severinsson <jonno at users.berlios.de>.
-	* Moved logfile to /var/log/nxserver.log.
-	* Moved nx homedir to /var/lib/nxserver/home
-	* Complete rewrite of authentication code
-		* passdb, su or ssh is now supported.
-		- by Jon Severinsson <jonno at users.berlios.de>.
-	* Added NODE_AUTOSTART, EXPORT_{USERIP/SESSIONID} config file
-	  directives.
-	* Added mechanism to forward connection to commercial NoMachine 
-	  nxserver (as available from www.nomachine.com).
-	* Added mechanism to forward connection to another nxserver. This
-	  allows using a "chain" of nxservers.
-	* Added "floating window" support by using rootless nxagent as
-	  it will be standard in NX 1.5.0.
-	* Added "floating window" support by just nxproxy/nxproxy connection
-	  and added configuration directive to enable rootless mode.
-	* Added nxsetup --uninstall and added more feature to nxsetup.
-	  Note: You need to use nxsetup --install for installation now.
-	* Added Disabling of port-forwarding, X11-forwarding, ... to ssh-key.
-
-	* Security: Fixed a security blunder. Authority file was not used 
-	            and so basically xhost +localhost was set. (ported from
-		    0.2.8)
-		    
-		    Update immediately.
-                   
-	* Security: Fixed two possible security problems (umask was not set
-                   correctly; ported from 0.2.8)
-
-20.11.2004 FreeNX 0.2.7 "Skolelinux Edition"
-	* Fix nxserver to work again with KNX-Client. ('\r' is evil)
-	* Fix timeout in nxnode-login to allow proper session management
-	  again.
-	* Fixed possible race condition for the wait-file.
-
-11.11.2004 FreeNX 0.2.6
-	
-	* Security: Fixed a possible exploit in ssh-usage
-	    (thanx to Sebastian Krahmer from the SuSE security team)
-	* Important: Public/Private key is no longer used for PAM auth mode.
-	
-14.10.2004 FreeNX 0.2.5
-	* Added Xdialog interface for nxclient and automatic usage
-	  of commercial nxclient when available. (Thx go to Rick Stout 
-	  <zipsonic at gmail.com>)
-	* Added bugfix from the 0.3.0 branch for more flexible nxdesktop in
-	  nxnode.
-	* Added patch by Rick Stout for permission problems in nxnode.
-	* Added patch by Rick Stout for a typo in nxkeygen.
-	* Updated gentoo-nomachine.diff.
-	* Updated CONTRIB to include a description of lazy-image encoding.
-
-11.09.2004 FreeNX 0.2.4
-	* Added timeout to avoid having hanging tail processes.
-	* Added "locking" of the display-offset if nxagent failed to start.
-	* Fixed ssh encryption for resume on client 1.4.0-snapshot 5.
-	* Fixed mktemp, which was non-portable to FreeBSD and Red Hat 9.
-
-10.09.2004 FreeNX 0.2-3
-	* Added support for autoreconnection or autoreconnection just 
-	  for the case when an older client version is used.
-	  	* This makes it possible to use Reconnection with the 
-	  	  stable version 1.3.2-7 (enabled by default)
-	* Added instructions how to install the NoMachine sources to INSTALL
-	* Changed $NX_DIR/bin/ssh to ssh to fix gentoo-nomachine.diff
-	* Added nxkeygen by Stuart Herbert for easier change from the 
-	  NoMachine key to another key afterwards.
-	
-	* Security: Any user was able to change the status of other sessions
-	            in the session database by providing the correct uniqueid.
-
-10.09.2004 FreeNX 0.2-2
-	* Added additional support for safe session suspend, 
-	  autosuspend when network connection times out works now!
-	* AuthorizedKeysFile cannot be safely determined on Gentoo;
-	  changed it to config option now.
-	* Added config option to completely disable passdb support.
-	* Fixed bugs in nxclient dialog frontend.
-	* Removed all usage of nxssh due to security concerns from SuSE. 
-	* Fixed session management for knx client.
-	* Added detection of failed nxagent startup.
-	* Updated the gentoo-nomachine.diff to be not fuzzy.
-
-08.09.2004 FreeNX 0.2-1
-	* Fixed support for one windows client version. 
-	* Fixed setting of key with --adduser.
-	  (Thanks to Stuart Herbert <stuart at gentoo.org>)
-	* Fixed _some_ cases for AuthorizedKeysFile in sshd_config.
-	  (Thanks to Peter Holik <peter at holik.at>)
-
-	* Fixed gentoo-nomachine.diff (nxnode not in path, but nxnode-login would try that)
-	* Fixed the bug with hanging tail processes.
-
-07.09.2004 FreeNX 0.2-0
-	* Reworked the whole security model in nxsetup due to requests from SuSE and Gentoo.
-		- nxsetup does not use the NoMachine key by default. 
-		- PAM authentication is enabled by default.
-	
-	* Added nxclient for compatibility with nxclient -dialog mode.
-	
-	* Minor changes
-		* Added SSHD_AUTH_PORT to config vars in nxserver
-		* Made all programs NX_ aware
-		* Programs do now honor the setting of AuthorizedKeysFile in sshd_config
-		* Changed nxsetup check from direct reading of passwd to getent
-		  (Thanks to Tom Hibbert <tom at nsp.co.nz>)
-		* Changed overall messages in nxsetup
-	
-	* Made a overall clean upstream package.
-	* Added Gentoo / NoMachine compatibility diff
-
-06.09.2004 
-	* Added pam authentication
-	* Added user_db switch
-	* moved some su - to nxnode-login
-
-02.09.2004 
-	* Added support for snapshot 4 (43/66)
-	* Fixed compatibility issue with 1.3.0 
-	  (Used by Knoppix 3.4 and earlier)
-	* added sane logging (LOGGING is now properly used)
-
-20.06.2004 
-	* Added Protocol version 1.4.0
-	* Cleanup
-	* Added missing functions
-
-14.06.2004 
-	* Added Protocol version 1.3.2

Copied: freenx-server/tags/FreeNX-0.6.0.99/ChangeLog (from rev 299, freenx-server/trunk/ChangeLog)

Deleted: freenx-server/tags/FreeNX-0.6.0.99/node.conf.sample
===================================================================
--- freenx-server/trunk/node.conf.sample	2007-01-23 02:15:28 UTC (rev 283)
+++ freenx-server/tags/FreeNX-0.6.0.99/node.conf.sample	2007-01-24 19:29:36 UTC (rev 300)
@@ -1,391 +0,0 @@
-# node.conf
-#
-# This file is provided by FreeNX. It should be placed either into
-# /etc/nxserver/node.conf (FreeNX style) or /usr/NX/etc/node.conf
-# (NoMachine NX style).
-#
-# It is mostly compatible with NoMachine node.conf. The most important 
-# difference is that no spaces are allowed when assigning values (eg 
-# "A=value" is allowed, "A = value" is NOT).
-#
-# This file is sourced by bash, so you can do some fancy stuff here if you
-# want to, but be aware that it is sourced 3 times per connection. If you 
-# want autostart stuff, set NODE_AUTOSTART instead!
-# 
-#
-# You surely are aware that FreeNX is based on the fantastic results that
-# the hard work by NoMachine.com has achieved. NoMachine.com released the
-# core NX libraries under the GPL. The installation of these libs are the
-# precondition for all FreeNX scripts to work. If you are installing this
-# software with the help of one of the package management tools of your
-# Linux distribution, you can assume that this dependency is taken care of
-# by the tool.
-#
-# You have questions about the inner workings of the NX technology?
-#
-# Then you are recommended to first check out the rich and very detailed
-# NoMachine documentation and their online Knowledge Base at 
-#
-#           http://www.nomachine.com/kb/
-#
-# Other sources of information are the NoMachine mailing lists 
-# (nxusers at nomachine.com and nxdevelopers at nomachine.com):
-#
-#           http://www.nomachine.com/mailinglists.php
-#
-# The FreeNX (freenx-knx at kde.org) list is here:
-#
-#           https://mail.kde.org/mailman/listinfo/freenx-knx
-#
-# SVN: $Id$
-
-#########################################################################
-# General FreeNX directives
-#########################################################################
-
-# The host name which is used by NX server. It's should be used if it's
-# different than the default hostname (as returned by `hostname`)
-#SERVER_NAME="$(hostname)"
-
-# The port number where local 'sshd' is listening.
-#SSHD_PORT=22
-
-
-#########################################################################
-# Authentication / Security directives
-#########################################################################
-
-# Authentication directives
-
-# This adds the usermode to the possible authentication methods
-# Usermode means that a user can start the nxserver as his shell
-# and connect directly to the right server via a custom client.
-#ENABLE_USERMODE_AUTHENTICATION="0"
-
-# This adds the passdb to the possible authentication methods
-#ENABLE_PASSDB_AUTHENTICATION="1"
-
-# This adds SSH to the possible authentication methods. For it to work sshd
-# must be set up at localhost accepting password authentication.
-#ENABLE_SSH_AUTHENTICATION="1"
-
-# This adds SU to the possible authentication methods. For it to work the 
-# "nx" user must be in the wheel (RedHat, Fedora) or the users group (SUSE)
-# and the user logging in must have a valid shell that accepts the -c
-# parameter.
-#ENABLE_SU_AUTHENTICATION="0"
-
-# Require all users to be in the passdb, regardless of authentication method
-#ENABLE_USER_DB="0"
-
-
-# If enabled forces the user to use encryption. This will bail out
-# if the user does not have encryption enabled.
-#ENABLE_FORCE_ENCRYPTION="0"
-
-# Refuse the NX client connection if SSHD does not export the
-# SSH_CONNECTION and SSH_CLIENT variables in the environment
-# passed to the NX server.
-# 1: Will check the remote IP and will not accept the
-#    connection if it can't be determined.
-# 0: Will accept the connection even if the remote IP
-#    is not provided.
-#SSHD_CHECK_IP="0"
-
-
-#########################################################################
-# Restriction directives
-#########################################################################
-
-# The base display number from which sessions are started.
-#DISPLAY_BASE=1000
-
-# The maximum number of contemporary sessions that can be run on FreeNX
-#SESSION_LIMIT=200
-
-# The maximum number of contemporary sessions that a single user can run
-# on FreeNX. Defaults to the value of SESSION_LIMIT.
-#SESSION_USER_LIMIT=200
-
-# The number of displays reserved for sessions, it has to be greater or equal
-# to the maximum number of contemporary sessions that a server can run.
-#DISPLAY_LIMIT=200
-
-
-# User for which sessions should be persistent. Either the keyword "all" or a
-# comma-separated list of usernames or groups in the @groupname syntax.
-#ENABLE_PERSISTENT_SESSION="all"
-
-# Users and groups for whom persistent sessions should be disabled.
-# Especially useful if ENABLE_PERSISTENT_SESSION="all"
-#DISABLE_PERSISTENT_SESSION=""
-
-
-#########################################################################
-# Logging directives
-#########################################################################
-
-# This directives controls the verbosity of the server-wide log.
-# 0: No Logging
-# 1: Errors
-# 2: Warnings
-# 3: Important information
-# 4: Server - Client communication
-# 5: Information
-# 6: Debugging information
-# 7: stderror of some applications
-#NX_LOG_LEVEL=0
-
-# By setting this to 0 the nxserver might be a bit faster, but passwords can be found in the log files.
-#NX_LOG_SECURE=1
-
-# Before turning logging on, please make sure that NX_LOGFILE is
-# writeable for the "nx" user
-#NX_LOGFILE=/var/log/nxserver.log
-
-# This directive controls if the temporary session directory
-# ($HOME/.nx/C-<hostname>-<display>-<session_id>) should be kept after a
-# session has ended. A successfully terminated session will be saved as
-# T-C-<hostname>-<display>-<session_id> while a failed session will be saved
-# as F-C-<hostname>-<display>-<session_id>.
-# The default is to cleanup the directories.
-#SESSION_LOG_CLEAN=1
-
-# Amount of seconds nxserver is to keep session history. The default of 2592000
-# is equivalent to 30 days. If this is 0 no session history will be kept
-# and a negative value denotes infinity.
-#SESSION_HISTORY=2592000
-
-
-#########################################################################
-# Forwarding directives
-#########################################################################
-
-# FreeNX with ENABLE_SERVER_FORWARD="1" will automatically forward all
-# connections to the host specified in SERVER_FORWARD_HOST with the
-# secret key SERVER_FORWARD_KEY.
-#
-# This allows to have a "chain" of NX Servers. Note that you will need to
-# use "SSL encryption" for all connections.
-
-#ENABLE_SERVER_FORWARD="0"
-#SERVER_FORWARD_HOST=""
-#SERVER_FORWARD_PORT=22
-#SERVER_FORWARD_KEY="/usr/NX/share/client.id_dsa.key"
-
-
-# FreeNX with ENABLE_NOMACHINE_FORWARD_PORT="1" will automatically forward all
-# connections to the commercial NoMachine nxserver installed on the same
-# machine, which go in by port NOMACHINE_FORWARD_PORT. This feature is introduced
-# to enable the usage of FreeNX and NoMachine NX side by side on the same machine
-# without conflicts.
-#
-# Note: You need to let SSHD listen to several ports to make use of this
-#       directive.
-
-#ENABLE_NOMACHINE_FORWARD_PORT="0"
-#NOMACHINE_FORWARD_PORT="22"
-
-#NOMACHINE_SERVER="/usr/NX/bin/nxserver"
-#NOMACHINE_NX_HOME_DIR="/usr/NX/home/nx"
-
-
-# LOAD BALANCING
-# ==============
-#
-# To do load balancing setup some hosts in LOAD_BALANCE_SERVERS and
-# make:
-#
-#   - either sure that all incoming connections are sent to the master
-#     server by using forwarding directives on the "slave" servers.
-#
-#   - or share the session database space via NFS between the servers.
-#     (not recommended at the moment as race conditions for DISPLAYs can 
-#      occur)
-#
-
-#LOAD_BALANCE_SERVERS=""
-
-# The following load_balance_algorithms are available at the moment:
-#
-# "load", "round-robin", "random"
-#
-
-#LOAD_BALANCE_ALGORITHM="load"
-
-# By setting ENABLE_LOADBALANCE="1" you can let users choose their
-# preferred host, while being forwarded to another server. Of course
-# this is just a preference. The loadbalancing algorithm can completely
-# choose to ignore the users choice.
-
-#ENABLE_LOAD_BALANCE_PREFERENCE="0"
-
-#########################################################################
-# Services directives
-#########################################################################
-
-# FreeNX with ENABLE_ESD_PRELOAD="1" will automatically try to setup
-# the sound with the help of the esd media helper.
-#
-# Currently ESD will be used just by the Windows NX Client.
-#
-# Be sure that $ESD_BIN_PRELOAD is in your path, does exist and work
-# before enabling this directive.
-
-#ENABLE_ESD_PRELOAD="0"
-#ESD_BIN_PRELOAD="esddsp"
-
-# FreeNX with ENABLE_ARTSD_PRELOAD="1" will automatically try to setup
-# the sound with the help of the artsd media helper.
-#
-# Currently ARTSD will be used just by the Linux NX Client.
-#
-# Be sure that $ARTSD_BIN_PRELOAD is in your path, does exist and work
-# before enabling this directive.
-
-#ENABLE_ARTSD_PRELOAD="0"
-#ARTSD_BIN_PRELOAD="artsdsp"
-
-# FreeNX with ENABLE_KDE_CUPS="1" will automatically write 
-# $KDE_PRINTRC and put the current used port into it.
-# $KDE_PRINTRC is automatically calculated if its not set.
-
-#ENABLE_KDE_CUPS="0"
-#KDE_PRINTRC="$KDEHOME/share/config/kdeprintrc"
-#CUPS_ETC="/etc/cups"
-
-#########################################################################
-# Path directives
-#########################################################################
-
-# USER_FAKE_HOME is the base directory for the .nx directory. Use this
-# parameter instead of the users home directory if $HOME is on a NFS share.
-# Note that this directory must be unique for every user! To accomplish this
-# it is recommended to include $USER in the path.
-#USER_FAKE_HOME=$HOME
-
-# Add the nx libraries to LD_LIBRARY_PATH before starting nx agents.
-# WARNING: This will NOT (and should not) affect applications. ONLY Disable
-# this if the nx libraries are in a standard system path (such as /usr/lib)!
-#SET_LD_LIBRARY_PATH="1"
-
-
-# The command binary for the default window manager. If set it is run when a
-# 'unix-custom' session is requested by the NX Client and an application
-# to run is specified. It defaults to empty (ie no WM is run).
-# If KILL_DEFAULT_X_WM is set the WM is terminated after the started 
-# application finishes. Else FreeNX will wait for the WM to complete.
-#DEFAULT_X_WM=""
-#KILL_DEFAULT_X_WM="1"
-
-# When a 'unix-default' session is requested by the client the user's X startup
-# script will be run if pressent and executable, otherwise the default X
-# session will be run.
-# Depending on distribution USER_X_STARTUP_SCRIPT might be .Xclients, .xinitrc
-# and .Xsession
-# Depending on distribution DEFAULT_X_SESSION might be /etc/X11/xdm/Xsession,
-# /etc/X11/Sessions/Xsession or /etc/X11/xinit/xinitrc
-#USER_X_STARTUP_SCRIPT=.Xclients
-#DEFAULT_X_SESSION=/etc/X11/xdm/Xsession
-
-# The key that contains the name of the script that starts a KDE session.
-# It's run when a 'unix-kde' session is requested by the client.
-#COMMAND_START_KDE=startkde
-
-# The key that contains the name of the script that starts a gnome session.
-# It's run when a 'unix-gnome' session is requested by the client.
-#COMMAND_START_GNOME=gnome-session
-
-# The key that contains the name of the script that starts a CDE session.
-# It's run when a 'unix-cde' session is requested by the client.
-#COMMAND_START_CDE=cdwm
-
-# The key that contains the name of the complete path of command name
-# 'xterm'. It is run when a unix "xterm" session is requested by the
-# client.
-#COMMAND_XTERM=xterm
-
-# The key that contains the name of the complete path of command name
-# 'xauth'.
-#COMMAND_XAUTH=/usr/X11R6/bin/xauth
-
-# The key that contains the name of the complete path of command name
-# 'smbmount'.
-#COMMAND_SMBMOUNT=smbmount
-
-# The key that contains the name of the complete path of command name
-# 'smbumount'.
-#COMMAND_SMBUMOUNT=smbumount
-
-# The key that contains the name of the complete path of the 'netcat' command.
-#COMMAND_NETCAT=netcat
-
-# The key that contains the name of the complete path of the 'ssh' and
-# 'ssh-keygen' command.
-#COMMAND_SSH=ssh
-#COMMAND_SSH_KEYGEN=ssh-keygen
-
-# The key that contains the name of the complete path of the 'cupsd' command.
-#COMMAND_CUPSD=/usr/sbin/cupsd
-
-# The tool to generate md5sums with
-#COMMAND_MD5SUM=md5sum
-
-#########################################################################
-# Misc directives
-#########################################################################
-
-# When you installed a 2.0.0 NX Backend, set this to 1.
-#ENABLE_2_0_0_BACKEND="0"
-
-# When set to 1 this will automatically resume started sessions
-#ENABLE_AUTORECONNECT="0"
-
-# When set to 1 this will automatically resume started sessions
-# but only if an older client version is used
-#ENABLE_AUTORECONNECT_BEFORE_140="1"
-
-# When set to 1 exports NXUSERIP / NXSESSIONID in nxnode
-#EXPORT_USERIP="0"
-#EXPORT_SESSIONID="1"
-
-# This can be set to any executable, which is started after session startup
-# like: $NODE_AUTOSTART {start|restore}
-#NODE_AUTOSTART=""
-
-# When set to 1 will start nxagent in rootless mode.
-#ENABLE_ROOTLESS_MODE="1"
-
-# If enabled writes entries via the COMMAND_SESSREG program
-# into utmp/wtmp/lastlog database.
-# Note: You have to make sure that you add the nx user to the
-#       utmp or tty group or how its called on your system
-#       before this directive works.
-#ENABLE_USESSION="0"
-#COMMAND_SESSREG="sessreg"
-
-# Extra options sent to the different nx agents. See !M documentation
-# for examples of useful parameters.
-#AGENT_EXTRA_OPTIONS_RFB=""
-#AGENT_EXTRA_OPTIONS_RDP=""
-#AGENT_EXTRA_OPTIONS_X=""
-
-# The number of seconds we wait for the nxagent to start before
-# deciding startup has failed
-#AGENT_STARTUP_TIMEOUT="60"
-
-# The font server the agent will use. If set to "" no font server is used.
-# For this to do any good, the client has to have the same font server set
-# in /etc/X11/XF86Config
-#AGENT_FONT_SERVER=""
-
-# Disable or enable use of 'tcp nodelay' on proxy. Old versions of Linux
-# kernels have problems using this option on sockets that will cause a loss
-# of TCP connections. This option is not set by default to allow clients to
-# specify whether to enable or disable TCP nodelay. Setting this option to
-# the value of "0" NX proxy avoids using 'tcp nodelay' but it will cause a
-# loss of interaction in sessions.
-#PROXY_TCP_NODELAY=""
-
-# Extra options to nxproxy. See !M documentation for useful parameters.
-#PROXY_EXTRA_OPTIONS=""

Copied: freenx-server/tags/FreeNX-0.6.0.99/node.conf.sample (from rev 290, freenx-server/trunk/node.conf.sample)

Deleted: freenx-server/tags/FreeNX-0.6.0.99/nxclient
===================================================================
--- freenx-server/trunk/nxclient	2007-01-23 02:15:28 UTC (rev 283)
+++ freenx-server/tags/FreeNX-0.6.0.99/nxclient	2007-01-24 19:29:36 UTC (rev 300)
@@ -1,336 +0,0 @@
-#!/bin/bash
-#
-# Copyright (c) 2004 by Fabian Franz <freenx at fabian-franz.de>
-#           (c) 2004 by Rick Stout <zipsonic at gmail.com>
-#
-# License: GPL, version 2
-#
-# Note: NX does not check the exit-code from nxclient,
-#       but we set it to a "good value" anyway in case 
-#       it does check it someday.
-#
-# SVN: $Id$
-#
-# ========================================================================
-
-# First check if the commercial nxclient is available and use it
-# but check that it isn't this script to prevent a loop!
-NXCLIENT="/usr/NX/bin/nxclient"
-[ -x "$NXCLIENT" -a "$(file -bi $NXCLIENT)" != 'application/x-shellscript' ] \
-	&& exec ${NXCLIENT} "$@"
-
-TEMP=`getopt -a -o d: --long local,noautokill,dialog:,caption:,message:,display:,printer:,parent: -n $(basename $0) -- "$@"`
-
-if [ $? != 0 ] ; then echo "Terminating..." >&2 ; exit 1 ; fi
-
-# Note the quotes around `$TEMP': they are essential!
-eval set -- "$TEMP"
-
-DIALOG_TYPE="ok";
-DIALOG_CAPTION=""
-DIALOG_MESSAGE=""
-DIALOG_LOCAL=""
-DIALOG_NOAUTOKILL=""
-DIALOG_PRINTER=""
-DIALOG_PARENT="$PPID"
-
-while true
-do
-        case "$1" in
-		--dialog) DIALOG_TYPE="$2"; shift 2 ;;
-		--caption) DIALOG_CAPTION="$2"; shift 2 ;;
-		--message) DIALOG_MESSAGE="$2"; shift 2 ;;
-		--local) DIALOG_LOCAL="yes"; shift ;;
-		--noautokill) DIALOG_NOAUTOKILL="yes"; shift ;;
-		--display) DISPLAY="$2"; shift 2 ;;
-		--printer) DIALOG_PRINTER="$2"; shift 2 ; break ;;
-		--parent) DIALOG_PARENT="$2"; shift 2 ; break ;;
-		--) shift ; break ;;
-                *) echo "Internal error!" ; exit 1; ;;
-	esac
-done
-
-export DISPLAY
-
-# if --printer is set, the dialog type is overridden
-[ -n "$DIALOG_PRINTER" ] && DIALOG_TYPE="printer"
-
-if [ -x /usr/bin/Xdialog ] 
-then
-	dialog_interface="xdialog"
-	DIALOG=/usr/bin/Xdialog # just in case that we have no good path
-else
-	dialog_interface="xmessage"
-	xmessage=$(which xmessage 2>/dev/null)
-	[ -z "$xmessage" ] && xmessage="/usr/X11R6/bin/xmessage"
-fi
-
-#
-# utility functions for all interfaces
-#
-
-# utility_printer "get|set|getlist|getvendlist|getdrvlist"
-#
-#	get <name> - gets the current driver for name
-#	set <name> <driver> <description> - sets the current driver and description for name
-#	getvendlist - gets a list of vendors
-#	getdrvlist <vendor> - gets a list of drivers for vendor
-#	getextdrvlist <vendor> - gets an extended list (with driver and 
-#                                description) of drivers for vendor
-#	getdesc <driver> - gets the description for driver <driver>
-#	getlist - gets a list of drivers
-
-#
-# drivers.cache has the following format:
-#	
-#	driver|<printername>|<ppdfile>|<description>
-#
-
-#
-# Example: IFS='|' DEFAULT_PRINTER=( $(utility_printer get <myprinter>) )
-# 	  
-#	You can then select ${DEFAULT_PRINTER[1]} for <printername>.
-# 
-
-utility_printer()
-{
-	UTILITY_DRIVERS_CACHE="$HOME/.nx/config/drivers.cache"
-	[ -n "$USER_FAKE_HOME" ] && UTILITY_DRIVERS_CACHE="$USER_FAKE_HOME/.nx/config/drivers.cache"
-	UTILITY_NXPRINT="nxprint"
-	[ -n "$PATH_BIN" ] && UTILITY_NXPRINT="$PATH_BIN/nxprint"
-	case "$1" in 
-		get)
-			grep "driver|$2|" "$UTILITY_DRIVERS_CACHE" 2>/dev/null
-		;;
-		set)
-			# FIXME: Handle possible race conditions?
-			grep -v "driver|$2|" "$UTILITY_DRIVERS_CACHE" 2>/dev/null > $UTILITY_DRIVERS_CACHE.tmp
-			echo "driver|$2|$3|$4" >> $UTILITY_DRIVERS_CACHE.tmp
-			mv -f $UTILITY_DRIVERS_CACHE.tmp $UTILITY_DRIVERS_CACHE
-		;;
-		getvendlist)
-			$UTILITY_NXPRINT -d | awk -F'|' '{ print $2 }' | uniq | tr '\n' '|'
-		;;
-		getdrvlist)
-			$UTILITY_NXPRINT -d | awk -F'|' '($2=="'$2'") { print $4}' | tr '\n' '|'
-		;;
-		getextdrvlist)
-			$UTILITY_NXPRINT -d | awk -F'|' '($2=="'$2'") { print $4 "|" $3 }'
-		;;
-
-		getdesc)
-			$UTILITY_NXPRINT -d | awk -F'|' '($4=="'$2'") { print $3}'
-		;;
-		getlist)
-			$UTILITY_NXPRINT -d
-		;;
-	esac
-}
-
-#
-# xmessage dialog interface
-#
-
-xmessage_ok()
-{
-	$xmessage -buttons "Ok:0" -center "$DIALOG_MESSAGE"
-	return 0 # Give cancel on close ...
-}
-
-xmessage_yesno()
-{
-	$xmessage -buttons "Yes:2,No:0" -center "$DIALOG_MESSAGE"
-}
-
-xmessage_yesnosuspend()
-{
-	$xmessage -buttons "Suspend:3,Terminate:2,Cancel:0" -center "$DIALOG_MESSAGE"
-}
-
-xmessage_panic()
-{
-	$xmessage -buttons "Terminate:2,Cancel:0" -center "$DIALOG_MESSAGE"
-}
-
-xmessage_quit()
-{
-	$xmessage -buttons "Quit:0" -center "$DIALOG_MESSAGE"
-	return 0 # Give cancel on close ...
-}
-
-xmessage_printer_ask()
-{
-	$xmessage -buttons "Ok:100,Configure:101,Cancel:102" -center "$DIALOG_MESSAGE"
-	RC=$?
-	[ $RC -lt 100 ] && return 2
-	let RC=$RC-100
-	return $RC
-}
-
-xmessage_printer_configure()
-{
-	IFS=','
-	$xmessage -buttons "$*" -center "$DIALOG_MESSAGE"
-	RC=$?
-	unset IFS
-	VENDOR=""
-	if [ $RC -gt 100 ]
-	then
-		let NR=$RC-100
-		VENDOR="${!NR}"
-	fi
-	echo "$VENDOR"
-}
-
-xmessage_printer_configure_vendor()
-{
-	IFS='|' VENDOR_LIST=( $(utility_printer getvendlist) )
-	xmessage_printer_configure "${VENDOR_LIST[@]}"
-}
-
-xmessage_printer_configure_driver()
-{
-	IFS='|' DRIVER_LIST=( $(utility_printer getdrvlist "$1") )
-	xmessage_printer_configure "${DRIVER_LIST[@]}"
-}
-
-#
-# xdialog interface
-#
-
-xdialog_ok()
-{
-	$DIALOG --title "$DIALOG_CAPTION" --msgbox "$DIALOG_MESSAGE" 0 0
-	return 0 # Give cancel on close ...
-}
-
-xdialog_yesno()
-{
-	$DIALOG --title "$DIALOG_CAPTION" --yesno "$DIALOG_MESSAGE" 0 0
-	RC=$?
-	[ $RC -eq 0 ] && return 2
-	[ $RC -eq 1 ] && return 0
-}
-
-xdialog_yesnosuspend()
-{
-	$DIALOG --title "$DIALOG_CAPTION" --buttons-style text --ok-label "Suspend" --cancel-label "Terminate" --yesno "$DIALOG_MESSAGE Close window to cancel." 400x150
-	RC=$?
-	[ $RC -eq 0 ] && return 3
-	[ $RC -eq 1 ] && return 2
-}
-
-xdialog_panic()
-{
-	$DIALOG --title "$DIALOG_CAPTION" --buttons-style text --default-no --ok-label "Terminate" --cancel-label "Cancel" --yesno "$DIALOG_MESSAGE" 0x0
-	RC=$?
-	[ $RC -eq 0 ] && return 2
-	[ $RC -eq 1 ] && return 0
-}
-
-xdialog_quit()
-{
-        $DIALOG --buttons-style text --ok-label "Quit" --title "$DIALOG_CAPTION" --msgbox "$DIALOG_MESSAGE" 0 0
-        return 0 # Give cancel on close ...
-}
-
-xdialog_printer_ask()
-{
-	$DIALOG --title "$DIALOG_CAPTION" --buttons-style text --ok-label "Ok" --cancel-label "Configure" --yesno "$DIALOG_MESSAGE\n\nClose window to cancel." 400x250
-	RC=$?
-	[ $RC -eq 255 ] && return 2
-	return $RC
-}
-
-xdialog_printer_configure_vendor()
-{
-	IFS='|' VENDOR_LIST=( $(utility_printer getvendlist | sed 's/|/||off|/g') )
-	$DIALOG --stdout --title "$DIALOG_CAPTION" --radiolist "$DIALOG_MESSAGE" 0 0 6 "${VENDOR_LIST[@]}"
-}
-
-# xdialog_printer_configure_driver vendor old_driver
-xdialog_printer_configure_driver()
-{
-	IFS='|' XDIALOG_LIST=( $(utility_printer getextdrvlist "$1" | sed 's/$/|off/g; /'"$2"'/ s/|off/|on/g' | tr '\n' '|') )
-	$DIALOG --stdout --title "$DIALOG_CAPTION" --radiolist "$DIALOG_MESSAGE" 0 0 6 "${XDIALOG_LIST[@]}"
-}
-
-
-#
-# helper functions
-#
-
-helper_dialog_printer()
-{
-	IFS="|" PRINTER_INFORMATION=( $(utility_printer get "$DIALOG_PRINTER") )
-	PRINTER_CONFIGURE="yes"
-	[ -z "$DIALOG_CAPTION" ] && DIALOG_CAPTION="NX Printer configuration for $DIALOG_PRINTER"
-	
-	# Do we have old printer information present?
-	if [ -n "$PRINTER_INFORMATION" ]
-	then
-		DIALOG_MESSAGE=$(echo -e "Found driver for printer $DIALOG_PRINTER.\n\nOld choice was: ${PRINTER_INFORMATION[3]}.\n\nIf you want to keep the settings click on 'Ok' \n- else click on 'Configure'.") ${dialog_interface}_printer_ask
-		RC=$?
-		# bail out with exit code 2 in case the user cancelled the operation
-		[ $RC -eq 2 ] && echo "cancel: aborted" && exit 2
-		[ $RC -eq 0 ] && PRINTER_CONFIGURE="no"
-	fi
-	
-	VENDOR=""
-	OLD_DRIVER="${PRINTER_INFORMATION[2]}"
-
-	if [ "$PRINTER_CONFIGURE" = "yes" ]
-	then
-		DRIVER=""
-		VENDOR=$(DIALOG_MESSAGE="Choose vendor for printer $DIALOG_PRINTER." ${dialog_interface}_printer_configure_vendor)
-		[ -n "$VENDOR" ] && DRIVER=$(DIALOG_MESSAGE="Choose driver for printer $DIALOG_PRINTER." ${dialog_interface}_printer_configure_driver "$VENDOR" "${OLD_DRIVER:-invalid}")
-		# set the new printer driver
-		if [ -n "$DRIVER" ]
-		then
-			DESC=$(utility_printer getdesc "$DRIVER")
-			utility_printer set "$DIALOG_PRINTER" "$DRIVER" "$DESC"
-		fi
-	else
-		DRIVER="$OLD_DRIVER"
-	fi
-
-	# echo the choosen <ppdfile> to stdout
-	[ -n "$DRIVER" ] && echo "$DRIVER"
-	[ -z "$DRIVER" ] && echo "cancel: aborted" && exit 2
-			
-	exit 0
-}
-
-#
-# main case statement
-#
-
-case $DIALOG_TYPE in 
-	ok)
-		${dialog_interface}_ok
-	;;
-	yesno)
-		${dialog_interface}_yesno
-	;;
-	yesnosuspend)
-		${dialog_interface}_yesnosuspend
-	;;
-	panic)
-		${dialog_interface}_panic
-	;;
-	quit)
-		${dialog_interface}_quit
-	;;
-	printer)
-		helper_dialog_printer
-	;;
-esac
-
-#
-# Time for exit code checks :)
-#
-
-RC=$?
-	[ $RC -eq 2 ] && kill -TERM $DIALOG_PARENT
-	[ $RC -eq 3 ] && kill -HUP $DIALOG_PARENT
-exit 0

Copied: freenx-server/tags/FreeNX-0.6.0.99/nxclient (from rev 289, freenx-server/trunk/nxclient)

Deleted: freenx-server/tags/FreeNX-0.6.0.99/nxloadconfig
===================================================================
--- freenx-server/trunk/nxloadconfig	2007-01-23 02:15:28 UTC (rev 283)
+++ freenx-server/tags/FreeNX-0.6.0.99/nxloadconfig	2007-01-24 19:29:36 UTC (rev 300)
@@ -1,548 +0,0 @@
-#!/bin/bash
-#
-# Copyright (c) 2005 by Fabian Franz <freenx at fabian-franz.de>
-#           (c) 2005 by Jon Severinsson <jonno at users.berlios.de>
-#
-# License: GPL, version 2
-#
-# SVN: $Id$
-#
-# ========================================================================
-
-#########################################################################
-# Commandline support for --help, --check and --userconf
-#########################################################################
-
-HELP="no"
-CHECK="no"
-USERCONF="no"
-NXLCFG_IGNORE_ERRORS="no"
-
-while [ "$1" ]
-do
-	case "$1" in
-		--help) HELP="yes"; shift ;;
-		--check) CHECK="yes"; shift ;;
-		--ignore-errors) NXLCFG_IGNORE_ERRORS="yes"; shift;;
-		--userconf) USERCONF="yes" ; 
-					case "$2" in
-						"" | --*) shift ;;
-						*) USER=$2 ; shift 2 ;;
-					esac ;;
-		--) shift ; break ;;
-		*) echo "Invalid flag $1" ; HELP="yes"; shift ; break ;;
-	esac
-done
-
-if [ "$HELP" = "yes" ]
-then
-	echo "nxloadconfig - Load the FreeNX configuration variables into the environment."
-	echo "Syntax: nxloadconfig --help"
-	echo "        nxloadconfig [--check] [--userconf [<username>]]"
-	echo
-	echo "  --check                  Write errors to standard output."
-	echo "	--ignore-errors		 just warn, and don't exit with a error, if errors occure"
-	echo "  --userconf [<username>]  Parse <username>.node.conf as well as node.conf."
-	echo "                           Assume current user if no username is specified."
-	exit 0
-fi
-
-#########################################################################
-# INTERNAL STUFF
-# DO NOT TOUCH unless you REALLY know what you are doing
-#########################################################################
-
-NX_VERSION=1.5.0-60
-NX_LICENSE="OS (GPL)"
-
-# Where can different nx components be found
-NX_DIR=/usr
-PATH_BIN=$NX_DIR/bin # if you change that, be sure to also change the public keys
-PATH_LIB=$NX_DIR/lib
-NX_ETC_DIR=/etc/nxserver
-NX_SESS_DIR=/var/lib/nxserver/db
-NX_HOME_DIR=/var/lib/nxserver/home
-
-# Advanced users ONLY
-AGENT_LIBRARY_PATH="" #Calculated
-PROXY_LIBRARY_PATH="" #Calculated
-APPLICATION_LIBRARY_PATH="" #Calculated
-APPLICATION_LIBRARY_PRELOAD="" #Calculated
-
-# the name of the authorized keys file for ssh
-SSH_AUTHORIZED_KEYS="authorized_keys2"
-
-# retest values like xauth, netcat
-# set to 0 if you are sure, you set the right values
-
-NXCONFIG_RETEST=1
-
-#########################################################################
-# Default Values
-# A user should NEVER touch this, edit $NX_ETC_DIR/node.conf instead
-#########################################################################
-
-# General FreeNX directives
-
-SERVER_NAME="$(hostname)"
-SSHD_PORT=22
-
-# Authentication / Security directives
-
-ENABLE_USERMODE_AUTHENTICATION="0"
-ENABLE_PASSDB_AUTHENTICATION="1"
-ENABLE_SSH_AUTHENTICATION="1"
-ENABLE_SU_AUTHENTICATION="0"
-ENABLE_USER_DB="0"
-
-ENABLE_FORCE_ENCRYPTION="0"
-SSHD_CHECK_IP="0"
-
-
-# Restriction directives
-
-DISPLAY_BASE=1000
-SESSION_LIMIT=200
-SESSION_USER_LIMIT="" #Calculated
-DISPLAY_LIMIT=200
-
-ENABLE_PERSISTENT_SESSION="all"
-DISABLE_PERSISTENT_SESSION=""
-
-
-# Logging directives
-
-NX_LOG_LEVEL=0
-NX_LOG_SECURE=1
-NX_LOGFILE=/var/log/nxserver.log
-SESSION_LOG_CLEAN=1
-SESSION_HISTORY=2592000
-
-
-# Forwarding directives
-
-ENABLE_SERVER_FORWARD="0"
-SERVER_FORWARD_HOST=""
-SERVER_FORWARD_PORT=22
-SERVER_FORWARD_KEY="/usr/NX/share/client.id_dsa.key"
-
-NOMACHINE_SERVER="/usr/NX/bin/nxserver"
-NOMACHINE_NX_HOME_DIR="/usr/NX/home/nx"
-ENABLE_NOMACHINE_FORWARD_PORT="0"
-NOMACHINE_FORWARD_PORT="22"
-
-LOAD_BALANCE_SERVERS=""
-LOAD_BALANCE_ALGORITHM="load"
-ENABLE_LOAD_BALANCE_PREFERENCE="0"
-
-# Services directives
-
-ENABLE_ESD_PRELOAD="0"
-ESD_BIN_PRELOAD="esddsp"
-ENABLE_ARTSD_PRELOAD="0"
-ARTSD_BIN_PRELOAD="artsdsp"
-
-ENABLE_KDE_CUPS="0"
-KDE_PRINTRC="" # Calculated
-CUPS_ETC="/etc/cups/"
-
-# Path directives
-
-USER_FAKE_HOME="" #Calculated
-SET_LD_LIBRARY_PATH="1"
-
-DEFAULT_X_WM=""
-KILL_DEFAULT_X_WM="1"
-USER_X_STARTUP_SCRIPT=.Xclients
-DEFAULT_X_SESSION=/etc/X11/xdm/Xsession
-COMMAND_START_KDE=startkde
-COMMAND_START_GNOME=gnome-session
-COMMAND_START_CDE=cdwm
-COMMAND_XTERM=xterm
-COMMAND_XAUTH=/usr/X11R6/bin/xauth
-COMMAND_SMBMOUNT=smbmount
-COMMAND_SMBUMOUNT=smbumount
-COMMAND_NETCAT=netcat
-COMMAND_SSH=ssh
-COMMAND_SSH_KEYGEN=ssh-keygen
-COMMAND_CUPSD=/usr/sbin/cupsd
-COMMAND_MD5SUM=md5sum
-
-
-# Misc directives
-
-ENABLE_2_0_0_BACKEND=""
-ENABLE_AUTORECONNECT="0"
-ENABLE_AUTORECONNECT_BEFORE_140="1"
-EXPORT_USERIP="0"
-EXPORT_SESSIONID="1"
-NODE_AUTOSTART=""
-ENABLE_ROOTLESS_MODE="1"
-ENABLE_USESSION="0"
-COMMAND_SESSREG="sessreg"
-AGENT_EXTRA_OPTIONS_RFB=""
-AGENT_EXTRA_OPTIONS_RDP=""
-AGENT_EXTRA_OPTIONS_X=""
-AGENT_STARTUP_TIMEOUT="60"
-AGENT_FONT_SERVER=""
-PROXY_TCP_NODELAY=""
-PROXY_EXTRA_OPTIONS=""
-
-############################################################################
-# OS specific directives
-############################################################################
-
-OS="$( uname -sr )"
-
-case "$OS" in
-	"SunOS 5.10")
-		DEFAULT_X_WM=cdwm
-		DEFAULT_X_SESSION=/etc/X11/gdm/Xsession
-		COMMAND_XTERM=/usr/openwin/bin/xterm
-		COMMAND_XAUTH=/usr/openwin/bin/xauth
-		COMMAND_CUPSD=/opt/sfw/cups/sbin/cupsd
-		COMMAND_MD5SUM=gmd5sum
-		PATH=/usr/xpg4/bin:/usr/openwin/bin:$PATH
-		export PATH
-		;;
-esac
-
-# replace incompatible commands
-
-case "$OS" in
-       "SunOS 5.10")
-               function which()
-               {
-                       [ -e "$1" ] && echo $1 && return 0
-                       [ -z "$1" ] && return 1
-                       for i in  $(echo $PATH | tr ":" "\n"); do
-                               [ -e $i/$1 ] && echo $i/$1 && return 0
-                       done
-                       return 1
-               }
-
-	       function rev() {
-		       perl -lpe'$_ = reverse'
-	       }
-       ;;
-esac
-
-#########################################################################
-# Retested values
-#########################################################################
-
-if [ "$NXCONFIG_RETEST" = "1" ]
-then
-	{ ! which "$COMMAND_XAUTH" && which xauth; } >/dev/null 2>&1 && COMMAND_XAUTH=$(which xauth)
-	{ ! which "$COMMAND_NETCAT" && which nc; } >/dev/null 2>&1 && COMMAND_NETCAT=$(which nc)
-fi
-
-#########################################################################
-# node.conf file evaluation
-#########################################################################
-
-if [ -d $NX_ETC_DIR/node.conf.d ]
-then
-	for i in $NX_ETC_DIR/node.conf.d/*
-	do
-		[ -e $i ] && . $i
-	done
-fi
-
-[ -e $NX_ETC_DIR/node.conf ] && . $NX_ETC_DIR/node.conf
-[ "$USERCONF" = "yes" -a -e $NX_ETC_DIR/$USER.node.conf ] && . $NX_ETC_DIR/$USER.node.conf
-
-
-#########################################################################
-# Calculated values
-#########################################################################
-
-[ -z "$SESSION_USER_LIMIT" ] && SESSION_USER_LIMIT=$SESSION_LIMIT
-[ -z "$USER_FAKE_HOME" ] && USER_FAKE_HOME=$HOME
-
-[ -z "$AGENT_LIBRARY_PATH" ] && AGENT_LIBRARY_PATH=$PATH_LIB
-[ -z "$PROXY_LIBRARY_PATH" ] && PROXY_LIBRARY_PATH=$PATH_LIB
-[ -z "$APPLICATION_LIBRARY_PATH" ] && APPLICATION_LIBRARY_PATH=$PATH_LIB
-[ -z "$APPLICATION_LIBRARY_PRELOAD" ] && APPLICATION_LIBRARY_PRELOAD="$APPLICATION_LIBRARY_PATH/libX11.so.6.2:$APPLICATION_LIBRARY_PATH/libXext.so.6.4:$APPLICATION_LIBRARY_PATH/libXcomp.so:$APPLICATION_LIBRARY_PATH/libXcompext.so.1:$APPLICATION_LIBRARY_PATH/libXrender.so.1.2"
-if [ -z "$ENABLE_2_0_0_BACKEND" ]
-then
-	ENABLE_2_0_0_BACKEND="1"
-	[ -z "$(strings $PATH_BIN/nxagent | egrep 'NXAGENT - Version 2.[01].0')" ] && ENABLE_2_0_0_BACKEND="0"
-fi 
-
-[ -z "$KDE_PRINTRC" -a -n "$KDEHOME" ] && KDE_PRINTRC="$KDEHOME/share/config/kdeprintrc"
-[ -z "$KDE_PRINTRC" -a -z "$KDEHOME" ] && KDE_PRINTRC="$HOME/.kde/share/config/kdeprintrc"
-
-#########################################################################
-# Support for --check
-#########################################################################
-
-if [ "$CHECK" = "yes" ]
-then
-	ERROR="no"
-	WARNING="no"
-	
-	# Internal Stuff
-	
-	[ ! -d "$PATH_BIN" ] && \
-		ERROR="yes" && echo "Error: Invalid value \"PATH_BIN=$PATH_BIN\""
-	# Check for NX agents ...
-	
-	[ ! -f "$PATH_BIN/nxagent" ] && \
-		ERROR="yes" && echo "Error: Could not find nxagent in $PATH_BIN. Please install some OSS components."
-		
-	[ ! -f "$PATH_BIN/nxdesktop" ] && \
-		WARNING="yes" && echo "Warning: Could not find nxdesktop in $PATH_BIN. RDP sessions won't work."
-		
-	[ ! -f "$PATH_BIN/nxviewer" ] && \
-		WARNING="yes" && echo "Warning: Could not find nxviewer in $PATH_BIN. VNC sessions won't work."
-
-	# Check for paths
-		
-	[ ! -d "$PATH_LIB" ] && \
-		ERROR="yes" && echo "Error: Invalid value \"PATH_LIB=$PATH_LIB\""
-	[ ! -d "$NX_ETC_DIR" ] && \
-		ERROR="yes" && echo "Error: Invalid value \"NX_ETC_DIR=$NX_ETC_DIR\""
-	[ ! -d "$NX_SESS_DIR" ] && \
-		ERROR="yes" && echo "Error: Invalid value \"NX_SESS_DIR=$NX_SESS_DIR\""
-	[ ! -d "$NX_HOME_DIR" ] && \
-		ERROR="yes" && echo "Error: Invalid value \"NX_HOME_DIR=$NX_HOME_DIR\""
-
-	[ ! -d "$AGENT_LIBRARY_PATH" ] && \
-		ERROR="yes" && echo "Error: Invalid value \"AGENT_LIBRARY_PATH=$AGENT_LIBRARY_PATH\""
-	[ ! -d "$PROXY_LIBRARY_PATH" ] && \
-		ERROR="yes" && echo "Error: Invalid value \"PROXY_LIBRARY_PATH=$PROXY_LIBRARY_PATH\""
-	[ ! -d "$APPLICATION_LIBRARY_PATH" ] && \
-		ERROR="yes" && echo "Error: Invalid value \"APPLICATION_LIBRARY_PATH=$APPLICATION_LIBRARY_PATH\""
-	
-	OLD_IFS=$IFS
-	IFS=":"
-	for LIBRARY in $APPLICATION_LIBRARY_PRELOAD; do
-		[ ! -e $LIBRARY ] && \
-			ERROR="yes" && echo "Error: Invalid value \"APPLICATION_LIBRARY_PRELOAD=$APPLICATION_LIBRARY_PRELOAD\"" && break ;
-	done
-	IFS=$OLD_IFS
-	
-	[ -z "$SSH_AUTHORIZED_KEYS" ] && \
-		ERROR="yes" && echo "Error: Invalid value \"SSH_AUTHORIZED_KEYS=$SSH_AUTHORIZED_KEYS\""
-	
-	
-	# General FreeNX directives
-	
-	[ -z "$SERVER_NAME" ] && \
-		ERROR="yes" && echo "Error: Invalid value \"SERVER_NAME=$SERVER_NAME\""
-	[ -z $(echo "$SSHD_PORT" | egrep "^[1-9][0-9]{0,4}$") ] && \
-		ERROR="yes" && echo "Error: Invalid value \"SSHD_PORT=$SSHD_PORT\""
-	
-	
-	# Authentication / Security directives
-	
-	[ -z $(echo "$ENABLE_PASSDB_AUTHENTICATION" | egrep "^[0|1]$") ] && \
-		ERROR="yes" && echo "Error: Invalid value \"ENABLE_PASSDB_AUTHENTICATION=$ENABLE_PASSDB_AUTHENTICATION\""
-	[ -z $(echo "$ENABLE_SSH_AUTHENTICATION" | egrep "^[0|1]$") ] && \
-		ERROR="yes" && echo "Error: Invalid value \"ENABLE_SSH_AUTHENTICATION=$ENABLE_SSH_AUTHENTICATION:\""
-	[ -z $(echo "$ENABLE_SU_AUTHENTICATION" | egrep "^[0|1]$") ] && \
-		ERROR="yes" && echo "Error: Invalid value \"ENABLE_SU_AUTHENTICATION=$NENABLE_SU_AUTHENTICATION\""
-	[ -z $(echo "$ENABLE_USER_DB" | egrep "^[0|1]$") ] && \
-		ERROR="yes" && echo "Error: Invalid value \"ENABLE_USER_DB=$ENABLE_USER_DB\""
-	
-	[ -z $(echo "$ENABLE_FORCE_ENCRYPTION" | egrep "^[0|1]$") ] && \
-		ERROR="yes" && echo "Error: Invalid value \"ENABLE_FORCE_ENCRYPTION=$ENABLE_FORCE_ENCRYPTION\""
-	[ -z $(echo "$SSHD_CHECK_IP" | egrep "^[0|1]$") ] && \
-		ERROR="yes" && echo "Error: Invalid value \"SSHD_CHECK_IP=$SSHD_CHECK_IP\""
-	
-	
-	# Restriction directives
-	
-	[ -z $(echo "$DISPLAY_BASE" | egrep "^[1-9][0-9]{0,4}$") ] && \
-		ERROR="yes" && echo "Error: Invalid value \"DISPLAY_BASE=$DISPLAY_BASE\""
-	[ -z $(echo "$SESSION_LIMIT" | egrep "^[1-9][0-9]{0,4}$") ] &&  \
-		ERROR="yes" && echo "Error: Invalid value \"SESSION_LIMIT=$SESSION_LIMIT\""
-	[ -z $(echo "$SESSION_USER_LIMIT" | egrep "^[1-9][0-9]{0,4}$") -o $SESSION_USER_LIMIT -gt $SESSION_LIMIT ] && \
-		ERROR="yes" && echo "Error: Invalid value \"SESSION_USER_LIMIT=$SESSION_USER_LIMIT\""
-	[ -z $(echo "$DISPLAY_LIMIT" | egrep "^[1-9][0-9]{0,4}$") -o $DISPLAY_LIMIT -lt $SESSION_LIMIT ] && \
-		ERROR="yes" && echo "Error: Invalid value \"DISPLAY_LIMIT=$DISPLAY_LIMIT\""
-	
-	OLD_IFS=$IFS
-	IFS=","
-	if [ "$ENABLE_PERSISTENT_SESSION" != "all" ]
-	then
-		for USERNAME in $ENABLE_PERSISTENT_SESSION; do
-			[ "${USERNAME:0:1}" != "@" ] && [ -z $(getent passwd $USERNAME) ] && \
-				ERROR="yes" && echo "Error: Invalid value \"ENABLE_PERSISTENT_SESSION=$ENABLE_PERSISTENT_SESSION\"" && break ;
-			[ "${USERNAME:0:1}" = "@" ] && [ -z $(getent group ${USERNAME:1}) ] && \
-				ERROR="yes" && echo "Error: Invalid value \"ENABLE_PERSISTENT_SESSION=$ENABLE_PERSISTENT_SESSION\"" && break ;
-		done
-	fi
-	for USERNAME in $DISABLE_PERSISTENT_SESSION; do
-		[ "${USERNAME:0:1}" != "@" ] && [ -z $(getent passwd $USERNAME) ] && \
-			ERROR="yes" && echo "Error: Invalid value \"DISABLE_PERSISTENT_SESSION=$DISABLE_PERSISTENT_SESSION\"" && break ;
-		[ "${USERNAME:0:1}" = "@" ] && [ -z $(getent group ${USERNAME:1}) ] && \
-			ERROR="yes" && echo "Error: Invalid value \"DISABLE_PERSISTENT_SESSION=$DISABLE_PERSISTENT_SESSION\"" && break ;
-	done
-	IFS=$OLD_IFS
-	
-	
-	# Logging directives
-	
-	[ -z $(echo "$NX_LOG_LEVEL" | egrep "^[0-7]$") ] && \
-		ERROR="yes" && echo "Error: Invalid value \"NX_LOG_LEVEL=$NX_LOG_LEVEL\""
-	[ "$NX_LOG_LEVEL" != "0" -a ! -e "$NX_LOGFILE" ] && \
-		WARNING="yes" && echo "Warning: Invalid value \"NX_LOGFILE=$NX_LOGFILE\"" \
-					  && echo "         No logfile will be kept."
-		# How do I check if another user might write to a file? ( -w checks only current user)
-	[ -z $(echo "$SESSION_LOG_CLEAN" | egrep "^[0|1]$") ] && \
-		ERROR="yes" && echo "Error: Invalid value \"SESSION_LOG_CLEAN=$SESSION_LOG_CLEAN\""
-	[ -z $(echo "$SESSION_HISTORY" | egrep "^-?[0-9]+$") ] && \
-		ERROR="yes" && echo "Error: Invalid value \"SESSION_HISTORY=$SESSION_HISTORY\""
-	
-	
-	# Forwarding directives
-	
-	[ -z $(echo "$ENABLE_SERVER_FORWARD" | egrep "^[0|1]$") ] && \
-		ERROR="yes" && echo "Error: Invalid value \"ENABLE_SERVER_FORWARD=$ENABLE_SERVER_FORWARD\""
-	[ "$ENABLE_SERVER_FORWARD" = "1" -a -z "$SERVER_FORWARD_HOST" ] && \
-		ERROR="yes" && echo "Error: Invalid value \"SERVER_FORWARD_HOST=$SERVER_FORWARD_HOST\"" 
-		# Any ideas on how I can check for a VALID host is velcome!
-		# In my private scripts I use 'resolveip -q' and check if output conforms to [0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}, 
-		# but resolveip is part of mysql, and I don't think I should add that dependancy...
-	[ "$ENABLE_SERVER_FORWARD" = "1" -a -z $(echo "$SERVER_FORWARD_PORT" | egrep "^[1-9][0-9]{0,4}$") ] && \
-		ERROR="yes" && echo "Error: Invalid value \"SERVER_FORWARD_PORT=$SERVER_FORWARD_PORT\""
-	[ "$ENABLE_SERVER_FORWARD" = "1" -a ! -e "$SERVER_FORWARD_KEY" ] && \
-		ERROR="yes" && echo "Error: Invalid value \"SERVER_FORWARD_KEY=$SERVER_FORWARD_KEY\""
-	
-	[ -z $(echo "$ENABLE_NOMACHINE_FORWARD_PORT" | egrep "^[0|1]$") ] && \
-		ERROR="yes" && echo "Error: Invalid value \"ENABLE_NOMACHINE_FORWARD_PORT=$ENABLE_NOMACHINE_FORWARD_PORT\""
-	[ "$ENABLE_NOMACHINE_FORWARD_PORT" = "1" ] && ! which "$NOMACHINE_SERVER" >/dev/null 2>&1 && \
-		ERROR="yes" && echo "Error: Invalid value \"NOMACHINE_SERVER=$NOMACHINE_SERVER\""
-	[ "$ENABLE_NOMACHINE_FORWARD_PORT" = "1" -a -z $(echo "$NOMACHINE_FORWARD_PORT" | egrep "^[1-9][0-9]{0,4}$") ] && \
-		ERROR="yes" && echo "Error: Invalid value \"NOMACHINE_FORWARD_PORT=$NOMACHINE_FORWARD_PORT\""
-	
-	# Services directives
-	
-	[ -z $(echo "$ENABLE_ESD_PRELOAD" | egrep "^[0|1]$") ] && \
-		ERROR="yes" && echo "Error: Invalid value \"ENABLE_ESD_PRELOAD=$ENABLE_ESD_PRELOAD\""
-	[ "$ENABLE_ESD_PRELOAD" = "1" ] && ! which "$ESD_BIN_PRELOAD" >/dev/null 2>&1 && \
-		WARNING="yes" && echo "Warning: Invalid value \"ESD_BIN_PRELOAD=$ESD_BIN_PRELOAD\"" \
-					  && echo "         No esd preload will be performed."
-	
-	[ -z $(echo "$ENABLE_ARTSD_PRELOAD" | egrep "^[0|1]$") ] && \
-		ERROR="yes" && echo "Error: Invalid value \"ENABLE_ARTSD_PRELOAD=$ENABLE_ARTSD_PRELOAD\""
-	[ "$ARTSD_BIN_PRELOAD" = "1" ] && ! which "$ARTSD_BIN_PRELOAD" >/dev/null 2>&1 && \
-		WARNING="yes" && echo "Warning: Invalid value \"ARTSD_BIN_PRELOAD=$ARTSD_BIN_PRELOAD\"" \
-					  && echo "         No arts preload will be performed."
-	
-	[ -z $(echo "$ENABLE_KDE_CUPS" | egrep "^[0|1]$") ] && \
-		ERROR="yes" && echo "Error: Invalid value \"ENABLE_KDE_CUPS=$ENABLE_KDE_CUPS\""
-	[ "$ENABLE_KDE_CUPS" = "1" -a ! -e "$KDE_PRINTRC" ] && \
-		ERROR="yes" && echo "Error: Invalid value \"KDE_PRINTRC=$KDE_PRINTRC\""
-	[ ! -e "$CUPS_ETC/mime.types" -o ! -e "$CUPS_ETC/mime.convs" ] && \
-		WARNING="yes" && echo "Warning: Invalid value \"CUPS_ETC=$CUPS_ETC\"" \
-					  && echo "         Users will not be able to enable printing."
-	
-	# Path directives
-	
-	[ ! -d "$USER_FAKE_HOME" ] && \
-		ERROR="yes" && echo "Error: Invalid value \"USER_FAKE_HOME=$USER_FAKE_HOME\""
-	[ -z $(echo "$SET_LD_LIBRARY_PATH" | egrep "^[0|1]$") ] && \
-		ERROR="yes" && echo "Error: Invalid value \"SET_LD_LIBRARY_PATH=$SET_LD_LIBRARY_PATH\""
-	
-	[ "$DEFAULT_X_WM" != "" ] && ! which "$DEFAULT_X_WM" >/dev/null 2>&1 && \
-		ERROR="yes" && echo "Error: Invalid value \"DEFAULT_X_WM=$DEFAULT_X_WM\""
-	[ "$DEFAULT_X_WM" != "" -a  -z $(echo "$KILL_DEFAULT_X_WM" | egrep "^[0|1]$") ] && \
-		ERROR="yes" && echo "Error: Invalid value \"KILL_DEFAULT_X_WM=$KILL_DEFAULT_X_WM\""
-	[ -z "$USER_X_STARTUP_SCRIPT" ] && \
-		ERROR="yes" && echo "Error: Invalid value \"USER_X_STARTUP_SCRIPT=$USER_X_STARTUP_SCRIPT\""
-	! which "$DEFAULT_X_SESSION" >/dev/null 2>&1 && \
-		WARNING="yes" && echo "Warning: Invalid value \"DEFAULT_X_SESSION=$DEFAULT_X_SESSION\"" \
-					  && echo "         Users might not be able to request a default X session."
-	! which "$COMMAND_START_KDE" >/dev/null 2>&1 && \
-		WARNING="yes" && echo "Warning: Invalid value \"COMMAND_START_KDE=$COMMAND_START_KDE\"" \
-					  && echo "         Users will not be able to request a KDE session."
-	! which "$COMMAND_START_GNOME" >/dev/null 2>&1 && \
-		WARNING="yes" && echo "Warning: Invalid value \"COMMAND_START_GNOME=$COMMAND_START_GNOME\"" \
-					  && echo "         Users will not be able to request a Gnome session."
-	! which "$COMMAND_START_CDE" >/dev/null 2>&1 && \
-		WARNING="yes" && echo "Warning: Invalid value \"COMMAND_START_CDE=$COMMAND_START_CDE\"" \
-					  && echo "         Users will not be able to request a CDE session."
-	! which "$COMMAND_XTERM" >/dev/null 2>&1 && \
-		WARNING="yes" && echo "Warning: Invalid value \"COMMAND_XTERM=$COMMAND_XTERM\"" \
-					  && echo "         Users will not be able to request an xterm session."
-	! which "$COMMAND_XAUTH" >/dev/null 2>&1 && \
-		ERROR="yes" && echo "Error: Invalid value \"COMMAND_XAUTH=$COMMAND_XAUTH\""
-	! which "$COMMAND_SMBMOUNT" >/dev/null 2>&1 && \
-		WARNING="yes" && echo "Warning: Invalid value \"COMMAND_SMBMOUNT=$COMMAND_SMBMOUNT\". You'll not be able to use SAMBA. "
-	! which "$COMMAND_SMBUMOUNT" >/dev/null 2>&1 && \
-		WARNING="yes" && echo "Warning: Invalid value \"COMMAND_SMBUMOUNT=$COMMAND_SMBUMOUNT\". You'll not be able to use SAMBA."
-	! which "$COMMAND_NETCAT" >/dev/null 2>&1 && \
-		ERROR="yes" && echo "Error: Invalid value \"COMMAND_NETCAT=$COMMAND_NETCAT\""
-	! which "$COMMAND_SSH" >/dev/null 2>&1 && \
-		ERROR="yes" && echo "Error: Invalid value \"COMMAND_SSH=$COMMAND_SSH\""
-	! which "$COMMAND_SSH_KEYGEN" >/dev/null 2>&1 && \
-		ERROR="yes" && echo "Error: Invalid value \"COMMAND_SSH_KEYGEN=$COMMAND_SSH_KEYGEN\""
-	! which "$COMMAND_CUPSD" >/dev/null 2>&1 && \
-		WARNING="yes" && echo "Warning: Invalid value \"COMMAND_CUPSD=$COMMAND_CUPSD\"" \
-					  && echo "         Users will not be able to enable printing."
-	! which "$COMMAND_MD5SUM" >/dev/null 2>&1 && \
-		ERROR="yes" && echo "Error: Invalid value \"COMMAND_MD5SUM=$COMMAND_MD5SUM\""
-
-	# Check for expect
-	COMMAND_EXPECT=$(head -n1 $PATH_BIN/nxnode-login | cut -d'!' -f2)
-	! which "$COMMAND_EXPECT" >/dev/null 2>&1 && \
-		ERROR="yes" && echo "Error: expect necessary for $PATH_BIN/nxnode-login could not be found in '$COMMAND_EXPECT'. Please install it or change nxnode-login accordingly."
-
-	# Misc directives
-	
-	[ -z $(echo "$ENABLE_AUTORECONNECT" | egrep "^[0|1]$") ] && \
-		ERROR="yes" && echo "Error: Invalid value \"ENABLE_AUTORECONNECT=$ENABLE_AUTORECONNECT\""
-	[ -z $(echo "$ENABLE_AUTORECONNECT_BEFORE_140" | egrep "^[0|1]$") ] && \
-		ERROR="yes" && echo "Error: Invalid value \"ENABLE_AUTORECONNECT_BEFORE_140=$ENABLE_AUTORECONNECT_BEFORE_140\""
-	
-	[ -z $(echo "$EXPORT_USERIP" | egrep "^[0|1]$") ] && \
-		ERROR="yes" && echo "Error: Invalid value \"EXPORT_USERIP=$EXPORT_USERIP\""
-	[ -z $(echo "$EXPORT_SESSIONID" | egrep "^[0|1]$") ] && \
-		ERROR="yes" && echo "Error: Invalid value \"EXPORT_SESSIONID=$EXPORT_SESSIONID\""
-	[ -n "$NODE_AUTOSTART" ] && ! which "$NODE_AUTOSTART" >/dev/null 2>&1 && \
-		WARNING="yes" && echo "Warning: Invalid value \"NODE_AUTOSTART=$NODE_AUTOSTART\"" \
-					  && echo "         No autostart will be performed."
-
-	[ -z $(echo "$ENABLE_ROOTLESS_MODE" | egrep "^[0|1]$") ] && \
-		ERROR="yes" && echo "Error: Invalid value \"ENABLE_ROOTLESS_MODE=$ENABLE_ROOTLESS_MODE\""
-
-	[ -z "$(strings $PATH_BIN/nxagent | egrep 'NXAGENT - Version 1.5.0|NXAGENT - Version 2.[01].0')" ] && \
-		ERROR="yes" && echo "Error: Could not find 1.5.0 or 2.[01].0 version string in nxagent. NX 1.5.0 or 2.[01].0 backend is needed for this version of FreeNX."
-		
-	[ -z $(echo "$ENABLE_USESSION" | egrep "^[0|1]$") ] && \
-		ERROR="yes" && echo "Error: Invalid value \"ENABLE_USESSION=$ENABLE_USESSION\""
-	[ "$ENABLE_USESSION" = "1" ] && ! which "$COMMAND_SESSREG" >/dev/null 2>&1 && \
-		WARNING="yes" && echo "Warning: Invalid value \"COMMAND_SESSREG=$COMMAND_SESSREG\"" \
-					  && echo "         Logged in users will not be registered with sessreg."
-	
-	#AGENT_EXTRA_OPTIONS_RFB=""
-	#AGENT_EXTRA_OPTIONS_RDP=""
-	#AGENT_EXTRA_OPTIONS_X=""
-	#PROXY_EXTRA_OPTIONS=""
-		#Can these be checked???
-	
-	#AGENT_FONT_SERVER=""
-		#Any ideas on how I can check for a VALID host is velcome!
-	
-	#[ -z $(echo "$PROXY_TCP_NODELAY" | egrep "^[|0|1]$") ] && \
-	#	ERROR="yes" && echo "Error: Invalid value \"PROXY_TCP_NODELAY=$PROXY_TCP_NODELAY\""
-	
-	
-	if [ "$ERROR" = "yes" ]
-	then
-		echo
-		echo "  Errors occured during config check."
-		echo "  Please correct the configuration file."
-		echo
-		[ "$NXLCFG_IGNORE_ERRORS" = "no" ] && exit 1 || exit 0
-	elif [ "$WARNING" = "yes" ]
-	then
-		echo
-		echo "  Warnings occured during config check."
-		echo "  To enable these features please correct the configuration file."
-		echo
-	fi
-fi

Copied: freenx-server/tags/FreeNX-0.6.0.99/nxloadconfig (from rev 290, freenx-server/trunk/nxloadconfig)

Deleted: freenx-server/tags/FreeNX-0.6.0.99/nxnode
===================================================================
--- freenx-server/trunk/nxnode	2007-01-23 02:15:28 UTC (rev 283)
+++ freenx-server/tags/FreeNX-0.6.0.99/nxnode	2007-01-24 19:29:36 UTC (rev 300)
@@ -1,1283 +0,0 @@
-#!/bin/bash
-
-# Free implementation of nxserver components
-#
-# nxnode does accept (for now):
-# 
-#	--startsession
-#	--terminate
-#	--smbmount 
-#		(smbmount is not implemented yet)
-#
-# Copyright (c) 2004 by Fabian Franz.
-#
-# License: GNU GPL, version 2
-#
-# SVN: $Id$
-#
-# 21.06.2004: - Full reconnection support
-
-# Read the config file
-. $(PATH=$(cd $(dirname $0) && pwd):$PATH which nxloadconfig) --userconf
-
-#
-# -----------------------------------------------------------------------------
-# Startup of nxnode
-# -----------------------------------------------------------------------------
-#
-
-echo "NX> 1000 NXNODE - Version $NX_VERSION $NX_LICENSE"
-
-if [ "$1" != "--check" -a "$1" != "--setkey" -a "$1" != "--agent" -a "$1" != "--slave" ]
-then 
-	read CMDLINE
-
-	CMDLINE="a=b&$CMDLINE"
-fi
-
-#
-# -----------------------------------------------------------------------------
-# Various helper functions
-# -----------------------------------------------------------------------------
-#
-
-stringinstring()
-{
-	case "$2" in
-		*$1*)
-			return 0
-		;;
-	esac
-	
-	return 1
-}
-
-getparam()
-{
-	stringinstring "&$1=" "$CMDLINE" || return 1
-	
-	echo "$CMDLINE" |  tr "&" "\n" | egrep "^"$1"=" | awk -F= '{ VAL=$2 } END { print VAL }'
-	
-	return 0
-}
-
-find_app()
-{
-	set -- $*
-	which $1 2>/dev/null
-}
-
-getparam_sessionid()
-{
-	sessionid=$(getparam sessionid)
-	
-	[ -n "$sessionid" ] || sessionid=$(getparam session_id)
-	if [ -z "$sessionid" ]
-	then
-		echo "NX> 500 Error: Fatal - Missing parameter session id." 1>&2
-		exit 1
-	fi
-	
-	echo $sessionid
-}
-
-#
-# -----------------------------------------------------------------------------
-# Node functions module
-# -----------------------------------------------------------------------------
-#
-
-#
-# node_terminate_agent <session id>
-#
-
-node_terminate_agent()
-{
-	NODE_AGENT_PID=$(cat "$USER_FAKE_HOME/.nx/C-$1/pids/agent" 2>/dev/null)
-	[ -n "$NODE_AGENT_PID" ] && kill $NODE_AGENT_PID 2>/dev/null
-}
-
-#
-# node_terminate_session <session id>
-#
-#	Used local vars: $virtualdesktop, $rootless
-#
-#	Used config vars: $COMMAND_XAUTH, $SESSION_LOG_CLEAN
-#
-
-node_terminate_session()
-{
-	#
-	# Cleanup session
-	#
-
-	[ -d "$USER_FAKE_HOME/.nx/C-$1/" ] || return
-
-	# Kill nxagent
-	
-	NODE_AGENT_PID=$(cat "$USER_FAKE_HOME/.nx/C-$1/pids/agent" 2>/dev/null)
-	
-	if [ -n "$NODE_AGENT_PID" ]
-	then
-		kill $NODE_AGENT_PID 2>/dev/null
-		if ! [ "$virtualdesktop" = "0" -a "$rootless" != "1" ]
-		then
-			sleep 1
-			kill -0 $NODE_AGENT_PID 2>/dev/null && kill -9 $NODE_AGENT_PID 2>/dev/null
-		fi
-	fi
-
-	# Kill tail process
-	
-	NODE_TAIL_PID=$(cat "$USER_FAKE_HOME/.nx/C-$sess_id/pids/tail" 2>/dev/null)
-	[ -n "$NODE_TAIL_PID" ] && kill $NODE_TAIL_PID 2>/dev/null
-
-	# Remove display information
-	
-	NODE_DISPLAY=$(echo $1 | rev | cut -d"-" -f2 | rev)
-	rm -f /tmp/.X$NODE_DISPLAY-lock
-	rm -f /tmp/.X11-unix/X$NODE_DISPLAY
-	
-	# Remove magic cookie information
-	
-	$COMMAND_XAUTH -v source "$USER_FAKE_HOME/.nx/C-$1/scripts/authority" >/dev/null 2>&1
-
-	# Preserve or remove session information
-	
-	[ "$SESSION_LOG_CLEAN" = "1" ] && rm -rf "$USER_FAKE_HOME/.nx/C-$1/"
-	
-	[ "$SESSION_LOG_CLEAN" = "0" -a "$2" = "failed" ] && mv "$USER_FAKE_HOME/.nx/C-$1/" "$USER_FAKE_HOME/.nx/F-C-$1/"
-	[ "$SESSION_LOG_CLEAN" = "0" -a "$2" != "failed" ] && mv "$USER_FAKE_HOME/.nx/C-$1/" "$USER_FAKE_HOME/.nx/T-C-$1/"
-}
-
-#
-# node_fail_restore_session <session id>
-#
-
-# TODO: Kill still running tail -f process.
-
-node_fail_restore_session()
-{
-	echo "NX> 1004 Error: Could not resume session. nxagent process could not be found."
-	
-	NODE_TAIL_PID=$(cat "$USER_FAKE_HOME/.nx/C-$sess_id/pids/tail" 2>/dev/null)
-	[ -n "$NODE_TAIL_PID" ] && kill $NODE_TAIL_PID
-	[ -n "$NODE_TAIL_PID" ] && echo "NX 1004> kill $NODE_TAIL_PID"
-	
-	node_terminate_session "$1" "failed"
-	exit 1
-}
-
-#
-# node_suspend_session <session id>
-#
-
-node_suspend_session()
-{
-	NODE_AGENT_PID=$(cat "$USER_FAKE_HOME/.nx/C-$1/pids/agent" 2>/dev/null)
-
-	if [ -n "$NODE_AGENT_PID" ]
-	then
-		kill -0 $NODE_AGENT_PID || return 1
-		kill -HUP $NODE_AGENT_PID && return 0
-	fi
-
-	return 1
-}
-
-#
-# node_find_application <type>
-#
-#	Used config vars: $COMMAND_START_KDE, $COMMAND_START_GNOME,
-#			  $COMMAND_START_CDE, $COMMAND_XTERM, $USER_X_STARTUP_SCRIPT,
-#			  $DEFAULT_X_SESSION
-
-node_find_application()
-{
-	NODE_STARTX=""
-
-	case $1 in
-		unix-kde)
-			NODE_STARTX=$COMMAND_START_KDE
-		;;
-		unix-gnome)
-			NODE_STARTX=$COMMAND_START_GNOME
-		;;
-		unix-cde)
-			NODE_STARTX=$COMMAND_START_CDE
-		;;
-		unix-application)
-			[ "$application" = "xterm" ] && application="$COMMAND_XTERM"
-			NODE_STARTX=$application
-		;;
-		unix-default)
-			if [ -x "$HOME/$USER_X_STARTUP_SCRIPT" ]; then
-				NODE_STARTX="$HOME/$USER_X_STARTUP_SCRIPT"
-			elif which "$DEFAULT_X_SESSION" >/dev/null 2>&1 ; then
-				NODE_STARTX="$DEFAULT_X_SESSION"
-			fi
-		;;
-	esac
-
-	echo "$NODE_STARTX"
-}
-
-#
-# node_start_applications
-#
-#	Used local vars: $type, $application, $sess_id, $mediahelper,
-#		         $virtualdesktop, $rootless, $display
-#
-#	Used config vars: <several>
-#
-
-node_start_applications()
-{
-	# close input and output file descriptors
-	exec 0<&-
-	exec 1>&-
-	exec 2>&-
-
-	#
-	# Prepare application startup
-	#
-	
-	. /etc/profile
-	[ -f ~/.bash_profile ] && . ~/.bash_profile
-
-	mkdir -p "$USER_FAKE_HOME/.nx/C-$sess_id/pids/"
-
-	#
-	# Which application do we start?
-	#
-
-	NODE_APPLICATION=$(node_find_application "$type")
-
-	#
-	# Check if we want to use a mediahelper
-	#
-
-	if [ "$mediahelper" = "esd" ]
-	then
-		# Set Espeaker variable
-		let ESPEAKER=$display+7000
-		export ESPEAKER="127.0.0.1:$ESPEAKER"
-		
-		# Do not spawn new ESD daemons
-		export ESD_NO_SPAWN="yes"
-			
-		# Check for config file directive
-		if [ "$ENABLE_ESD_PRELOAD" = "1" -a -x "$(find_app $ESD_BIN_PRELOAD)" ]
-		then
-			NODE_APPLICATION="$ESD_BIN_PRELOAD $NODE_APPLICATION"
-			echo "Info: NXNODE - Using $ESD_BIN_PRELOAD wrapper script." >> "$USER_FAKE_HOME/.nx/C-$sess_id/session"
-		fi
-	elif [ "$mediahelper" = "artsd" ]
-	then
-		# Overwrite users mcoprc
-		echo -n "GlobalComm=Arts::X11GlobalComm" > $HOME/.mcoprc
-		if [ "$ENABLE_ARTSD_PRELOAD" = "1" -a -x "$(find_app $ARTSD_BIN_PRELOAD)" ]
-		then
-			NODE_APPLICATION="$ARTSD_BIN_PRELOAD $NODE_APPLICATION"
-			echo "Info: NXNODE - Using $ARTSD_BIN_PRELOAD wrapper script." >> "$USER_FAKE_HOME/.nx/C-$sess_id/session"
-		fi
-	fi
-
-	#
-	# Do we need to PRELOAD any libraries?
-	#	
-
-	[ "$virtualdesktop" = "0" -a "$rootless" != "1" ] && export LD_PRELOAD="$APPLICATION_LIBRARY_PRELOAD:$LD_PRELOAD"
-
-	#
-	# Should we start a window manager?
-	#
-	
-	if [ "$virtualdesktop" = "1" -a "$type" = "unix-application" -a "$DEFAULT_X_WM" != "" -a -x "$(find_app $DEFAULT_X_WM)" ]
-	then
-		DISPLAY=unix:$display $DEFAULT_X_WM >>"$USER_FAKE_HOME/.nx/C-$sess_id/session" 2>&1 &
-		NODE_WM_PID=$!
-	fi
-
-	#
-	# Startup the application
-	#
-	
-	DISPLAY=unix:$display $NODE_APPLICATION >>"$USER_FAKE_HOME/.nx/C-$sess_id/session" 2>&1 &
-	NODE_APP_PID=$!
-	
-	mkdir -p "$USER_FAKE_HOME/.nx/C-$sess_id/pids/"
-	echo "$NODE_APP_PID" >"$USER_FAKE_HOME/.nx/C-$sess_id/pids/applications"
-	wait $NODE_APP_PID
-
-	#
-	# Kill or wait for the started window manager
-	#	
-	
-	if [ -n "$NODE_WM_PID" ]
-	then
-		# kill the WM after application is finished?
-		[ "$KILL_DEFAULT_X_WM" = "1" ] && kill $NODE_WM_PID 2>/dev/null
-		# or just wait until it finishes?
-		[ "$KILL_DEFAULT_X_WM" = "1" ] || wait $NODE_WM_PID
-	fi
-	rm -f "$USER_FAKE_HOME/.nx/C-$sess_id/pids/applications"
-
-	# Do not terminate agent in case of rootless agent mode.
-	# The agent times out after a while by itself anyway.
-	
-	[ "$virtualdesktop" = "1" -o "$rootless" != "1" ] && node_terminate_agent "$sess_id"
-}
-
-#
-# node_persistent_session
-#
-#	Is the user allowed to run a persistent session?
-#
-
-node_agent_persistent_session()
-{
-	P="-nopersistent"
-	OLD_IFS=$IFS
-	IFS=","
-	[ "$ENABLE_PERSISTENT_SESSION" = "all" ] && P="-persistent"
-	[ "$ENABLE_PERSISTENT_SESSION" = "all" ] || for USERNAME in $ENABLE_PERSISTENT_SESSION; do
-		[ "${USERNAME:0:1}" != "@" ] && [ "$USER" = "$USERNAME" ] && P="-persistent" && break ;
-		[ "${USERNAME:0:1}" = "@" ] && [ -z $(groups "$USER" | egrep "^${USERNAME:1}:") ] && P="-persistent" && break ;
-	done
-	for USERNAME in $DISABLE_PERSISTENT_SESSION; do
-		[ "${USERNAME:0:1}" != "@" ] && [ "$USER" = "$USERNAME" ] && P="-nopersistent" && break ;
-		[ "${USERNAME:0:1}" = "@" ] && [ -z $(groups "$USER" | egrep "^${USERNAME:1}:") ] && P="-nopersistent" && break ;
-	done
-	IFS=$OLD_IFS
-	echo "$P"
-}
-
-#
-# node_start_agent
-#
-
-node_start_agent()
-{
-	# Ok, now we do some wicked fd magic.
-	#
-	# first part:
-	#	
-	# nxagent's fd #2 -> fd #3
-	
-	# second part:
-	#
-	# fd #1 -> #4
-	# fd #3 -> #1
-	# tee | node_start_monitor
-
-	# third part
-	# fd #4 -> #1
-
-	# => all output of nxagent goes to tee | node_start_monitor, while
-	#    leaving all other output flow through like normally.
-	
-	# preparations
-	exec 3>&2
-	exec 4>&1
-
-	{
-	
-	{
-
-	#
-	# Setup environment
-	#
-
-	export DISPLAY="nx/nx,options=$USER_FAKE_HOME/.nx/C-$sess_id/options:$display"
-	export XAUTHORITY="$USER_FAKE_HOME/.nx/C-$sess_id/authority"
-	export HOME="$USER_FAKE_HOME"
-
-	#
-	# Setup optional parameters for nxagent
-	#
-
-	# keyboard
-	
-	K=""
-	# backwards compatibility
-	[ -n "$keyboard" ] && K="-keyboard $keyboard"
-	[ -n "$kbtype" ] && K="-kbtype $kbtype"
-
-	# backingstore
-	
-	B=""
-	[ -n "$backingstore" -a "$ENABLE_2_0_0_BACKEND" != "1" ] && B="-bs $backingstore"
-
-	# geometry
-	
-	G=""
-	[ -n "$geometry" ] && G="-geometry $geometry"
-
-	# type of session
-	
-	R="-D"
-	[ "$rootless" = "1" ] && R="-R"
-
-	# Setup fullscreen parameters
-	
-	vncfullscreen=""
-	[ "$geometry" = "fullscreen" -a "$type" = "vnc" ] && vncfullscreen="-fullscreen" && G=""
-	
-	[ "$geometry" = "fullscreen" -a "$type" = "windows" ] && G="-geometry `echo $screeninfo | cut -d"x" -f1,2`"
-
-	#
-	# Start the wanted nxagent
-	#
-
-	if [ "$type" = "windows" ]
-	then
-		# nxdesktop session (Windows RDP)
-
-		[ "$SET_LD_LIBRARY_PATH" = "1" ] && export LD_LIBRARY_PATH="$AGENT_LIBRARY_PATH:$LD_LIBRARY_PATH"
-		# Setup optional parameters
-		
-		U=""
-		P=""
-		D=""
-		[ -n "$agent_user" ] && U="-u $agent_user"
-		[ -n "$agent_password" ] && P="-p -"
-		[ -n "$agent_domain" ] && D="-d $agent_domain"
-
-		# Start the agent
-		
-		echo "$agent_password" | $PATH_BIN/nxdesktop -name "NX - $user@$SERVER_NAME:$display - $session (GPL Edition)" -option "$USER_FAKE_HOME/.nx/C-$sess_id/options" $K $G $U $P $D $agent_server $AGENT_EXTRA_OPTIONS_RDP 2>&3 &
-
-	elif [ "$type" = "vnc" ]
-	then
-		# nxviewer session (VNC RFP)
-		
-		[ "$SET_LD_LIBRARY_PATH" = "1" ] && export LD_LIBRARY_PATH="$AGENT_LIBRARY_PATH:$LD_LIBRARY_PATH"
-		# Setup password
-		
-		mkdir -p "$USER_FAKE_HOME/.nx/C-$sess_id/scripts/"
-		echo "$agent_password" | $PATH_BIN/nxpasswd "$USER_FAKE_HOME/.nx/C-$sess_id/scripts/.passwd" doit
-		
-		# Start the agent
-		
-		$PATH_BIN/nxviewer -encodings tight hextile copyrect raw -passwd $USER_FAKE_HOME/.nx/C-$sess_id/scripts/.passwd -name "NX - $user@$SERVER_NAME:$display - $session (GPL Edition)" -option "$USER_FAKE_HOME/.nx/C-$sess_id/options" $vncfullscreen $G $K $agent_server $AGENT_EXTRA_OPTIONS_RFB 2>&3 &
-
-	elif [ "$R" = "-R" -a "$rootless" != "1" ]
-	then
-		# nxproxy single application mode session
-		[ "$SET_LD_LIBRARY_PATH" = "1" ] && export LD_LIBRARY_PATH="$PROXY_LIBRARY_PATH:$LD_LIBRARY_PATH"
-		$PATH_BIN/nxproxy -C :$display $PROXY_EXTRA_OPTIONS 2>&3 &
-	else
-		# nxagent session (X11)
-		[ "$SET_LD_LIBRARY_PATH" = "1" ] && export LD_LIBRARY_PATH="$AGENT_LIBRARY_PATH:$LD_LIBRARY_PATH"
-		
-		# Setup optional parameters
-
-		P=$(node_agent_persistent_session)
-		FP=""
-		[ -n "$AGENT_FONT_SERVER" ] && FP="-fp $AGENT_FONT_SERVER"
-		
-		# Start the agent
-		
-		PATH="$PATH_BIN:$PATH" $PATH_BIN/nxagent $P $R -name "NX - $user@$SERVER_NAME:$display - $session (GPL Edition)" -option "$USER_FAKE_HOME/.nx/C-$sess_id/options" $K $G $B $FP $AGENT_EXTRA_OPTIONS_X :$display 2>&3 &
-	fi
-	
-	#
-	# Wait for the agent
-	#
-	
-	NODE_AGENT_PID=$!
-	mkdir -p "$USER_FAKE_HOME/.nx/C-$sess_id/pids/"
-	echo "$NODE_AGENT_PID" >"$USER_FAKE_HOME/.nx/C-$sess_id/pids/agent"
-	wait $NODE_AGENT_PID
-
-	NODE_AGENT_EXIT_STATUS=$?
-	NODE_FAILED=""
-	if [ $NODE_AGENT_EXIT_STATUS -ne 0 ]
-	then
-		echo "NX> 1004 Error: NX Agent exited with exit status 1."
-		NODE_FAILED="failed"
-	fi
-	echo "NX> 1006 Session status: closed"
-	
-	#
-	# Cleanup session information
-	#	
-	
-	rm -f "$USER_FAKE_HOME/.nx/C-$sess_id/pids/agent"
-	node_terminate_session "$sess_id" "$NODE_FAILED"
-	
-	# remove possible leftovers of nxagent
-	rm -f /tmp/.X$display-lock
-	rm -f /tmp/.X11-unix/X$display
-	} 3>&1 1>&4 | tee "$USER_FAKE_HOME/.nx/C-$sess_id/session" | node_start_monitor; } 4>&1
-}
-
-#
-# node_cupsd_stop
-#
-#	Used local vars: $sess_id
-#
-
-node_cupsd_stop()
-{
-	#
-	# Cleanup userspace cups daemon	
-	#
-	
-	[ -e "$USER_FAKE_HOME/.nx/C-$sess_id/pids/cupsd" ] || return
-	
-	NODE_CUPSD_PID=$(cat "$USER_FAKE_HOME/.nx/C-$sess_id/pids/cupsd")
-	
-	# Check for a running userspace cupsd, look if its still active 
-	# and kill it if so
-	( [ -n "$NODE_CUPSD_PID" ] && kill -0 $NODE_CUPSD_PID && kill $NODE_CUPSD_PID && sleep 2 && kill -0 $NODE_CUPSD_PID && kill -9 $NODE_CUPSD_PID ) 2>/dev/null
-	
-	# delete pid file
-	rm -f "$USER_FAKE_HOME/.nx/C-$sess_id/pids/cupsd"
-	
-	# remove all printers
-	echo >"$USER_FAKE_HOME/.nx/C-$sess_id/cups/printers.conf"
-}
-
-#
-# node_cupsd_setup
-#
-#	Used local vars: $sess_id, $display
-#
-
-node_cupsd_setup()
-{
-	let NODE_CUPSD_PORT=$display+9000 # offset 9000 for userspace cupsd's
-	export NODE_CUPSD_PORT
-	
-	mkdir -p "$USER_FAKE_HOME/.nx/C-$sess_id/pids/"
-	[ -e "$USER_FAKE_HOME/.nx/C-$sess_id/pids/cupsd" ] && return
-	touch "$USER_FAKE_HOME/.nx/C-$sess_id/pids/cupsd"
-	
-	mkdir -p "$USER_FAKE_HOME/.nx/C-$sess_id/cups/spool/tmp" "$USER_FAKE_HOME/.nx/C-$sess_id/cups/spool/certs" "$USER_FAKE_HOME/.nx/C-$sess_id/cups/ppd"
-	ln -sf spool/certs "$USER_FAKE_HOME/.nx/C-$sess_id/cups/certs"
-
-cat <<EOF > $USER_FAKE_HOME/.nx/C-$sess_id/cups/cupsd.conf
-AccessLog /dev/null
-ErrorLog error_log
-PageLog page_log
-LogLevel info
-TempDir $USER_FAKE_HOME/.nx/C-$sess_id/cups/spool/tmp
-RequestRoot $USER_FAKE_HOME/.nx/C-$sess_id/cups/spool
-ServerRoot $USER_FAKE_HOME/.nx/C-$sess_id/cups/
-Port $NODE_CUPSD_PORT
-Browsing Off
-ServerName localhost
-
-<Location />
-Order Deny,Allow
-Deny From All
-Allow from 127.0.0.1
-</Location>
-EOF
-
-	touch "$USER_FAKE_HOME/.nx/C-$sess_id/cups/printers.conf" "$USER_FAKE_HOME/.nx/C-$sess_id/cups/classes.conf"
-
-	# copy mime.* files
-	cp -af "$CUPS_ETC"/mime.* "$USER_FAKE_HOME/.nx/C-$sess_id/cups/"
-
-	# start cupsd
-	$COMMAND_CUPSD -f -c "$USER_FAKE_HOME/.nx/C-$sess_id/cups/cupsd.conf" &>/dev/null </dev/null &
-	NODE_CUPSD_PID=$!
-	sleep 3
-	echo $NODE_CUPSD_PID >"$USER_FAKE_HOME/.nx/C-$sess_id/pids/cupsd"
-
-	# setup KDE
-	if [ "$ENABLE_KDE_CUPS" = "1" -a -e "$KDE_PRINTRC" ]
-	then
-		if egrep -q "^Port=" "$KDE_PRINTRC"
-		then
-			perl -pi -e 's/^Port=.*/Port='"$NODE_CUPSD_PORT"'/g' "$KDE_PRINTRC"
-		else
-			echo "[CUPS]" >> "$KDE_PRINTRC"
-			echo "Port=$NODE_CUPSD_PORT" >> "$KDE_PRINTRC"
-		fi
-	fi
-}
-
-#
-# node_cupsd_reload
-#
-#	Used local vars: $sess_id
-#
-
-node_cupsd_reload()
-{
-	[ -e "$USER_FAKE_HOME/.nx/C-$sess_id/pids/cupsd" ] || return
-	NODE_CUPSD_PID=$(cat "$USER_FAKE_HOME/.nx/C-$sess_id/pids/cupsd")
-	[ -n "$NODE_CUPSD_PID" ] && kill -0 $NODE_CUPSD_PID && kill -HUP $NODE_CUPSD_PID
-}
-
-node_cupsd_get_port()
-{
-	node_cupsd_setup
-	echo $NODE_CUPSD_PORT
-}
-
-node_umount_smb()
-{
-	[ -e "$USER_FAKE_HOME/.nx/C-$sess_id/scripts/mpoint" ] || return
-	cat "$USER_FAKE_HOME/.nx/C-$sess_id/scripts/mpoint" | while read mpoint
-	do
-		$COMMAND_SMBUMOUNT "$mpoint" >/dev/null 2>/dev/null
-	done
-}
-
-node_stop_services()
-{
-	node_umount_smb
-	node_cupsd_stop
-}
-
-node_emergency_exit()
-{
-	# umount shares & stop printers
-	node_stop_services
-
-	# kill the session
-	node_terminate_session "$sess_id" "failed"
-
-	echo "NX> 1004 Error: Emergency exit due to kill signal."
-}
-
-#
-# Monitoring the nxagent: Its also kind of a "state-machine" 
-#                         as it has to keep track of different 
-#                         connection states and react differently.
-#
-
-node_start_monitor_2_0_0()
-{
-	NODE_TAIL_PID=""
-	NODE_SUSPEND_STATUS="$2"
-
-	while read line 
-	do
-		#
-		# Catch tail pid
-		#
-		
-		if stringinstring "Info: tail -f running with pid" "$line"
-		then
-			NODE_TAIL_PID=$(echo $line | cut -d"'" -f2)
-			echo "$NODE_TAIL_PID" >"$USER_FAKE_HOME/.nx/C-$sess_id/pids/tail"
-		fi
-
-		#
-		# Session messages
-		#
-
-		if stringinstring "Session: Starting session at" "$line"
-		then
-			echo "NX> 1009 Session status: starting"
-		fi
-		
-		if stringinstring "Session: Suspending session at" "$line"
-		then
-			echo "NX> 1009 Session status: suspending"
-		fi
-		
-		if stringinstring "Session: Terminating session at" "$line"
-		then
-			echo "NX> 1009 Session status: terminating"
-		fi
-		
-		if stringinstring "Session: Resuming session at" "$line"
-		then
-			echo "NX> 1009 Session status: resuming"
-		fi
-
-
-		#
-		# Session suspend
-		#
-
-		if stringinstring "Session: Session suspended at" "$line"
-		then
-			echo "NX> 1005 Session status: suspended"
-			# umount shares & stop printers
-
-			if [ "$NODE_SUSPEND_STATUS" = "Running" ]
-			then
-				node_suspend_session "$sess_id"
-				NODE_SUSPEND_STATUS=""
-			else
-				node_stop_services
-			fi
-		fi
-
-		#
-		# Watchdog termination
-		#
-
-		if stringinstring "Info: Watchdog running with pid" "$line"
-		then
-			NODE_WATCHDOG_PID=$(echo $line | cut -d"'" -f2)
-		fi
-
-		if stringinstring "Info: Waiting the watchdog process to complete." "$line"
-		then
-			# Kill the watchdog
-			kill $NODE_WATCHDOG_PID 2>/dev/null
-		fi
-		
-		#
-		# Session is running
-		#
-		
-		if stringinstring "Info: Waiting for connection from" "$line"
-		then
-			echo "NX> 710 Session status: running"
-			echo "NX> 1002 Commit"
-			echo "NX> 1006 Session status: running"
-		fi
-
-		#
-		# Reconnection success!
-		#
-		
-		if stringinstring "Session: Session resumed at" "$line"
-		then
-			echo "NX> 718 Session restore succeded"
-			if [ "$1" = "restore" ]
-			then
-				kill $NODE_TAIL_PID
-				break
-			fi
-		fi
-
-		#
-		# Reconnection failure
-		#
-		
-		if stringinstring "Session: Display failure detected at" "$line"
-		then
-			echo "NX> 596 Error: Session $1 failed. Reason was: $line"
-			if [ "$1" = "restore" ]
-			then
-				kill $NODE_TAIL_PID
-				break
-			fi
-		fi
-	done
-	
-	trap "" EXIT
-	
-	[ "$1" = "restore" ] ||	node_stop_services
-	# close all open file descriptors
-	exec 0<&-
-	exec 1>&-
-	exec 2>&-
-	exit 0
-}
-
-node_start_monitor_1_5_0()
-{
-	NODE_RUNNING=0
-	NODE_TAIL_PID=""
-	NODE_SUSPEND_STATUS="$2"
-
-	while read line 
-	do
-		#
-		# Catch tail pid
-		#
-		
-		if stringinstring "Info: tail -f running with pid" "$line"
-		then
-			NODE_TAIL_PID=$(echo $line | cut -d"'" -f2)
-			echo "$NODE_TAIL_PID" >"$USER_FAKE_HOME/.nx/C-$sess_id/pids/tail"
-		fi
-
-		#
-		# Session suspend
-		#
-
-		if stringinstring "Info: Session suspended." "$line"
-		then
-			echo "NX> 1005 Session status: suspended"
-			# umount shares & stop printers
-
-			if [ "$NODE_SUSPEND_STATUS" = "Running" ]
-			then
-				node_suspend_session "$sess_id"
-				NODE_SUSPEND_STATUS=""
-			else
-				node_stop_services
-			fi
-		fi
-
-		#
-		# Proxy termination
-		#
-
-		if stringinstring "Info: Waiting for a further signal to complete." "$line"
-		then
-			# Kill the proxy
-			kill -HUP $NODE_PROXY_PID 2>/dev/null
-		fi
-		
-		#
-		# Session end
-		#
-		
-		if stringinstring "Info: End of session requested by " "$line" && [ "$RECONNECT" = "0" ] && ! stringinstring "'SIGHUP'" "$line"
-		then
-			echo "NX> 1009 Session status: terminating"
-			kill -HUP $NODE_PROXY_PID 2>/dev/null
-		fi
-		
-		#
-		# Session is running
-		#
-		
-		if stringinstring "Info: Waiting for connection from" "$line"
-		then
-			echo "NX> 710 Session status: running"
-			echo "NX> 1002 Commit"
-			echo "NX> 1006 Session status: running"
-		fi
-
-		#
-		# Status = Running - Do _not_ fail anymore.
-		#
-
-		if stringinstring "Info: Connection with remote proxy established." "$line"
-		then
-			NODE_RUNNING=1
-		fi
-	
-		#
-		# Catch proxy pid
-		#
-		
-		if stringinstring "Info: Proxy running in server mode with pid" "$line"
-		then
-			NODE_PROXY_PID=$(echo $line | cut -d"'" -f2)
-		fi
-		
-		#
-		# Reconnection success!
-		#
-		
-		if stringinstring "Info: Reconnection succeded." "$line"
-		then
-			echo "NX> 718 Session restore succeded"
-			if [ "$1" = "restore" ]
-			then
-				kill $NODE_TAIL_PID
-				break
-			fi
-		fi
-
-		#
-		# Reconnection failure
-		#
-		
-		if stringinstring "Info: Reconnection failed:" "$line"
-		then
-			echo "NX> 1005 Session status: suspended"
-			echo "NX> 596 Error: Session restore failed. Reason was: $line"
-			if [ "$1" = "restore" ]
-			then
-				kill $NODE_TAIL_PID
-				break
-			fi
-		fi
-	done
-	
-	trap "" EXIT
-
-	[ "$1" = "restore" ] ||	node_stop_services
-	# close all open file descriptors
-	exec 0<&-
-	exec 1>&-
-	exec 2>&-
-	exit 0
-}
-
-#
-# node_start_monitor <start|restore> <Running|Suspended>
-#
-
-node_start_monitor()
-{
-	[ "$ENABLE_2_0_0_BACKEND" = "1" ] && node_start_monitor_2_0_0 "$@"
-	[ "$ENABLE_2_0_0_BACKEND" = "1" ] || node_start_monitor_1_5_0 "$@"
-}
-
-#
-# -----------------------------------------------------------------------------
-# startsession - Start a new session.
-# -----------------------------------------------------------------------------
-#
-
-startsession()
-{
-
-	# user=knoppix&userip=192.168.1.66&uniqueid=6A8269CC467264EAEF6349D062689755&display=1000&session=lappi%5ffull&type=unix%2dkde&cache=8M&images=32M&cookie=84765070afee043cf83f85d21130145f&link=lan&render=1&backingstore=when_requested&imagecompressionmethod=0&geometry=fullscreen&keyboard=fr&media=0&samba=1&agent_server=&agent_user=&agent_password=
-
-	user=$(getparam user)
-	userip=$(getparam userip)
-	uniqueid=$(getparam uniqueid)
-	display=$(getparam display)
-	session=$(getparam session)
-	type=$(getparam type | sed 's/%2d/-/g')
-	application=$(getparam application)
-	cache=$(getparam cache)
-	images=$(getparam images)
-	cookie=$(getparam cookie)
-	link=$(getparam link)
-	virtualdesktop=$(getparam virtualdesktop)
-	render=$(getparam render)
-	backingstore=$(getparam backingstore)
-	imagecompressionmethod=$(getparam imagecompressionmethod)
-	imagecompressionlevel=$(getparam imagecompressionlevel)
-	geometry=$(getparam geometry)
-	keyboard=$(getparam keyboard)
-	kbtype=$(getparam kbtype)
-	media=$(getparam media)
-	mediahelper=$(getparam mediahelper)
-	sync=$(getparam sync)
-	samba=$(getparam samba)
-	cups=$(getparam cups)
-	agent_server=$(getparam agent_server)
-	agent_user=$(getparam agent_user)
-	agent_password=$(getparam agent_password)
-	agent_domain=$(getparam agent_domain)
-	screeninfo=$(getparam screeninfo)
-	nodelay=$(getparam nodelay)
-	[ "$PROXY_TCP_NODELAY" = "0" ] && nodelay=0
-
-	# 1.5.0 options
-	rdpcolors=$(getparam rdpcolors)
-	rdpcache=$(getparam rdpcache)
-	http=$(getparam http)
-	
-	# nxclient > 1.5.0-106 variables
-	resize=$(getparam resize)
-	keybd=$(getparam keybd)
-	kbload=$(getparam kbload)
-	keymap=$(getparam keymap)
-
-	rootless=0
-	# Its still the clients decision
-	[ "$ENABLE_ROOTLESS_MODE" = "1" ] &&  rootless=$(getparam rootless)
-	
-	# FreeNX specific variables
-	clientproto=$(getparam clientproto)
-	status=$(getparam status)
-	host=$(getparam host)
-
-	fullscreen=""
-	[ "$geometry" = "fullscreen" ] && fullscreen="1"
-
-	[ "$EXPORT_USERIP" = "1" ] && export NXUSERIP="$userip"
-
-	ssl_tunnel=$(getparam encryption)
-	[ -z "$ssl_tunnel" ] && ssl_tunnel=0
-	
-	if [ "$ssl_tunnel" = "1" ]
-	then
-		# we need to use the IP of the "calling" server now
-		userip=$(echo $SSH_CLIENT $SSH2_CLIENT | cut -d" " -f1 | sed 's/::ffff://g')
-
-		# TODO: This logic is broken ... ;-)
-		[ -z "$userip" ] && userip="127.0.0.1"
-		[ -z "$userip" -a "$host" != "127.0.0.1" ] && userip="*"
-	fi
-	
-	# ok, lets make the session dir first:
-	
-	sess_id="$SERVER_NAME-$display-$uniqueid"
-	[ "$EXPORT_SESSIONID" = "1" ] && export NXSESSIONID="$sess_id"
-	
-	OLD_UMASK=$(umask)
-	umask 0022
-	mkdir -p $USER_FAKE_HOME
-	umask 0077
-	mkdir -p $USER_FAKE_HOME/.nx/C-$sess_id
-	umask $OLD_UMASK
-	
-	# cache=8M,images=32M,pack=nopack,link=lan,type=unix-kde,cleanup=0,accept=192.168.1.66,cookie=E38A94A77F975443AF04EC911881B120,id=Knoppix-1000-6A8269CC467264EAEF6349D062689755,samba=1,render=1:1000
-	
-	PACK=""
-	[ -z "$imagecompressionlevel" ] && imagecompressionlevel="9"
-	
-	[ "$imagecompressionmethod" = "0" ] && PACK="pack=nopack,"
-	[ "$imagecompressionmethod" = "1" ] && PACK="pack=16m-jpeg-$imagecompressionlevel,"
-	[ "$imagecompressionmethod" = "2" ] && PACK="pack=16m-png-9,"
-	
-	proxy_cookie=$(echo $[$RANDOM*$RANDOM] | $COMMAND_MD5SUM | cut -d" " -f1)
-
-	if [ "$clientproto" = "1.5.0" ]
-	then
-		# enable fake cookie authentication
-		cookie=$proxy_cookie
-	fi
-
-	# write options file
-	[ -z "$samba" ] && samba=0
-	[ -z "$media" ] && media=0
-	[ -z "$nodelay" ] && nodelay=1
-
-	CACHE="cache=$cache,"
-	[ -z "$cache" ] && CACHE=""
-	IMAGES="images=$images,"
-	[ -z "$images" ] && IMAGES=""
-
-	ACCEPT="accept=$userip,"
-	[ "$userip" = "*" ] && ACCEPT=""
-
-	OLD_UMASK=$(umask)
-	umask 0077
-
-cat << EOF > $USER_FAKE_HOME/.nx/C-$sess_id/options
-${kbtype:+kbtype=$kbtype,}${kbload:+kbload=$kbload,}${keymap:+keymap=$keymap,}${resize:+resize=$resize,}${CACHE}${IMAGES}${PACK}link=$link,nodelay=$nodelay,type=$type,cleanup=0,${ACCEPT}cookie=$proxy_cookie,id=$sess_id,samba=$samba,media=$media${sync:+,sync=$sync}${cups:+,cups=$cups}${keybd:+,keybd=$keybd}${http:+,http=$http}${rdpcolors:+,rdpcolors=$rdpcolors}${rdpcache:+,rdpcache=$rdpcache}${fullscreen:+,fullscreen=1}:$display
-EOF
-	umask $OLD_UMASK
-#samba=$samba,
-	#cache=$cache,images=$images,pack=nopack,link=$link,type=$type,cleanup=0,accept=$userip,cookie=$proxy_cookie,id=$sess_id
-#samba=$samba,media=$media,render=$render:$display
-
-	# write xauth script file
-
-$COMMAND_XAUTH >/dev/null 2>&1 <<EOF
-add localhost:$display MIT-MAGIC-COOKIE-1 $cookie
-add unix:$display MIT-MAGIC-COOKIE-1 $cookie
-exit
-EOF
-
-$COMMAND_XAUTH -f "$USER_FAKE_HOME/.nx/C-$sess_id/authority" >/dev/null 2>&1 <<EOF
-add localhost:$display MIT-MAGIC-COOKIE-1 $cookie
-add unix:$display MIT-MAGIC-COOKIE-1 $cookie
-exit
-EOF
-
-	mkdir -m700 $USER_FAKE_HOME/.nx/C-$sess_id/scripts/ 2>/dev/null || chmod 700 $USER_FAKE_HOME/.nx/C-$sess_id/scripts/
-
-cat << EOF >$USER_FAKE_HOME/.nx/C-$sess_id/scripts/authority
-remove localhost:$display
-remove unix:$display
-exit
-EOF
-
-if [ "$1" = "restore" ]
-then
-	echo > $USER_FAKE_HOME/.nx/C-$sess_id/session
-	sh -c 'echo "Info: tail -f running with pid '\'\$$\''."; exec tail -n1 -f '$USER_FAKE_HOME'/.nx/C-'$sess_id'/session' | node_start_monitor "$1" "$status" &
-
-	MONITOR_PID=$!
-	export MONITOR_PID
-
-	mkdir -p $USER_FAKE_HOME/.nx/C-$sess_id/pids/
-	echo "$MONITOR_PID" > $USER_FAKE_HOME/.nx/C-$sess_id/pids/monitor
-
-	node_suspend_session $sess_id || { echo "Info: Reconnection failed: NX Agent process could not be found." >>"$USER_FAKE_HOME/.nx/C-$sess_id/session"; node_fail_restore_session $sess_id; }
-else
-	node_start_agent &
-	node_start_applications &
-fi
-
-if which "$NODE_AUTOSTART" >/dev/null 2>&1
-then
-	sess_id="$SERVER_NAME-$display-$uniqueid"
-	# go into background immediately
-	NXSESSIONID="$sess_id" DISPLAY=unix:$display "$NODE_AUTOSTART" "$1" >/dev/null 2>&1 &
-	# dont't wait for this child!
-	disown $!
-fi
-	
-cat << EOF
-NX> 700 Session id: $sess_id
-NX> 705 Session display: $display
-NX> 703 Session type: $type
-NX> 701 Proxy cookie: $proxy_cookie
-NX> 702 Proxy IP: $userip
-NX> 706 Agent cookie: $cookie
-NX> 704 Session cache: $type
-NX> 707 SSL tunneling: $ssl_tunnel
-EOF
-
-# collection ...
-
-# NX> 1004 Error:
-#Session 'Knoppix-1000-40EFB9F64FA55C64C41C72CA39EBD720' has failed after reaching usable state. Session directory '/home/knoppix/.nx/F-C-Knoppix-1000-40EFB9F64FA55C64C41C72CA39EBD720' will be not deleted to allow for further investigation.
-
-if [ -n "$MONITOR_PID" ]
-then
-	wait "$MONITOR_PID"
-	rm -f "$USER_FAKE_HOME/.nx/C-$sess_id/pids/monitor"
-	rm -f "$USER_FAKE_HOME/.nx/C-$sess_id/pids/tail"
-fi
-wait # for all children
-}
-
-#
-# -----------------------------------------------------------------------------
-# cmd_node functions - changes lots of small variables
-# -----------------------------------------------------------------------------
-#
-
-cmd_node_terminate()
-{
-	sessionid=$(getparam_sessionid)
-	echo "NX> 716 Terminating session $sessionid on user request."
-	display=$(cd $USER_FAKE_HOME/.nx/; echo C-$SERVER_NAME-*-$sessionid | rev |cut -d"-" -f2 |rev)
-	node_terminate_session "$SERVER_NAME-$display-$sessionid"
-}
-
-cmd_node_suspend()
-{
-	sessionid=$(getparam_sessionid)
-	echo "NX> 716 Suspending session $sessionid on user request."
-	display=$(cd $USER_FAKE_HOME/.nx/; echo C-$SERVER_NAME-*-$sessionid | rev | cut -d"-" -f2 |rev)
-	node_suspend_session "$SERVER_NAME-$display-$sessionid"
-}
-
-cmd_node_smbmount()
-{
-	sessionid=$(getparam_sessionid)
-	port=$(getparam port)
-	username=$(getparam username)
-	password=$(getparam password)
-	share=$(getparam share)
-	computername=$(getparam computername)
-	dir=$(getparam dir | sed 's|$(SHARES)|MyShares|g')
-	rdir=$(getparam dir | sed 's|$(SHARES)/||g')
-	display=$(cd $USER_FAKE_HOME/.nx/; echo C-$SERVER_NAME-*-$sessionid | rev|cut -d"-" -f2| rev)
-	mkdir -p "$HOME/$dir"
-	error=$(PASSWD="$password" "$COMMAND_SMBMOUNT" "//$computername/$rdir" "$HOME/$dir" -o username="$username,ip=127.0.0.1,port=$port" 2>&1)
-	if [ $? -eq 0 ]
-	then
-		$PATH_BIN/nxclient -dialog ok -caption "NXServer Message" -message "Info: Share: '//$computername/$rdir' mounted on: '$HOME/$dir'" -noautokill -display :$display &
-		echo "$HOME/$dir" >> "$USER_FAKE_HOME/.nx/C-$SERVER_NAME-$display-$sessionid/scripts/mpoint"
-	else
-		$PATH_BIN/nxclient -dialog ok -caption "NXServer Message" -message "Info: Share: '//$computername/$rdir' failed to mount: $error" -noautokill -display :$display &
-	fi
-}
-
-cmd_node_addprinter()
-{
-	sessionid=$(getparam_sessionid)
-	type=$(getparam type)
-	port=$(getparam port)
-	username=$(getparam username)
-	password=$(getparam password)
-	share=$(getparam share)
-	printer=$(getparam printer)
-	computername=$(getparam computername)
-	public=$(getparam public)
-	model=$(getparam model)
-	defaultPrinter=$(getparam defaultPrinter)
-	display=$(cd $USER_FAKE_HOME/.nx/; echo C-$SERVER_NAME-*-$sessionid | rev | cut -d"-" -f2 | rev)
-	sess_id="$SERVER_NAME-$display-$sessionid"
-	
-	# this will also setup the userspace cupsd
-	IPP_PORT=$(node_cupsd_get_port)
-	export IPP_PORT
-	
-	if [ "$type" = "smb" ]
-	then
-		DEVICE_URI="smb://$username:$password at localhost:$port/$share"
-		NAME="$share"
-	else
-		DEVICE_URI="ipp://$username:$password at localhost:$port/printers/$printer"
-		NAME="$printer"
-	fi
-	
-	MODEL=$($PATH_BIN/nxclient -printer "$NAME" -noautokill -display :$display)
-	[ -z "$MODEL" -o "$MODEL" = "cancel: aborted" ] && return
-	
-	PUBLIC="-u allow:$USER"
-	[ "$public" == "1" ] && PUBLIC=""
-	lpadmin -p "$NAME" -E -v "$DEVICE_URI" -m "$MODEL" $PUBLIC
-	[ "$defaultPrinter" = "1" ] && lpadmin -d "$NAME"
-}
-
-nxnode_func()
-{
-
-case "$1" in 
-	--startsession)
-		startsession
-	;;
-	--resumesession)
-		startsession "restore"
-	;;
-	--terminate)
-		cmd_node_terminate
-	;;
-	--suspend)
-		cmd_node_suspend
-	;;
-	--smbmount)
-		cmd_node_smbmount &>/dev/null </dev/null &
-	;;
-	--addprinter)
-		cmd_node_addprinter &>/dev/null </dev/null &
-	;;
-	--check)
-		echo "NX> 716 finished"
-	;;
-	--agent)
-		echo "NX> 716 Starting NX Agent ..."
-		shift
-		[ "$SET_LD_LIBRARY_PATH" = "1" ] && export LD_LIBRARY_PATH="$AGENT_LIBRARY_PATH:$LD_LIBRARY_PATH"
-		PATH="$PATH:$PATH_BIN" $PATH_BIN/nxagent -name "NX Agent Test - Args: $@" $@
-		echo "NX> 716 NX Agent exited with status: $?"
-	;;
-	--setkey)
-		mkdir -m 700 -p $HOME/.ssh
-		if ! grep -q "$(cat $NX_ETC_DIR/users.id_dsa.pub)" $HOME/.ssh/$SSH_AUTHORIZED_KEYS 2>/dev/null
-		then
-			cat $NX_ETC_DIR/users.id_dsa.pub >> $HOME/.ssh/$SSH_AUTHORIZED_KEYS
-			chmod 600 $HOME/.ssh/$SSH_AUTHORIZED_KEYS
-			echo "NX> 716 Public key added to: $HOME/.ssh/$SSH_AUTHORIZED_KEYS"
-		else
-			echo "NX> 716 Public key is already present in: $HOME/.ssh/$SSH_AUTHORIZED_KEYS"
-		fi
-	;;
-	*)
-		echo "NX> 500 Error: Command not found"
-	;;
-esac
-
-}
-
-
-if [ "$1" = "--slave" ]
-then
-	# New slave mode accepts more than 1 command at a time
-	echo "NX> 716 Slave mode started successfully."
-	
-	while read CMD
-	do
-		set -- "$CMD"
-		if [ "$1" != "--check" -a "$1" != "--setkey" -a "$1" != "--agent" ]
-		then 
-			read CMDLINE
-
-			CMDLINE="a=b&$CMDLINE"
-		fi
-		
-		if [ "$1" = "--startsession" -o "$1" = "--resumesession" ]
-		then
-			export SLAVE_PID=$$
-			( echo $CMDLINE | "$0" "$CMD"; kill $SLAVE_PID ) &
-		else
-			( echo $CMDLINE | "$0" "$CMD" ) &
-		fi
-
-	done
-else
-	nxnode_func "$@"
-fi
-
-echo "NX> 1001 Bye."

Copied: freenx-server/tags/FreeNX-0.6.0.99/nxnode (from rev 299, freenx-server/trunk/nxnode)

Deleted: freenx-server/tags/FreeNX-0.6.0.99/nxprint
===================================================================
--- freenx-server/trunk/nxprint	2007-01-23 02:15:28 UTC (rev 283)
+++ freenx-server/tags/FreeNX-0.6.0.99/nxprint	2007-01-24 19:29:36 UTC (rev 300)
@@ -1,68 +0,0 @@
-#!/bin/bash
-#
-# nxprint - Prints a list of available drivers or printers
-# 
-# Copyright (c) 2005 by Fabian Franz <freenx at fabian-franz.de>
-#
-# License: GPL, version 2
-#
-# SVN: $Id$
-#
-
-# disable foomatic by default
-FOOMATIC="no"
-
-HELP="no"
-DRIVERS="no"
-PRINTERS="no"
-
-while [ "$1" ]
-do
-        case "$1" in
-                --help) HELP="yes"; shift ;;
-                --drivers|-d) DRIVERS="yes"; shift ;;
-                --printers|-l) PRINTERS="yes"; shift ;;
-                --) shift ; break ;;
-                *) echo "Invalid flag $1" ; HELP="yes"; shift ; break ;;
-        esac
-done
-
-[ "$DRIVERS" = "no" -a "$PRINTERS" = "no" ] && HELP="yes"
-
-if [ "$HELP" = "yes" ]
-then
-        echo "nxprint - Prints a list of available drivers or printers"
-	echo ""
-        echo "Syntax: nxprint --help"
-        echo "        nxprint --drivers"
-        echo "        nxprint --printes"
-        echo
-        echo "  --drivers                prints a list of available CUPS drivers"
-        echo "  --printers               prints a list of available CUPS printers"
-        exit 0
-fi
-
-if [ "$DRIVERS" = "yes" ]
-then
-	echo "driver|Raw|Raw Queue|raw"
-	{ 
-        cd /usr/share/cups/model
-        awk -F '"' '/*Manufacturer:/ { a[FILENAME]=$2 }
-                    /*NickName:/ { b[FILENAME]=$2 } 
-                    END { 
-                       for (i in a) 
-                          print "driver|" (a[i]=="ESP"?substr(b[i],0,index(b[i]," ")-1):a[i]) "|"b[i]"|"i
-                    }' *.ppd
-        } | sort
-
-	if [ $FOOMATIC="yes" ]
-	then
-		# TODO: Add support for foomatic-style ppds
-		:
-	fi
-fi
-
-if [ "$PRINTERS" = "yes" ]
-then
-	lpstat -p | awk '{ print $1 "|" $2 }'
-fi

Copied: freenx-server/tags/FreeNX-0.6.0.99/nxprint (from rev 289, freenx-server/trunk/nxprint)

Deleted: freenx-server/tags/FreeNX-0.6.0.99/nxserver
===================================================================
--- freenx-server/trunk/nxserver	2007-01-23 02:15:28 UTC (rev 283)
+++ freenx-server/tags/FreeNX-0.6.0.99/nxserver	2007-01-24 19:29:36 UTC (rev 300)
@@ -1,1732 +0,0 @@
-#!/bin/bash
-
-# Free implementation of nxserver components
-#
-# To use nxserver add the user "nx" 
-# and use nxserver as default shell.
-#
-# Also make sure that hostkey based authentification works.
-# 
-# Copyright (c) 2004 by Fabian Franz <FreeNX at fabian-franz.de>.
-#
-# License: GNU GPL, version 2
-#
-# SVN: $Id$
-#
-
-# Read the config file
-. $(PATH=$(cd $(dirname $0) && pwd):$PATH which nxloadconfig) --
-
-# following two functions are Copyright by Klaus Knopper
-
-stringinstring(){
-case "$2" in *$1*) return 0;; esac
-return 1
-}
-
-# Reread boot command line; echo last parameter's argument or return false.
-getparam(){
-stringinstring "&$1=" "$CMDLINE" || return 1
-echo "$CMDLINE" |  tr "&" "\n" | egrep "^"$1"=" | awk -F= '{ VAL=$2 } END { print VAL }'
-return 0
-}
-
-
-############### PACKAGE passdb.bm #######################
-#
-# Library of passdb functions (outsource)
-#
-
-# Policy: Variable and function names _must_ start with passdb_ / PASSDB_
-
-# Needed global vars: $NX_ETC_DIR, $PATH_BIN
-
-# Needed nonstd functions: md5sum
-
-
-passdb_get_crypt_pass()
-{
-	echo "$@" | $COMMAND_MD5SUM | cut -d" " -f1
-}
-
-passdb_get_pass()
-{
-	PASSDB_CHUSER="$1"
-	PASSDB_PASS=$(egrep "^$PASSDB_CHUSER:" $NX_ETC_DIR/passwords 2>/dev/null | cut -d":" -f2)
-	if [ "$ENABLE_PASSDB_AUTHENTICATION" = "1" ]
-	then
-		egrep -q "^$PASSDB_CHUSER:" $NX_ETC_DIR/passwords 2>/dev/null && echo $PASSDB_PASS
-		egrep -q "^$PASSDB_CHUSER:" $NX_ETC_DIR/passwords 2>/dev/null || echo "NOT_VALID"
-	else
-		echo "NOT_VALID"
-	fi
-}
-
-passdb_chpass()
-{
-	PASSDB_CHUSER="$1"
-	PASSDB_ENC_PASS="$2"
-	cp -f $NX_ETC_DIR/passwords $NX_ETC_DIR/passwords.orig
-	perl -pi -e "s/$PASSDB_CHUSER:.*/$PASSDB_CHUSER:$PASSDB_ENC_PASS/g" $NX_ETC_DIR/passwords
-}
-
-passdb_user_exists()
-{
-	PASSDB_CHUSER="$1"
-	egrep -q "^$PASSDB_CHUSER:" $NX_ETC_DIR/passwords 2>/dev/null
-}
-
-
-passdb_remove_user()
-{
-	PASSDB_CHUSER="$1"
-	cp -f $NX_ETC_DIR/passwords $NX_ETC_DIR/passwords.orig
-	perl -pi -e "s/$PASSDB_CHUSER:.*\n//g" $NX_ETC_DIR/passwords
-}
-
-passdb_add_user()
-{
-	PASSDB_CHUSER="$1"
-	cp -f $NX_ETC_DIR/passwords $NX_ETC_DIR/passwords.orig
-	echo "$PASSDB_CHUSER:*" >> $NX_ETC_DIR/passwords
-	# deactivated to avoid problems with comm-server
-	su - $PASSDB_CHUSER -c "$PATH_BIN/nxnode --setkey"
-}
-
-passdb_list_user()
-{
-	cat $NX_ETC_DIR/passwords | cut -d":" -f1
-}
-
-#
-# End of passdb Library
-#
-
-############### PACKAGE session.bm #######################
-#
-# Library of session management functions
-#
-
-# Needed global vars: $NX_SESS_DIR
-
-session_list()
-{
-	cat $NX_SESS_DIR/running/sessionId"{$1}"
-}
-
-# Find all running session-filenames 
-
-session_find_all()
-{
-	for i in $NX_SESS_DIR/running/*
-	do
-		[ -f $i ] || break
-		echo $i
-	done
-}
-
-# Find all running sessions of a id
-session_find_id()
-{
-	[ -f $NX_SESS_DIR/running/sessionId"{$1}" ] && echo $NX_SESS_DIR/running/sessionId"{$1}"
-}
-
-# finds out if a session belongs to a user
-
-session_find_id_user()
-{
-	[ -f $NX_SESS_DIR/running/sessionId"{$1}" ] && egrep -q "^userName=$2$" $NX_SESS_DIR/running/sessionId"{$1}" && return 0
-	return 1
-}
-
-# Find all running sessions of a user
-session_find_user()
-{
-	for i in $NX_SESS_DIR/running/*
-	do
-		[ -f $i ] || break
-		egrep -q "^userName=$1$" $i && echo $i
-	done
-}
-
-# Find all running sessions of a display
-session_find_display()
-{	
-	for i in $NX_SESS_DIR/running/*
-	do
-		[ -f $i ] || break
-		egrep -q "^display=$1$" $i && echo $i
-	done
-}
-
-# session_get_cmdline <session filename>
-
-session_get_cmdline()
-{
-	echo "a=b" | cat - $1 | tr '\n' '&'
-}
-
-# session_get <uniqueid>
-
-session_get()
-{
-	session_get_cmdline $NX_SESS_DIR/running/sessionId"{$1}"
-}
-
-
-# Get the first session, which can be resumed
-
-session_get_user_suspended()
-{
-	for i in $NX_SESS_DIR/running/*
-	do
-		[ -f $i ] || break
-		if egrep -q "^userName=$1$" $i && egrep -q "^status=$2$" $i
-		then
-			CMDLINE=$(session_get_cmdline $i)
-			echo "$(getparam sessionId)"
-			break
-		fi
-	done
-}
-
-# Count all sessions of a user
-# and save it in SESSION_COUNT and SESSION_COUNT_USER
-
-session_count_user()
-{
-	SESSION_COUNT=0
-	SESSION_COUNT_USER=0
-
-	for i in $NX_SESS_DIR/running/*
-	do
-		[ -f $i ] || break
-		let SESSION_COUNT=$SESSION_COUNT+1
-		egrep -q "^userName=$1$" $i && let SESSION_COUNT_USER=$SESSION_COUNT_USER+1
-	done
-}
-
-# List all sessions of a user
-
-session_list_user_suspended()
-{
-	SESSION_COUNT=0
-	SESSION_COUNT_USER=0
-
-	TMPFILE=$(mktemp /tmp/nxserver_tmp.XXXXXXXXX)
-	echo "NX> 127 Sessions list of user '$1' for reconnect:" > $TMPFILE
-	echo >> $TMPFILE
-	if [ -z "$4" ]
-	then
-		
-		echo "Display Type             Session ID                       Options  Depth Screensize     Available Session Name" >> $TMPFILE
-		echo "------- ---------------- -------------------------------- -------- ----- -------------- --------- ----------------------" >> $TMPFILE
-	else
-		echo "Display Type             Session ID                       Options  Depth Screen         Status      Session Name" >> $TMPFILE
-		echo "------- ---------------- -------------------------------- -------- ----- -------------- ----------- ------------------------------" >> $TMPFILE
-	fi
-	for i in $NX_SESS_DIR/running/*
-	do
-		[ -f $i ] || break
-		let SESSION_COUNT=$SESSION_COUNT+1
-		if egrep -q "^userName=$1$" $i && egrep -q "^status=$2$" $i #&& grep -q "screeninfo=$3" $i
-		then
-			CMDLINE=$(session_get_cmdline $i)
-			depth=$(getparam screeninfo | cut -d "x" -f3 | cut -d "+" -f1 )
-			geom=$(getparam screeninfo | cut -d "x" -f1,2) 
-			render=$(getparam screeninfo | cut -d "+" -f2 )
-			available="N/A"
-			udepth=$(echo $3 | cut -d "x" -f3 | cut -d "+" -f1 )
-			urender=$(echo $3 | cut -d "+" -f2 )
-
-			mode="D"
-			[ "$(getparam sessionRootlessMode)" = "1" ] && mode="-"
-			
-			options="-"
-			stringinstring "fullscreen" "$3" && options="F"
-			[ "$(getparam geometry)" = "fullscreen" ] || options="-"
-			[ "$urender" = "render" ] && options="${options}R${mode}--PSA"
-			[ "$urender" = "render" ] || options="${options}-${mode}--PSA"
-			[ "$udepth" = "$depth" -a "$urender" = "$render" ] && available=$(getparam status)
-			# FIXME: HACK !!! to keep compatibility with old snapshot version (Knoppix 3.6 based for example)
-			if [ -z "$4" -a "$available" != "N/A" ] 
-			then
-				available="Yes"
-			fi
-			printf "%-7s %-16s %32s %8s %5s %-14s %-11s %s\n" "$(getparam display)" "$(getparam type)" "$(getparam sessionId)" "$options" "$depth" "$geom" "$available" "$(getparam sessionName)" >> $TMPFILE
-		fi
-		egrep -q "^userName=$1$" $i && let SESSION_COUNT_USER=$SESSION_COUNT_USER+1
-	done
-	echo "" >> $TMPFILE
-	echo "" >> $TMPFILE
-	cat $TMPFILE
-	rm -f $TMPFILE
-	if [ "$SESSION_COUNT" -ge "$SESSION_LIMIT" -o "$SESSION_COUNT_USER" -ge "$SESSION_USER_LIMIT" ]
-	then
-		echo "NX> 147 Server capacity: reached for user: $1"
-	else
-		echo "NX> 148 Server capacity: not reached for user: $1"
-	fi
-}
-
-session_list_user()
-{
-	echo "NX> 127 Sessions list of user '$1'"
-	echo
-	echo "Display Username        Remote IP       Session ID"
-	echo "------- --------------- --------------- --------------------------------"
-	for i in $NX_SESS_DIR/running/*
-	do
-		[ -f $i ] || break
-		if egrep -q "^userName=$1$" $i
-		then
-			CMDLINE=$(session_get_cmdline $i)
-			echo -e "$(getparam display)\t$(getparam userName)\t$(getparam foreignAddress)\t$(getparam sessionId)"
-		fi
-	done
-}
-
-session_history()
-{
-	userName=$1
-	sessionId=$2
-	echo "NX> 127 Session list:"
-	echo
-	echo "Display Username        Remote IP       Session ID                       Date                Status"
-	echo "------- --------------- --------------- -------------------------------- ------------------- -----------"
-	for j in $(ls --time-style +%s -la "$NX_SESS_DIR"/{closed,failed,running} | awk '/sessionId/ { print $6 " " $7 }' | sort -n | cut -d" " -f2)
-	do
-		if [ -n "$sessionId" ]
-		then
-			[ "$j" = "sessionId{$sessionId}" ] || continue
-		fi
-		i="$NX_SESS_DIR"/*/"$j"
-		[ -f $i ] || break
-		CMDLINE=$(session_get_cmdline $i)
-		if [ -n "$userName" ]
-		then
-			[ "$userName" = "$(getparam userName)" ] || continue
-		fi
-		echo -e "$(getparam display)\t$(getparam userName)\t$(getparam foreignAddress)\t$(getparam sessionId)\t$(ls --time-style="+%F %X" -l $i | awk '/sessionId/ { print $6 " " $7 }')\t$(getparam status)"
-	done
-}
-
-# remove all sessions older than $SESSION_HISTORY seconds in failed/closed.
-
-session_cleanup()
-{
-	[ "$SESSION_HISTORY" -gt "-1" ] || return
-	let SESSION_HISTORY_MINUTES=$SESSION_HISTORY/60
-	find $NX_SESS_DIR/closed/ $NX_SESS_DIR/failed/ -type f -mmin +"$SESSION_HISTORY_MINUTES" -exec rm -f '{}' ';'
-}
-
-session_list_all()
-{
-	echo "NX> 127 Sessions list:"
-	echo
-	echo "Display Username        Remote IP       Session ID"
-	echo "------- --------------- --------------- --------------------------------"
-	for i in $NX_SESS_DIR/running/*
-	do
-		[ -f $i ] || break
-		CMDLINE=$(session_get_cmdline $i)
-		echo -e "$(getparam display)\t$(getparam userName)\t$(getparam foreignAddress)\t$(getparam sessionId)"
-	done
-}
-
-
-# session_add <session_id> <options>
-
-session_add()
-{
-	id=$1
-	shift
-	echo "$@" | tr '&' '\n' > $NX_SESS_DIR/running/sessionId'{'$id'}'
-}
-
-# session_change <session_id> <parameter> <new_value>
-
-session_change()
-{
-	[ -f $NX_SESS_DIR/running/sessionId'{'$1'}' ] && perl -pi -e "s/$2=.*/$2=$3/" $NX_SESS_DIR/running/sessionId'{'$1'}'
-}
-
-# session_id <new status>
-
-session_status()
-{
-	session_change "$1" "status" "$2"
-}
-
-# session_running <session_id>
-# return: true if running, false if not
-
-session_running()
-{
-	test -f $NX_SESS_DIR/running/sessionId'{'$1'}'
-}
-
-# session_close <session_id> <end-time>
-
-session_close()
-{
-	perl -pi -e "s/startTime=\(.*\)/startTime=\1\nendTime=$(date +%s)/" $NX_SESS_DIR/running/sessionId'{'$1'}'
-	session_status $1 "Finished"
-	[ "$SESSION_HISTORY" = "0" ] && rm -f $NX_SESS_DIR/running/sessionId'{'$1'}'
-	[ "$SESSION_HISTORY" = "0" ] || mv -f $NX_SESS_DIR/running/sessionId'{'$1'}' $NX_SESS_DIR/closed/sessionId'{'$1'}'
-}
-
-session_fail()
-{
-	perl -pi -e "s/startTime=\(.*\)/startTime=\1\nendTime=$(date +%s)/" $NX_SESS_DIR/running/sessionId'{'$1'}'
-	session_status $1 "Failed"
-	[ "$SESSION_HISTORY" = "0" ] && rm -f $NX_SESS_DIR/running/sessionId'{'$1'}'
-	[ "$SESSION_HISTORY" = "0" ] || mv -f $NX_SESS_DIR/running/sessionId'{'$1'}' $NX_SESS_DIR/failed/sessionId'{'$1'}'
-}
-
-session_suspend()
-{
-	session_status $1 "Suspended"
-	session_change $1 foreignAddress "-"
-}
-
-#
-# end of library
-#
-
-
-#
-# Main nxserver <-> nxclient communication module
-#
-
-if [ $USER = "nxfree" -o "$USER" = "nx" -o "$ENABLE_USERMODE_AUTHENTICATION" = "1" ]
-then
-
-setup_usermode_auth()
-{
-
-	[ $USER = "nxfree" -o "$USER" = "nx" ] && ENABLE_USERMODE_AUTHENTICATION="0"
-
-	if [ "$ENABLE_USERMODE_AUTHENTICATION" = "1" ]
-	then
-		export NX_SESS_DIR="$USER_FAKE_HOME/.nx/db/"
-		export NX_LOGFILE="$USER_FAKE_HOME/.nx/temp/nxserver.log"
-		mkdir -p $NX_SESS_DIR/{closed,running,failed}
-	fi
-}
-
-setup_usermode_auth
-
-# Loglevels:
-# 1: Errors
-# 2: Warnings
-# 3: Important information
-# 4: Server - Client communication
-# 5: Information
-# 6: Debugging information
-# 7: stderror-channel of some applications
-
-log()
-{
-	[ "$NX_LOG_LEVEL" -ge "$1" -a -w "$NX_LOGFILE" ] && shift && echo "$@" >> "$NX_LOGFILE"
-}
-
-# Log in a way that is secure for passwords / cookies / ...
-
-echo_secure()
-{
-	echo "$@ " | perl -pi -e 's/--cookie=".+?"/--cookie="******"/g; s/--agent_password=".+?"/agent_password="******"/g; s/--password=".+?"/password="******"/g; s/cookie=.+?&/cookie=******&/g; s/agent_password=.+?&/agent_password=******&/g; s/password=.+?&/password=******&/g;'
-}
-
-log_secure()
-{
-	if [ "$NX_LOG_SECURE" = "0" ]
-	then
-		log "$@"
-	else
-		[ "$NX_LOG_LEVEL" -ge "$1" -a -w "$NX_LOGFILE" ] && shift && echo_secure "$@" >> "$NX_LOGFILE"
-	fi
-}
-
-log_tee()
-{
-	[ "$NX_LOG_LEVEL" -ge "4" -a -w "$NX_LOGFILE" ] && exec tee -a "$NX_LOGFILE"
-	[ "$NX_LOG_LEVEL" -ge "4" -a -w "$NX_LOGFILE" ] || exec cat -
-}
-
-log_error()
-{
-	[ "$NX_LOG_LEVEL" -ge "7" -a -w "$NX_LOGFILE" ] && exec tee -a "$NX_LOGFILE"
-	[ "$NX_LOG_LEVEL" -ge "7" -a -w "$NX_LOGFILE" ] || exec cat - 
-}
-
-echo_x()
-{
-	log "4" "$@"
-	echo "$@"
-}
-
-
-#
-# needed for slave mode
-#
-
-nxnode_login_stop_slave()
-{
-	if [ -n "$NXNODE_LOGIN_SLAVE" ]
-	then
-		kill "$NXNODE_LOGIN_SLAVE"
-		sleep 2
-		kill -0 "$NXNODE_LOGIN_SLAVE" && kill -9 "$NXNODE_LOGIN_SLAVE"
-	fi
-}
-
-nxnode_login()
-{
-	PASS="$1"
-	shift
-
-	if [ "$NXNODE_LOGIN_SLAVE_ENABLED" != "1" ]
-	then
-		NXNODE_TOSEND="$NXNODE_TOSEND" echo $PASS | $PATH_BIN/nxnode-login "$@"
-	else
-		if [ -z "$NXNODE_LOGIN_SLAVE" ]
-		then
-			# Send password
-			echo "$PASS" >&4 
-
-			# Connect to NXNODE
-			
-			$PATH_BIN/nxnode-login "$1" "$2" "$3" "$4" "$5" "--slave" <&3 >&3 2>&3 &
-			NXNODE_LOGIN_SLAVE="$!"
-			disown $!
-
-			trap nxnode_login_stop_slave EXIT
-			
-			while read line <&4
-			do
-				log 6 "$line"
-				case "$line" in
-					"NX> 716 Slave mode started successfully.")
-						break
-					;;
-				esac
-			done
-
-			# TODO: KILL the slave node at end of session
-		fi
-		
-		#send CMD to nxnode
-		
-		echo "$6" >&4
-		[ -n "$NXNODE_TOSEND" ] && echo "$NXNODE_TOSEND" >&4
-
-		NXNODE_RETURN="1"
-
-		if [ -z "$NXNODE_READER" ]
-		then
-			while read line <&4
-			do
-				echo "$line"
-				case "$line" in
-					"NX> 716"*) 
-						NXNODE_RETURN="0"
-					;;
-					"NX> 1001"*)
-						break
-					;;
-				esac
-			done
-		fi
-		test "$NXNODE_RETURN" = "0"
-	fi
-}
-
-nxnode_login_register_reader()
-{
-	# Register a reader
-	NXNODE_READER="1"
-}
-
-#ENABLE_NXNODE_SLAVE_MODE="1"
-
-# Start!
-[ "$NX_LOG_LEVEL" -ge "1" ] && touch "$NX_LOGFILE" >/dev/null 2>&1
-log 3 "-- NX SERVER START: $@ - ORIG_COMMAND=$SSH_ORIGINAL_COMMAND"
-
-if [ "$ENABLE_SERVER_FORWARD" = "1" -a -n "$SERVER_FORWARD_HOST" ]
-then
-	log 3 "Info: Forwarding connection to $SERVER_FORWARD_HOST with secret key $SERVER_FORWARD_KEY."
-	$COMMAND_SSH -i "$SERVER_FORWARD_KEY" "-p$SERVER_FORWARD_PORT" "nx@$SERVER_FORWARD_HOST" "host=$SERVER_NAME"
-	exit 0
-fi
-
-# Get the hostname out of SSH_ORIGINAL_COMMAND
-PREFERRED_HOST=$(echo $SSH_ORIGINAL_COMMAND | tr '&' '\n' | grep "^host=" | cut -d'=' -f2)
-
-# forward the connection to commercial NoMachine server?
-if [ "$ENABLE_NOMACHINE_FORWARD_PORT" = "1" -a "$NOMACHINE_FORWARD_PORT" = "$(echo $SSH_CLIENT $SSH2_CLIENT| cut -d' ' -f3)" -a -n "$NOMACHINE_SERVER" ]
-then
-	log 3 "Info: Detected SSH destination port $NOMACHINE_FORWARD_PORT. Forwarding connection to commercial NoMachine server."
-	exec $NOMACHINE_SERVER
-	log 1 "Error: Forwarding to NoMachine Server $NOMACHINE_SERVER failed. Using FreeNX server instead."
-fi
-
-#
-# nxnode slave mode preparations
-#
-
-NXNODE_LOGIN_SLAVE_ENABLED="0"
-NXNODE_LOGIN_SLAVE=""
-
-if [ "$ENABLE_NXNODE_SLAVE_MODE" = "1" -a "$NXSERVER_HELPER_ACTIVE" != "1" ]
-then
-	export SSH_ORIGINAL_COMMAND
-	export NXSERVER_HELPER_ACTIVE="1"
-	exec $PATH_BIN/nxserver-helper "$0"
-	log 1 "Error: Execution of $PATH_BIN/nxserver-helper failed. Disabling slave mode of nxnode."
-fi
-
-if [ "$ENABLE_NXNODE_SLAVE_MODE" = "1" -a "$NXSERVER_HELPER_ACTIVE" = "1" ]
-then
-	log 3 "Info: Using fds #3 and #4 for communication with nxnode."
-	NXNODE_LOGIN_SLAVE_ENABLED="1"
-fi
-
-echo_x "HELLO NXSERVER - Version $NX_VERSION $NX_LICENSE"
-
-# Login stage
-while true
-do
-	echo_x -n "NX> 105 "
-	read CMD
-	# FIXME?
-	[ "$CMD" = "" ] && CMD="quit"
-	echo_x "$CMD"
-	
-	case "$CMD" in 
-		quit|QUIT)
-			echo_x "Quit"
-			echo_x "NX> 999 Bye"
-			exit 0
-		;;
-		exit|EXIT)
-			echo_x "Exit"
-			echo_x "NX> 999 Bye"
-			exit 0
-		;;
-		bye|BYE)
-			echo_x "Bye"
-			echo_x "NX> 999 Bye"
-			exit 0
-		;;
-		hello*|HELLO*)
-			PROTO=$(echo $CMD | sed 's/.*Version \(.*\)/\1/g')
-			echo_x "NX> 134 Accepted protocol: $PROTO"
-			if [ "$PROTO" = "1.3.0" -o "$PROTO" = "1.3.2" ]
-			then
-				[ "$ENABLE_AUTORECONNECT_BEFORE_140" = "1" ] && ENABLE_AUTORECONNECT="1"
-			fi
-		;;
-		"set auth_mode*"|"SET AUTH_MODE*")
-			if [ "$CMD" = "set auth_mode password" -o "$CMD" = "SET AUTH_MODE PASSWORD" ]
-			then
-				echo_x "Set auth_mode: password"
-			else
-				echo_x "NX> 500 ERROR: unknown auth mode ''"
-			fi
-		;;
-		login|LOGIN)
-			LOGIN_SUCCESS="0"
-			
-			echo_x -n "NX> 101 User: "
-			read USER
-			echo_x $USER
-			
-			echo_x -n "NX> 102 Password: "
-			read -s PASS
-			echo_x ""
-			log 6 -n "Info: Auth method: "
-			
-			# USER already logged in?
-			if [ "$ENABLE_USERMODE_AUTHENTICATION" = "1" ]
-			then
-				LOGIN_SUCCESS="1"
-				LOGIN_METHOD="USERMODE"
-				USER=$(whoami)
-			fi
-
-			# PASSDB based auth
-			if [ "$ENABLE_PASSDB_AUTHENTICATION" = "1" -a "$LOGIN_SUCCESS" = "0" ]
-			then
-				log 6 -n "passdb "
-				if [ $(passdb_get_crypt_pass "$PASS") = $(passdb_get_pass "$USER") ]
-				then
-					LOGIN_SUCCESS="1"
-					LOGIN_METHOD="PASSDB"
-				fi
-			fi
-
-			# SSH based auth
-			if [ "$ENABLE_SSH_AUTHENTICATION" = "1" -a "$LOGIN_SUCCESS" = "0" ]
-			then
-				log 6 -n "ssh "
-				export COMMAND_SSH			
-				nxnode_login "$PASS" -- ssh "$USER" "$SSHD_PORT" "$PATH_BIN/nxnode" --check 2>&1 >/dev/null
-				if [ $? -eq 0 ]
-				then
-					LOGIN_SUCCESS="1"
-					LOGIN_METHOD="SSH"
-				fi
-			fi
-			
-			# SU based auth
-			if [ "$ENABLE_SU_AUTHENTICATION" = "1" -a "$LOGIN_SUCCESS" = "0" ]
-			then
-				log 6 -n "su "
-				nxnode_login "$PASS" -- su "$USER" "" "$PATH_BIN/nxnode" --check 2>&1 >/dev/null
-				if [ $? -eq 0 ]
-				then
-					LOGIN_SUCCESS="1"
-					LOGIN_METHOD="SU"
-				fi
-			fi
-			
-			# Check if user in passdb
-			if [ "$ENABLE_USER_DB" = "1" ]
-			then
-				log 6 "userdb check"
-				passdb_user_exists "$USER" || LOGIN_SUCCESS="0"
-			fi
-			log 6 ""
-
-			if [ "$LOGIN_SUCCESS" = "1" ]
-			then
-				# Reread the config files (so that $USER.node.conf get sourced)
-				. $(PATH=$(cd $(dirname $0) && pwd):$PATH which nxloadconfig) --userconf
-				setup_usermode_auth
-
-				echo_x "NX> 103 Welcome to: $SERVER_NAME user: $USER"
-				break
-			else
-				echo_x "NX> 404 ERROR: wrong password or login"
-				echo_x "NX> 999 Bye"
-				exit 1
-			fi
-		;;
-	esac
-done
-
-# remove old session infos from history
-session_cleanup
-
-#
-# call it with: server_get_params $CMD # no ""!
-#
-
-server_get_params()
-{
-	SERVER_PARAMS=$(echo "$@" | sed "s/^$1/\"/g; s/\" --/\&/g; s/\"//g; s/%20/ /g")
-	if [ "$SERVER_PARAMS" = "" ]
-	then
-		echo_x -n "NX> 106 Parameters: "
-		read SERVER_PARAMS2
-		SERVER_PARAMS=$(echo $SERVER_PARAMS2 | sed 's/%2B/+/g; s/%20/ /g')
-		echo_x
-	fi
-}
-
-nxnode_start()
-{
-	:
-	#CMD="$1"
-	#shift
-	#echo "$@" | $PATH_BIN/nxnode "$CMD"
-}
-
-#NX> 1002 Commit
-#NX> 1006 Session status: running
-
-server_nxnode_start()
-{
-	CMD="$1"
-	USER="$2"
-	shift
-	shift
-
-	# Find NODE_HOSTNAME
-	
-	NODE_HOSTNAME=""
-	CMDLINE="$@"
-	uniqueid=$(getparam uniqueid)
-	[ -z "$uniqueid" ] && uniqueid=$(getparam sessionid)
-	[ -z "$uniqueid" ] && uniqueid=$(getparam session_id)
-	CMDLINE=$(session_get "$uniqueid")
-	
-	NODE_HOSTNAME="$(getparam host)"
-	[ -z "$NODE_HOSTNAME" ] && NODE_HOSTNAME="127.0.0.1"
-	export NODE_HOSTNAME
-	
-	# Use nxnode-login?
-	if [ "$LOGIN_METHOD" = "SSH" ]
-	then
-	    export COMMAND_SSH
-	    NXNODE_TOSEND="$@" nxnode_login "$PASS" -- ssh "$USER" "$SSHD_PORT" "$PATH_BIN/nxnode" "$CMD" 2>&1 | log_tee
-	elif [ "$LOGIN_METHOD" = "SU" ]
-	then
-	    NXNODE_TOSEND="$@" nxnode_login "$PASS" -- su "$USER" "" "$PATH_BIN/nxnode" "$CMD" 2>&1 | log_tee
-	elif [ "$LOGIN_METHOD" = "USERMODE" ]
-	then
-	    echo "$@" | $PATH_BIN/nxnode "$CMD" 2>&1 | log_tee
-	else
-	    echo "$@" | $COMMAND_SSH -l "$USER" "$NODE_HOSTNAME" -p $SSHD_PORT -x -2 -i $NX_ETC_DIR/users.id_dsa -o 'PubkeyAuthentication yes' -o 'RSAAuthentication yes' -o 'RhostsAuthentication no' -o 'PasswordAuthentication no' -o 'RhostsRSAAuthentication no' -o 'StrictHostKeyChecking no' $PATH_BIN/nxnode "$CMD" | log_tee
-	fi
-}
-
-server_add_usession()
-{
-	[ "$ENABLE_USESSION" = "1" ] || return
-	
-	$COMMAND_SESSREG -l ":$SESS_DISPLAY" -h "$USERIP" -a $USER 2>&1 | log_error
-}
-
-server_remove_usession()
-{
-	[ "$ENABLE_USESSION" = "1" ] || return
-	$COMMAND_SESSREG -l ":$SESS_DISPLAY" -h "$USERIP" -d $USER 2>&1 | log_error
-}
-
-server_nxnode_echo()
-{
-	[ "$SERVER_CHANNEL" = "1" ] && echo "$@"
-	[ "$SERVER_CHANNEL" = "2" ] && echo "$@" >&2
-}
-
-server_nxnode_exit_func()
-{
-	log 1 "Info: Emergency-Shutting down due to kill signal ..."
-	
-	session_fail $uniqueid
-	
-	server_remove_usession
-
-	# remove lock file
-	[ -e "/tmp/.nX$SESS_DISPLAY-lock" ] && rm -f /tmp/.nX$SESS_DISPLAY-lock
-
-	# Kill possible slave node
-	nxnode_login_stop_slave
-}
-
-server_nxnode_start_wait()
-{
-	if [ "$1" = "--startsession" ]
-	then
-	
-	server_add_usession
-
-	# We need to stop sending things when a SIGPIPE arrives
-	trap "SERVER_CHANNEL=0" SIGPIPE
-	
-	trap server_nxnode_exit_func EXIT
-	
-	SERVER_CHANNEL=1
-	KILL_WAIT_PID=1
-	server_nxnode_start "$@" | while read CMD
-	do
-		case "$CMD" in 
-			"NX> 1006"*|"NX> 1005"*|"NX> 1009"*)
-				case "$CMD" in 
-					*running*)
-						[ "$KILL_WAIT_PID" = "1" ] && kill $SERVER_WAIT_PID
-						KILL_WAIT_PID=0
-						session_status $uniqueid "Running"
-						[ "$SERVER_CHANNEL" = "1" ] && SERVER_CHANNEL=2
-					;;
-					*closed*)
-						session_close $uniqueid
-					;;
-					*suspended*)
-						[ "$KILL_WAIT_PID" = "1" ] && kill $SERVER_WAIT_PID
-						KILL_WAIT_PID=0
-						session_suspend $uniqueid
-					;;
-					*terminating*)
-						session_status $uniqueid "Terminating"
-						# we need to stop sending to client as it will have already
-						# closed his side of the channel and this will lead to not 
-						# closed sessions.
-						SERVER_CHANNEL=0
-				esac
-			;;
-			"NX> 1004"*)
-				[ "$KILL_WAIT_PID" = "1" ] && kill $SERVER_WAIT_PID
-				KILL_WAIT_PID=0
-				session_fail $uniqueid
-				server_nxnode_echo "NX> 596 Session startup failed."
-				log 4 "NX> 596 Session startup failed."
-			;;
-		esac
-
-		case $CMD in
-			"NX> "*)
-				server_nxnode_echo $CMD
-			;;
-		esac
-	done
-
-	trap - EXIT
-	trap - SIGPIPE
-	
-	# Close it in case the session is still running
-	session_running $uniqueid && session_close $uniqueid
-	
-	server_remove_usession
-
-	# remove lock file
-	[ -e "/tmp/.nX$SESS_DISPLAY-lock" ] && rm -f /tmp/.nX$SESS_DISPLAY-lock
-
-	nxnode_login_stop_slave
-
-	else # $1 = restore
-	
-	KILL_WAIT_PID=1
-	SERVER_CHANNEL=1
-	server_nxnode_start "$@" | while read CMD
-	do
-		case "$CMD" in 
-			"NX> 1006"*|"NX> 1005"*|"NX> 1009"*)
-				case "$CMD" in 
-					*running*)
-						[ "$KILL_WAIT_PID" = "1" ] && kill $SERVER_WAIT_PID
-						KILL_WAIT_PID=0
-						SERVER_CHANNEL=2
-					;;
-				esac
-			;;
-			"NX> 1004"*)
-				[ "$KILL_WAIT_PID" = "1" ] && kill $SERVER_WAIT_PID
-				KILL_WAIT_PID=0
-				
-				# This fail is correct here as somehow the 
-				# monitor process might have died and we don't 
-				# want the session to be resumed again.
-				
-				session_fail $uniqueid
-				
-				server_nxnode_echo "NX> 596 Session startup failed."
-				log 4 "NX> 596 Session startup failed."
-				break;
-			;;
-		esac
-	
-		case $CMD in
-			"NX> "*)
-				server_nxnode_echo $CMD
-			;;
-		esac
-	done
-	
-	nxnode_login_stop_slave
-	
-	fi # $1 = start
-}
-
-server_check_session_count()
-{
-	session_count_user "$USER"
-	
-	if [ "$SESSION_COUNT" -ge "$SESSION_LIMIT" ]
-	then
-		echo_x "NX> 599 Reached the maximum number of concurrent sessions on this server."
-		echo_x "NX> 500 ERROR: Last operation failed."
-		return 1
-	fi
-	
-	if [ "$SESSION_COUNT_USER" -ge "$SESSION_USER_LIMIT" ]
-	then
-		echo_x "NX> 599 Server capacity: reached for user: $USER"
-		echo_x "NX> 500 ERROR: Last operation failed."
-		return 1
-	fi
-
-	return 0
-}
-
-server_loadbalance_random()
-{
-	# Pick one based on "random" algorithm
-	SERVER_LB_HOSTS=( $LOAD_BALANCE_SERVERS )
-	SERVER_LB_NR_OF_HOSTS=${#SERVER_LB_HOSTS[@]}
-	let SERVER_LB_NR=(RANDOM % SERVER_LB_NR_OF_HOSTS)
-	SERVER_LB_HOST=${SERVER_LB_HOSTS[$SERVER_LB_NR]}
-	echo $SERVER_LB_HOST
-}
-
-# run in subshell!
-
-server_loadbalance_round_robin()
-{
-	SERVER_LB_HOSTS=( $LOAD_BALANCE_SERVERS )
-	SERVER_LB_NR_OF_HOSTS=${#SERVER_LB_HOSTS[@]}
-	
-	# Atomic incrementation:
-
-	# Enter critical section
-	# - Create .lock file
-	
-	SERVER_LB_LOCKFILE=$(mktemp "$NX_SESS_DIR/round-robin.lock.XXXXXXXXX")
-
-	trap "rm -f $SERVER_LB_LOCKFILE" EXIT
-	
-	i=0
-	while [ $i -lt 200 ]
-	do
-		# ln is an atomic operation
-		ln $SERVER_LB_LOCKFILE "$NX_SESS_DIR/round-robin.lock" && break
-		LANG=C sleep 0.01
-		let i=i+1
-	done
-
-	if [ $i -ge 200 ]
-	then
-		log 1 "Load-Balancing: Round-Robin failed to gain lock file in 200 tries. Falling back to random."
-		server_loadbalance_random
-		return
-	fi
-	
-	trap "rm -f $SERVER_LB_LOCKFILE $NX_SESS_DIR/round-robin.lock" EXIT
-
-	# Lock held
-
-	SERVER_LB_NR=$(cat $NX_SESS_DIR/round-robin 2>/dev/null)
-	let SERVER_LB_NR=(SERVER_LB_NR+1) % SERVER_LB_NR_OF_HOSTS
-	echo $SERVER_LB_NR >$NX_SESS_DIR/round-robin
-
-	# Exit critical section
-	rm -f "$SERVER_LB_LOCKFILE $NX_SESS_DIR/round-robin.lock"
-
-	trap - EXIT
-
-	SERVER_LB_HOST=${SERVER_LB_HOSTS[$SERVER_LB_NR]}
-	echo $SERVER_LB_HOST
-}
-
-server_loadbalance_load()
-{
-	SERVER_LB_MAX=0
-	SERVER_LB_HOST=""
-	
-	for i in $LOAD_BALANCE_SERVERS
-	do
-		SERVER_LB_LOAD=$($NX_DIR/bin/nxcheckload $i)
-		[ -z "$SERVER_LB_LOAD" ] && continue
-		
-		if [ $SERVER_LB_LOAD -gt $SERVER_LB_MAX ]
-		then
-			SERVER_LB_MAX=$SERVER_LB_LOAD
-			SERVER_LB_HOST=$i
-		fi
-	done
-	echo $SERVER_LB_HOST
-}
-
-server_loadbalance()
-{
-	SERVER_HOST="127.0.0.1"
-	if [ -n "$SERVER_LOADBALANCING" ]
-	then
-		SERVER_HOST=""
-		if [ -n "$PREFERRED_HOST" -a "$ENABLE_LOAD_BALANCE_PREFERENCE" = "1" ]
-		then
-			stringinstring " $PREFERRED_HOST " " $SERVER_LOADBALANCING " && SERVER_HOST="$PREFERRED_HOST"
-		fi
-		
-		# Fallback if still empty
-		if [ -z "$SERVER_HOST" ]
-		then
-			case "$LOAD_BALANCE_ALGORITHM" in
-				random)
-					SERVER_HOST=$(server_loadbalance_random)
-				;;
-				round-robin)
-					SERVER_HOST=$(server_loadbalance_round_robin)
-				;;
-				load)
-					SERVER_HOST=$(server_loadbalance_load)
-				;;
-			esac
-		fi
-		
-		[ -z "$SERVER_HOST" ] && SERVER_HOST="127.0.0.1"
-		[ -n "$SERVER_HOST" ] && log 5 "Info: Load-Balancing (if possible) to $SERVER_HOST ..."
-	fi
-	echo "$SERVER_HOST"
-}	
-
-server_startrestore_session()
-{
-	ACTION="$1"
-	
-	server_get_params $CMD
-	PARAMS=$SERVER_PARAMS
-	PARAMS="$PARAMS&clientproto=$PROTO"
-	CMDLINE=$PARAMS
-	echo_x
-	
-	# If we can't get the userip and SSHD_CHECK_IP is set to 1
-	# we bail out.
-	if [ -z "$SSH_CLIENT" -a -z "$SSH2_CLIENT" ]
-	then 
-		if [ "$SSHD_CHECK_IP" = "1" ]
-		then
-			echo_x "NX> 596 Session startup failed. (Missing SSH_CLIENT environment variable)"
-			return 1
-		else
-			log 2 "Warning: Failed to determine the client IP."
-			log 2 "Warning: The SSH_CLIENT or SSH2_CLIENT variable was not provided by SSHD."
-			log 2 "Warning: Please set SSHD_CHECK_IP=1 if you want to refuse the connection."
-		fi
-	fi
-	
-	export ENCRYPTION=$(getparam encryption)
-	
-	if [ "$ENABLE_FORCE_ENCRYPTION" = "1" -a "$ENCRYPTION" != "1" ]
-	then
-			echo_x "NX> 596 Unencrypted sessions are not allowed."
-			return 1
-	fi
-
-	# check if there is a suspended session, which we could resume
-	if [ "$ENABLE_AUTORECONNECT" = "1" -a "$ACTION" = "start" ]
-	then
-		restore=$(session_get_user_suspended "$USER" "Suspended")
-		if [ -n "$restore" ]
-		then
-			PARAMS="$PARAMS&restore=$restore"
-			CMDLINE=$PARAMS
-			ACTION="resume"
-		fi
-	fi
-
-	# as only $SSH_CLIENT or $SSH2_CLIENT will be set, this should work
-	USERIP=$(echo $SSH_CLIENT $SSH2_CLIENT | cut -d" " -f1 | sed 's/::ffff://g')
-	[ -z "$USERIP" ] && USERIP="*"
-	if [ "$ACTION" = "start" ]
-	then
-		server_check_session_count || return 1
-		
-		# start nxnode
-		SESS_DISPLAY=$DISPLAY_BASE
-		let SESS_DISPLAY_LIMIT=$DISPLAY_BASE+$DISPLAY_LIMIT
-	
-		# stupid but working algo ...
-			
-		# TODO: need to check for _all_ offset and ports :-/
-			
-		while true
-		do
-			while [ -e /tmp/.X$SESS_DISPLAY-lock -o -e "/tmp/.nX$SESS_DISPLAY-lock" ]
-			do
-				let SESS_DISPLAY=$SESS_DISPLAY+1
-			done
-
-			# Check if there is already an agent running on that display
-			let AGENT_DISPLAY=$SESS_DISPLAY+6000
-			if $COMMAND_NETCAT -z 127.0.0.1 $AGENT_DISPLAY 2>/dev/null
-			then
-				log 2 "Warning: Stray nxagent without .X$SESS_DISPLAY-lock found on port $AGENT_DISPLAY."
-				let SESS_DISPLAY=$SESS_DISPLAY+1
-				continue
-			fi
-			
-
-			SESS_LOCKFILE=$(mktemp "/tmp/.nX$SESS_DISPLAY-lock.XXXXXXXXX")
-			# ln is an atomic operation
-			ln "$SESS_LOCKFILE" "/tmp/.nX$SESS_DISPLAY-lock" 2>/dev/null && break
-		done
-
-		rm -f "$SESS_LOCKFILE"
-		
-		if [ "$SESS_DISPLAY" -gt "$SESS_DISPLAY_LIMIT" ]
-		then
-			echo_x "NX> 596 Error: Display limit exceeded. Please remove some files from /tmp/.X*-lock."
-			rm -f "/tmp/.nX$SESS_DISPLAY-lock"
-			return
-		fi
-	
-		uniqueid=$(echo $[$RANDOM*$RANDOM] | $COMMAND_MD5SUM | cut -d" " -f1 | tr "[a-z]" "[A-Z]")
-
-		# Possibly do loadbalancing
-		
-		SERVER_HOST=$(server_loadbalance)
-		
-		FULL_PARAMS="$PARAMS&user=$USER&userip=$USERIP&uniqueid=$uniqueid&display=$SESS_DISPLAY&host=$SERVER_HOST"
-		log_secure "6" "$FULL_PARAMS"
-
-		# now update the session listing
-		sessionRootlessMode=0
-		[ "$(getparam rootless)" = "1" ] && sessionRootlessMode=1
-		CMDLINE="a=b&$FULL_PARAMS"
-		session_add $uniqueid "sessionName=$(getparam session)&display=$(getparam display)&status=Running&startTime=$(date +%s)&foreignAddress=$(getparam userip)&sessionRootlessMode=$sessionRootlessMode&type=$(getparam type)&sessionId=$uniqueid&creationTime=$(date +%s)&userName=$USER&serverPid=$SERVER_PID&screeninfo=$(getparam screeninfo)&geometry=$(getparam geometry)&host=$SERVER_HOST"
-	else
-		uniqueid=$(getparam restore)
-		[ -z "$uniqueid" ] && uniqueid=$(getparam id) # 1.4.0-5 compatibility
-		session_change "$uniqueid" "foreignAddress" "$USERIP"
-
-		CMDLINE=$(session_get "$uniqueid")
-		FULL_PARAMS="$PARAMS&user=$USER&userip=$(getparam foreignAddress)&uniqueid=$uniqueid&display=$(getparam display)&status=$(getparam status)"
-		SESS_DISPLAY=$(getparam display)
-		SERVER_HOST=$(getparam host)
-		[ -z "$SERVER_HOST" ] && SERVER_HOST="127.0.0.1"
-	fi
-
-	# now start the node
-	sleep $AGENT_STARTUP_TIMEOUT &
-	SERVER_WAIT_PID=$!
-	( server_nxnode_start_wait --"$ACTION"session $USER "$FULL_PARAMS" ) &
-	SERVER_PID=$!
-	disown $SERVER_PID
-	
-	wait $SERVER_WAIT_PID
-	
-	if [ $? -eq 0 ]
-	then
-		# Something went wrong ...
-		[ "$ACTION" = "start" ] && session_fail $uniqueid
-		echo_x "NX> 1004 Error: Session did not start."
-		echo_x "NX> 596 Session $ACTION failed."
-		echo_x "NX> 999 Bye"
-		# FIXME: Send node signal to terminate
-		exit 1
-	fi
-	
-	# We have now an active reader
-	nxnode_login_register_reader
-}
-
-# Session stage
-while true
-do
-	echo_x -n "NX> 105 "
-	unset CMD
-	read CMD 2>/dev/null
-	# FIXME?
-	[ "$CMD" = "" ] && CMD="quit"
-	
-	# Logging 
-	case "$CMD" in
-		startsession*|restoresession*|addmount*|addprinter*)
-			echo_secure "$CMD"
-			log_secure "4" "$CMD"
-		;;
-		*)
-			echo "$CMD"
-			log "4" "$CMD"
-		;;
-	esac
-	
-	case "$CMD" in 
-		quit|QUIT)
-			echo_x "Quit"
-			echo_x "NX> 999 Bye"
-			exit 0
-		;;
-		exit|EXIT)
-			echo_x "Exit"
-			echo_x "NX> 999 Bye"
-			exit 0
-		;;
-		bye|BYE)
-			echo_x "Bye" 1>&2
-			echo_x "NX> 999 Bye" 1>&2
-			if [ "$ENCRYPTION" = "1" ] 
-			then 
-				let PROXY_DISPLAY=$SESS_DISPLAY+4000
-				exec $COMMAND_NETCAT $SERVER_HOST $PROXY_DISPLAY
-			else
-				echo_x "NX> 1001 Bye."
-			fi
-		;;
-		startsession*)
-			server_startrestore_session "start"
-		;;
-		list*)
-			server_get_params $CMD
-			PARAMS=$SERVER_PARAMS
-			CMDLINE=$PARAMS
-			
-			status=$(getparam status)
-
-			if [ "$status" = "Suspended" -a -n "$(getparam screeninfo)" ]
-			then
-				session_list_user_suspended "$USER" "Suspended" "$(getparam screeninfo)" "$(getparam type)" | log_tee
-			elif [ "$status" = "Suspended,Running" -o "$status" = "Suspended" ] # since 1.4.0-5
-			then
-				# disabled due to problems with 1.4.0-5 client
-				#session_list_user_suspended "$USER" 'Suspended$|^status=Running$' "$(getparam geometry)" "$(getparam type)" | log_tee
-				session_list_user_suspended "$USER" 'Suspended' "$(getparam geometry)" "$(getparam type)" | log_tee
-			elif [ "$status" = "suspended,running" -o "$status" = "suspended" ] # since 1.5.0
-			then
-				status=$(echo $status | sed 's/,/$|^status=/g; s/suspended/Suspended/g; s/running/Running/g')
-				session_list_user_suspended "$USER" "$status" "$(getparam geometry)" "$(getparam type)" | log_tee
-			else
-				session_list_user "$USER" | log_tee
-			fi
-		;;
-		suspend*)
-			server_get_params $CMD
-			PARAMS=$SERVER_PARAMS
-			CMDLINE=$PARAMS
-			if session_find_id_user "$(getparam sessionid)" "$USER"
-			then
-				server_nxnode_start --suspend "$USER" "$PARAMS"
-			fi
-		;;
-		terminate*)
-			server_get_params $CMD
-			PARAMS=$SERVER_PARAMS
-			CMDLINE=$PARAMS
-			if session_find_id_user "$(getparam sessionid)" "$USER"
-			then
-				server_nxnode_start --terminate "$USER" "$PARAMS"
-			fi
-		;;
-		restoresession*)
-			server_startrestore_session "resume"
-		;;
-		passwd)
-			echo_x "NX> 113 Changing password of user '$USER'"
-			echo_x -n "NX> 102 Current password:"
-			read -s PASS
-			ENC_PASS=$(passdb_get_crypt_pass "$PASS")
-			REAL_PASS=$(passdb_get_pass "$USER")
-			echo_x
-			if [ "$ENC_PASS" = "$REAL_PASS" ]
-			then
-				echo_x -n "NX> 102 Password:"
-				read -s NEW_PASS1
-				
-				if [ ${#NEW_PASS1} -lt 5 ]
-				then
-					echo_x "NX> 500 ERROR: incorrect password format, password must be long at least five characters"
-					continue
-				fi
-
-				echo_x
-				echo_x -n "NX> 102 Confirm password:"
-				read -s NEW_PASS1
-				echo_x
-				if [ "$NEW_PASS1" = "$NEW_PASS2" ]
-				then
-					ENC_PASS=$(passdb_get_crypt_pass "$NEW_PASS1")
-					passdb_chpass "$USER" "$ENC_PASS"
-					echo_x "NX> 114 Password of user '$USER' changed"
-				else
-					echo_x "NX> 537 ERROR: passwords do not match"
-				fi
-			else
-				echo_x "NX> 500 ERROR: current password doesn't match"
-			fi
-		;;
-		addmount*)
-			server_get_params $CMD
-			PARAMS=$SERVER_PARAMS
-			# TODO: This redirection is crap here.
-			server_nxnode_start --smbmount "$USER" "$PARAMS" >/dev/null 2>&1 | log_error >/dev/null
-			echo_x "NX> 719 SMB filesystem: running"
-		;;
-		addprinter*)
-			server_get_params $CMD
-			PARAMS=$SERVER_PARAMS
-			# TODO: This redirecion is crap here.
-			server_nxnode_start --addprinter "$USER" "$PARAMS" >/dev/null 2>&1 | log_error >/dev/null
-		;;
-		*)
-			# disabled for 1.4.0-5 snapshot client
-			#echo_x "NX> 503 Error: undefined command: '$CMD'"
-		;;
-	esac
-done
-
-fi
-
-#
-# End of Main nxserver <--> nxclient communication module
-#
-
-################### PACKAGE cmd.bm ############################
-
-#
-# library functions for nxserver-commandline cmds
-#
-
-# Policy: All functions and variables need to start with CMD_ / cmd_
-
-# Needed global vars: $NX_VERSION, $NX_LICENSE, $NX_ETC_DIR, $PATH_BIN, $NX_HOME_DIR, $SSH_AUTHORIZED_KEYS
-
-# Needed package: passdb
-
-cmd_usage()
-{
-	echo "NXSERVER - Version $NX_VERSION $NX_LICENSE" 1>&2
-	echo "Usage: nxserver <option>" 1>&2
-
-	if [ "$1" = "root" ]
-	then
-		echo "--adduser <user>: Add a new user" 1>&2
-		echo "--passwd <user>: Change password of <user>" 1>&2
-		echo "--deluser <user>: Remove a user from nx" 1>&2
-		echo "--listuser: List enabled users" 1>&2
-		echo "" 1>&2
-		echo "--start: Start the nx server" 1>&2
-		echo "--stop: Stop the nx server" 1>&2
-		echo "--status: Show status of nx server" 1>&2
-		echo "--restart: Restart the nx server. (start,stop)" 1>&2
-		echo "" 1>&2
-		echo "--list [ user | sessionid ]: List running sessions of user or sessionid " 1>&2
-		echo "--history [ user | sessionid | clear ]: Show history [ of user | sessionid ] or clear the history" 1>&2
-		echo "--terminate <user | :display | sessionid>: Terminate the session pointed to by" 1>&2
-		echo "       sessionid or display, or all sessions of the specified user." 1>&2
-		echo "       Use * for all sessions." 1>&2
-		echo "--force-terminate: Like terminate, but removes also session info." 1>&2
-		echo "--suspend <user | :display | sessionid>: Suspend the session pointed to by" 1>&2
-		echo "       sessionid or display, or all sessions of the specified user." 1>&2
-		echo "       Use * for all sessions." 1>&2
-		echo "--cleanup: Terminates all running sessions. Useful after power-outage."
-		echo "" 1>&2
-		echo "--broadcast <message>: Send a message to all users" 1>&2
-		echo "--send <user | :display | sessionid> <message>: Send a message to the specified user or sessionid" 1>&2
-	else
-		echo "--passwd: Change password" 1>&2
-	fi
-	exit 1
-}
-
-
-cmd_abort()
-{
-	echo "NX> 500" "$@" 1>&2
-	echo "NX> 999 Bye" 1>&2
-	exit 1
-}
-
-cmd_user_passwd()
-{
-	echo "NX> 100 NXSERVER - Version $NX_VERSION $NX_LICENSE"
-	echo "Sorry: Password changing for user is _not_ implemented, yet."
-	echo "Please login to NX-Server to change password"
-	echo "or ask your local system administrator."
-	#echo "NX> 113 Changing password of user '$USER'"
-	#echo "Old password:"
-	#read -s OLDPASS
-	#echo "New password:"
-	#read -s NEWPASS1
-	#echo "Repeat:"
-	#read -s NEWPASS2
-
-}
-
-cmd_passwd()
-{
-	CMD_CHUSER=$2
-	egrep -q "^$CMD_CHUSER:" $NX_ETC_DIR/passwords || cmd_abort "Error: User $CMD_CHUSER not found in database."
-	echo -n "New password: "
-	read -s CMD_NEWPASS
-	echo
-	CMD_ENC_PASS=$(passdb_get_crypt_pass "$CMD_NEWPASS")
-	passdb_chpass "$CMD_CHUSER" "$CMD_ENC_PASS"
-	echo "Password changed."
-}
-
-cmd_adduser()
-{
-	CMD_CHUSER=$2
-	
-	[ ${#CMD_CHUSER} -ge 32 ] && cmd_abort "Error: User $CMD_CHUSER must be shorter than 32 characters."
-	egrep -q "^$CMD_CHUSER:" $NX_ETC_DIR/passwords && cmd_abort "Error: User $CMD_CHUSER already in database."
-	getent passwd "$CMD_CHUSER" >/dev/null || cmd_abort "Error: User $CMD_CHUSER not existing on local system. Can't add."
-	passdb_add_user "$CMD_CHUSER"
-}
-
-cmd_deluser()
-{
-	CMD_CHUSER=$2
-	egrep -q "^$CMD_CHUSER:" $NX_ETC_DIR/passwords || cmd_abort "Error: User $CMD_CHUSER not found in database."
-	passdb_remove_user "$CMD_CHUSER"
-}
-
-cmd_listuser()
-{
-	echo "NX> 146 NX users list"
-	echo
-	echo "Username"
-	echo "---------------"
-	echo
-	passdb_list_user
-	echo
-}
-
-cmd_start()
-{
-	
-	[ -f $NX_HOME_DIR/.ssh/$SSH_AUTHORIZED_KEYS ] && cmd_abort "ERROR: Service already running"
-	mv $NX_HOME_DIR/.ssh/$SSH_AUTHORIZED_KEYS.disabled $NX_HOME_DIR/.ssh/$SSH_AUTHORIZED_KEYS
-	echo "NX> 122 Service started"
-}
-
-cmd_stop()
-{
-	[ -f $NX_HOME_DIR/.ssh/$SSH_AUTHORIZED_KEYS ] || cmd_abort "Service was already stopped"
-	mv $NX_HOME_DIR/.ssh/$SSH_AUTHORIZED_KEYS $NX_HOME_DIR/.ssh/$SSH_AUTHORIZED_KEYS.disabled
-	echo "NX> 123 Service stopped"
-}
-
-cmd_status()
-{
-	[ -f $NX_HOME_DIR/.ssh/$SSH_AUTHORIZED_KEYS ] && echo "NX> 110 NX Server is running"
-	[ -f $NX_HOME_DIR/.ssh/$SSH_AUTHORIZED_KEYS ] || echo "NX> 110 NX Server is stopped"
-}
-
-cmd_restart()
-{
-	cmd_stop
-	cmd_start
-}
-
-cmd_parse_2_params()
-{
-	if [ ${#1} -eq 32 ]
-	then
-		CMD_APARAMS="sessionid=sessionId{$1}"
-	else
-	if [ "$1" != "" ]
-	then
-		#egrep -q "^$1:" $NX_ETC_DIR/passwords || cmd_abort "Error: User $1 not found in database."
-		CMD_APARAMS="user=$1"
-	fi
-	fi
-	echo $CMD_APARAMS
-
-}
-
-cmd_parse_3_params()
-{
-	if [ ${#1} -eq 32 ]
-	then
-		CMD_APARAMS=$(session_find_id $1)
-		[ -n "$CMD_APARAMS" ] || cmd_abort "Error: Session $1 could not be found."
-	elif [ "${1:0:1}" = ":" ]
-	then
-		CMD_APARAMS=$(session_find_display "${1:1}")
-		[ -n "$CMD_APARAMS" ] || cmd_abort "Error: No running sessions found for display $1."
-	elif [ "$1" = "*" ]
-	then
-		CMD_APARAMS=$(session_find_all)
-		[ -n "$CMD_APARAMS" ] || cmd_abort "Error: No running sessions found."
-	elif [ "$1" != "" ]
-	then
-		#egrep -q "^$1:" $NX_ETC_DIR/passwords || cmd_abort "Error: User $1 not found in database."
-		CMD_APARAMS=$(session_find_user "$1")
-		[ -n "$CMD_APARAMS" ] || cmd_abort "Error: No running sessions found for user $1."
-	else
-		cmd_abort "Error: Not enough parameters."
-	fi
-	echo $CMD_APARAMS
-}
-
-cmd_list_suspended()
-{
-	CMD_PARAMS=$(cmd_parse_2_params "$2")
-	[ -n "$2" -a -z "$CMD_PARAMS" ] && exit 1
-	case $CMD_PARAMS in
-		user=*)
-			session_list_user_suspended $2 "Suspended"
-		;;
-	esac
-}
-cmd_list()
-{
-	CMD_PARAMS=$(cmd_parse_2_params "$2")
-	[ -n "$2" -a -z "$CMD_PARAMS" ] && exit 1
-	case $CMD_PARAMS in
-		user=*)
-			session_list_user $2
-		;;
-		sessionid=*)
-			session_list $2
-		;;
-		*)
-			session_list_all
-		;;
-	esac
-}
-
-cmd_history_clear()
-{
-	rm -f $NX_SESS_DIR/closed/*
-	rm -f $NX_SESS_DIR/failed/*
-}
-
-cmd_history()
-{
-	if [ "$2" = "clear" ]
-	then
-		cmd_history_clear
-	fi
-	
-	CMD_PARAMS=$(cmd_parse_2_params "$2")
-	user=""
-	sessid=""
-	case $CMD_PARAMS in
-		user=*)
-			user="$2"
-		;;
-		sessionid=*)
-			sessid="$2"
-		;;
-	esac
-
-	session_history "$user" "$sessid"
-}
-
-cmd_terminate()
-{
-	CMD_PARAMS=$(cmd_parse_3_params "$2")
-	[ -z "$CMD_PARAMS" ] && exit 1
-	for i in $CMD_PARAMS;
-	do
-			CMDLINE=$(session_get_cmdline $i)
-			cmd_sessionid=$(getparam sessionId)
-			cmd_user=$(getparam userName)
-			cmd_type=$(getparam type)
-			cmd_status=$(getparam status)
-
-			# is it a "good" session?
-			case "$1" in 
-			--suspend)
-				if [ "$cmd_status" = "Running" ] && stringinstring "unix-" "$cmd_type"
-				then
-					echo "sessionid=$cmd_sessionid" | su - "$cmd_user" -c "$PATH_BIN/nxnode --suspend"
-				fi
-			;;
-			--terminate)
-				echo "sessionid=$cmd_sessionid" | su - "$cmd_user" -c "$PATH_BIN/nxnode --terminate"
-			;;
-			--force-terminate)
-				echo "sessionid=$cmd_sessionid" | su - "$cmd_user" -c "$PATH_BIN/nxnode --terminate"
-				session_close $cmd_sessionid
-			;;
-			esac
-	done
-
-}
-
-cmd_send()
-{
-	if [ "$1" = "--broadcast" ]
-	then
-	  CMD_PARAMS=$(session_find_all)
-	  [ -z "$CMD_PARAMS" ] && cmd_abort "Error: No running session could be found."
-	else
-	  CMD_PARAMS=$(cmd_parse_3_params "$2")
-	  [ -z "$CMD_PARAMS" ] && exit 1
-	fi
-	shift
-	shift
-	for i in $CMD_PARAMS;
-	do
-			CMDLINE=$(session_get_cmdline $i)
-			cmd_display=$(getparam display)
-			cmd_user=$(getparam userName)
-			cmd_type=$(getparam type)
-			cmd_status=$(getparam status)
-
-			# is it a "good" session?
-			if [ "$cmd_status" = "Running" ] && stringinstring "unix-" "$cmd_type"
-			then
-				su - "$cmd_user" -c "$PATH_BIN/nxclient --dialog ok --caption \"NX Administrator Message\" --message \"$@\" --noautokill -display \":$cmd_display\"" &
-				disown $!
-			fi
-	done
-	#nxnode_start --send "$CMD_PARAMS"
-}
-
-#
-# user mode available functions
-#
-
-if [ $UID -ne 0 ]
-then
-	[ "$1" = "--agent" ] && exec $PATH_BIN/nxnode "$@"
-	[ "$1" != "--passwd" ] && cmd_usage
-	cmd_user_passwd
-	exit 0
-fi
-
-#
-# root mode available functions
-#
-
-[ $# -lt 1 ] && cmd_usage "root"
-[ "$1" = "--help" ] && cmd_usage "root"
-
-if [ "$1" = "--version" ]
-then
-  echo "NXSERVER - Version $NX_VERSION $NX_LICENSE"
-  exit 0
-fi
-
-CMD=$1
-
-echo "NX> 100 NXSERVER - Version $NX_VERSION $NX_LICENSE"
-
-case $CMD in
-	# 
-	# User functions ...
-	# 
-	--passwd)
-		cmd_passwd "$@"
-	;;
-	--adduser|--useradd)
-		cmd_adduser "$@"
-	;;
-	--deluser|--userdel)
-		cmd_deluser "$@"
-	;;
-	--listuser|--userlist)
-		cmd_listuser
-	;;
-	--start)
-		cmd_start
-	;;
-	--stop)
-		cmd_stop
-	;;
-	--status)
-		cmd_status
-	;;
-	--restart)
-		cmd_restart
-	;;
-	--list)
-		cmd_list "$@"
-	;;
-	--list-suspended)
-		cmd_list_suspended "$@"
-	;;
-	--history)
-		cmd_history "$@"
-	;;
-	--terminate|--suspend|--force-terminate)
-		cmd_terminate "$@"
-	;;
-	--cleanup)
-		cmd_terminate "--force-terminate" "*"
-	;;
-	--send|--broadcast)
-		cmd_send "$@"
-	;;
-	*)
-		cmd_abort "Error: Function $CMD not implemented yet."
-esac
-echo "NX> 999 Bye"

Copied: freenx-server/tags/FreeNX-0.6.0.99/nxserver (from rev 297, freenx-server/trunk/nxserver)



