From fabianx at mail.berlios.de  Mon Oct  1 22:14:09 2007
From: fabianx at mail.berlios.de (fabianx at BerliOS)
Date: Mon, 1 Oct 2007 22:14:09 +0200
Subject: [Freenx-cvs] r391 - freenx-server/trunk
Message-ID: <200710012014.l91KE9d0014921@sheep.berlios.de>

Author: fabianx
Date: 2007-10-01 22:14:08 +0200 (Mon, 01 Oct 2007)
New Revision: 391

Modified:
   freenx-server/trunk/ChangeLog
   freenx-server/trunk/nxloadconfig
Log:
* Fixed setting up KDE_PRINTRC altogether if ENABLE_KDE_CUPS is not 1,
  and handles errors better when it is but kde-config is not available
  or fails.
  (scop at bat.berlios.de)




Modified: freenx-server/trunk/ChangeLog
===================================================================
--- freenx-server/trunk/ChangeLog	2007-09-18 14:30:08 UTC (rev 390)
+++ freenx-server/trunk/ChangeLog	2007-10-01 20:14:08 UTC (rev 391)
@@ -46,6 +46,10 @@
 	* Fixed diverse occurences of $sess_id in nxnode, when hostname
 	  contains whitespace.
 	  (fabianx at bat.berlios.de)
+	* Fixed setting up KDE_PRINTRC altogether if ENABLE_KDE_CUPS is not 1,
+	  and handles errors better when it is but kde-config is not available
+	  or fails.
+	  (scop at bat.berlios.de)
 
 07.07.2007 FreeNX 0.7.0 "Jornade SPL Edition VI+1"
 	* Fixed the printing support for CUPS 1.2.

Modified: freenx-server/trunk/nxloadconfig
===================================================================
--- freenx-server/trunk/nxloadconfig	2007-09-18 14:30:08 UTC (rev 390)
+++ freenx-server/trunk/nxloadconfig	2007-10-01 20:14:08 UTC (rev 391)
@@ -292,9 +292,12 @@
 	[ -z "$(strings $PATH_BIN/nxagent | egrep 'NXAGENT - Version 2.[01].0')" ] && ENABLE_2_0_0_BACKEND="0"
 fi 
 
-[ -z "$KDE_PRINTRC" -a -n "$KDEHOME" ] && KDE_PRINTRC="$KDEHOME/share/config/kdeprintrc"
-[ -z "$KDE_PRINTRC" ] && KDE_PRINTRC=$(kde-config --localprefix)"/share/config/kdeprintrc"
-[ -z "$KDE_PRINTRC" -o ! -r "$KDE_PRINTRC" ] && KDE_PRINTRC="$HOME/.kde/share/config/kdeprintrc"
+if [ "$ENABLE_KDE_CUPS" = "1" ]
+then
+	[ -z "$KDE_PRINTRC" -a -n "$KDEHOME" ] && KDE_PRINTRC="$KDEHOME/share/config/kdeprintrc"
+	[ -z "$KDE_PRINTRC" ] && which kde-config >/dev/null 2>&1 && KDE_PRINTRC=$(kde-config --localprefix 2>/dev/null)"/share/config/kdeprintrc"
+	[ -z "$KDE_PRINTRC" -o ! -r "$KDE_PRINTRC" ] && KDE_PRINTRC="$HOME/.kde/share/config/kdeprintrc"
+fi
 
 #########################################################################
 # Support for --check



From fabianx at mail.berlios.de  Mon Oct  1 22:21:16 2007
From: fabianx at mail.berlios.de (fabianx at BerliOS)
Date: Mon, 1 Oct 2007 22:21:16 +0200
Subject: [Freenx-cvs] r392 - freenx-server/trunk
Message-ID: <200710012021.l91KLFiU015359@sheep.berlios.de>

Author: fabianx
Date: 2007-10-01 22:21:15 +0200 (Mon, 01 Oct 2007)
New Revision: 392

Modified:
   freenx-server/trunk/ChangeLog
   freenx-server/trunk/nxnode
Log:
* Changed unix:$display -> :$display to enable FreeNX usage with newer
  xlib in C (used for example by Novell).
  (fabianx at bat.berlios


Modified: freenx-server/trunk/ChangeLog
===================================================================
--- freenx-server/trunk/ChangeLog	2007-10-01 20:14:08 UTC (rev 391)
+++ freenx-server/trunk/ChangeLog	2007-10-01 20:21:15 UTC (rev 392)
@@ -50,6 +50,9 @@
 	  and handles errors better when it is but kde-config is not available
 	  or fails.
 	  (scop at bat.berlios.de)
+	* Changed unix:$display -> :$display to enable FreeNX usage with newer
+	  xlib in C (used for example by Novell).
+	  (fabianx at bat.berlios.de)
 
 07.07.2007 FreeNX 0.7.0 "Jornade SPL Edition VI+1"
 	* Fixed the printing support for CUPS 1.2.

Modified: freenx-server/trunk/nxnode
===================================================================
--- freenx-server/trunk/nxnode	2007-10-01 20:14:08 UTC (rev 391)
+++ freenx-server/trunk/nxnode	2007-10-01 20:21:15 UTC (rev 392)
@@ -304,17 +304,17 @@
 	
 	if [ "$virtualdesktop" = "1" -a "$type" = "unix-application" -a "$DEFAULT_X_WM" != "" -a -x "$(find_app $DEFAULT_X_WM)" ]
 	then
-		DISPLAY=unix:$display $DEFAULT_X_WM >>"$USER_FAKE_HOME/.nx/C-$sess_id/session" 2>&1 &
+		DISPLAY=:$display $DEFAULT_X_WM >>"$USER_FAKE_HOME/.nx/C-$sess_id/session" 2>&1 &
 		NODE_WM_PID=$!
 	fi
 
-	echo "Xft.dpi: 96" | DISPLAY=unix:$display xrdb -merge >>"$USER_FAKE_HOME/.nx/C-$sess_id/session" 2>&1
+	echo "Xft.dpi: 96" | DISPLAY=:$display xrdb -merge >>"$USER_FAKE_HOME/.nx/C-$sess_id/session" 2>&1
 
 	#
 	# Startup the application
 	#
 	
-	DISPLAY=unix:$display $NODE_APPLICATION >>"$USER_FAKE_HOME/.nx/C-$sess_id/session" 2>&1 &
+	DISPLAY=:$display $NODE_APPLICATION >>"$USER_FAKE_HOME/.nx/C-$sess_id/session" 2>&1 &
 	NODE_APP_PID=$!
 	
 	mkdir -p "$USER_FAKE_HOME/.nx/C-$sess_id/pids/"
@@ -1167,13 +1167,13 @@
 
 $COMMAND_XAUTH >/dev/null 2>&1 <<EOF
 add localhost:$display MIT-MAGIC-COOKIE-1 $cookie
-add unix:$display MIT-MAGIC-COOKIE-1 $cookie
+add :$display MIT-MAGIC-COOKIE-1 $cookie
 exit
 EOF
 
 $COMMAND_XAUTH -f "$USER_FAKE_HOME/.nx/C-$sess_id/authority" >/dev/null 2>&1 <<EOF
 add localhost:$display MIT-MAGIC-COOKIE-1 $cookie
-add unix:$display MIT-MAGIC-COOKIE-1 $cookie
+add :$display MIT-MAGIC-COOKIE-1 $cookie
 exit
 EOF
 
@@ -1181,7 +1181,7 @@
 
 cat << EOF >"$USER_FAKE_HOME/.nx/C-$sess_id/scripts/authority"
 remove localhost:$display
-remove unix:$display
+remove :$display
 exit
 EOF
 
@@ -1205,7 +1205,7 @@
 if which "$NODE_AUTOSTART" >/dev/null 2>&1
 then
 	# go into background immediately
-	NXSESSIONID="$sess_id" DISPLAY=unix:$display "$NODE_AUTOSTART" "$1" >/dev/null 2>&1 &
+	NXSESSIONID="$sess_id" DISPLAY=:$display "$NODE_AUTOSTART" "$1" >/dev/null 2>&1 &
 	# dont't wait for this child!
 	disown $!
 fi



From fabianx at mail.berlios.de  Tue Oct  2 01:01:06 2007
From: fabianx at mail.berlios.de (fabianx at BerliOS)
Date: Tue, 2 Oct 2007 01:01:06 +0200
Subject: [Freenx-cvs] r393 - freenx-server/trunk
Message-ID: <200710012301.l91N16xc013465@sheep.berlios.de>

Author: fabianx
Date: 2007-10-02 01:01:06 +0200 (Tue, 02 Oct 2007)
New Revision: 393

Modified:
   freenx-server/trunk/ChangeLog
   freenx-server/trunk/nxloadconfig
Log:
* Enabled 3.0.0 backend with same usage pattern as 2.[0|1].0 backend.
  (Shawn Starr <spstarr at kde.org>)



Modified: freenx-server/trunk/ChangeLog
===================================================================
--- freenx-server/trunk/ChangeLog	2007-10-01 20:21:15 UTC (rev 392)
+++ freenx-server/trunk/ChangeLog	2007-10-01 23:01:06 UTC (rev 393)
@@ -53,6 +53,8 @@
 	* Changed unix:$display -> :$display to enable FreeNX usage with newer
 	  xlib in C (used for example by Novell).
 	  (fabianx at bat.berlios.de)
+	* Enabled 3.0.0 backend with same usage pattern as 2.[0|1].0 backend.
+	  (Shawn Starr <spstarr at kde.org>)
 
 07.07.2007 FreeNX 0.7.0 "Jornade SPL Edition VI+1"
 	* Fixed the printing support for CUPS 1.2.

Modified: freenx-server/trunk/nxloadconfig
===================================================================
--- freenx-server/trunk/nxloadconfig	2007-10-01 20:21:15 UTC (rev 392)
+++ freenx-server/trunk/nxloadconfig	2007-10-01 23:01:06 UTC (rev 393)
@@ -289,7 +289,7 @@
 if [ -z "$ENABLE_2_0_0_BACKEND" ]
 then
 	ENABLE_2_0_0_BACKEND="1"
-	[ -z "$(strings $PATH_BIN/nxagent | egrep 'NXAGENT - Version 2.[01].0')" ] && ENABLE_2_0_0_BACKEND="0"
+	[ -z "$(strings $PATH_BIN/nxagent | egrep 'NXAGENT - Version 2.[01].0|NXAGENT - Version 3.0.0')" ] && ENABLE_2_0_0_BACKEND="0"
 fi 
 
 if [ "$ENABLE_KDE_CUPS" = "1" ]
@@ -549,8 +549,8 @@
 	[ -z $(echo "$ENABLE_ROOTLESS_MODE" | egrep "^[0|1]$") ] && \
 		ERROR="yes" && echo "Error: Invalid value \"ENABLE_ROOTLESS_MODE=$ENABLE_ROOTLESS_MODE\""
 
-	[ -z "$(strings $PATH_BIN/nxagent | egrep 'NXAGENT - Version 1.5.0|NXAGENT - Version 2.[01].0')" ] && \
-		ERROR="yes" && echo "Error: Could not find 1.5.0 or 2.[01].0 version string in nxagent. NX 1.5.0 or 2.[01].0 backend is needed for this version of FreeNX."
+	[ -z "$(strings $PATH_BIN/nxagent | egrep 'NXAGENT - Version 1.5.0|NXAGENT - Version 2.[01].0|NXAGENT - Version 3.0.0')" ] && \
+		ERROR="yes" && echo "Error: Could not find 1.5.0 or 2.[01].0 or 3.0.0 version string in nxagent. NX 1.5.0 or 2.[01].0 or 3.0.0 backend is needed for this version of FreeNX."
 		
 	[ -z $(echo "$ENABLE_USESSION" | egrep "^[0|1]$") ] && \
 		ERROR="yes" && echo "Error: Invalid value \"ENABLE_USESSION=$ENABLE_USESSION\""



From fabianx at mail.berlios.de  Sun Oct 14 16:04:42 2007
From: fabianx at mail.berlios.de (fabianx at BerliOS)
Date: Sun, 14 Oct 2007 16:04:42 +0200
Subject: [Freenx-cvs] r394 - freenx-server/trunk
Message-ID: <200710141404.l9EE4gbO018961@sheep.berlios.de>

Author: fabianx
Date: 2007-10-14 16:04:42 +0200 (Sun, 14 Oct 2007)
New Revision: 394

Modified:
   freenx-server/trunk/ChangeLog
   freenx-server/trunk/nxloadconfig
Log:
* Bumped version number to 2.1.0-71 to let things like File-sharing
  port and auxiliary channels work.
  (fabianx at bat.berlios.de)



Modified: freenx-server/trunk/ChangeLog
===================================================================
--- freenx-server/trunk/ChangeLog	2007-10-01 23:01:06 UTC (rev 393)
+++ freenx-server/trunk/ChangeLog	2007-10-14 14:04:42 UTC (rev 394)
@@ -55,6 +55,9 @@
 	  (fabianx at bat.berlios.de)
 	* Enabled 3.0.0 backend with same usage pattern as 2.[0|1].0 backend.
 	  (Shawn Starr <spstarr at kde.org>)
+	* Bumped version number to 2.1.0-71 to let things like File-sharing
+	  port and auxiliary channels work.
+	  (fabianx at bat.berlios.de)
 
 07.07.2007 FreeNX 0.7.0 "Jornade SPL Edition VI+1"
 	* Fixed the printing support for CUPS 1.2.

Modified: freenx-server/trunk/nxloadconfig
===================================================================
--- freenx-server/trunk/nxloadconfig	2007-10-01 23:01:06 UTC (rev 393)
+++ freenx-server/trunk/nxloadconfig	2007-10-14 14:04:42 UTC (rev 394)
@@ -52,7 +52,7 @@
 # DO NOT TOUCH unless you REALLY know what you are doing
 #########################################################################
 
-NX_VERSION=1.5.0-70
+NX_VERSION=2.1.0-71
 NX_LICENSE="OS (GPL)"
 
 # Where can different nx components be found



From fabianx at mail.berlios.de  Sun Oct 14 16:19:04 2007
From: fabianx at mail.berlios.de (fabianx at BerliOS)
Date: Sun, 14 Oct 2007 16:19:04 +0200
Subject: [Freenx-cvs] r395 - freenx-server/trunk
Message-ID: <200710141419.l9EEJ4bK021246@sheep.berlios.de>

Author: fabianx
Date: 2007-10-14 16:19:04 +0200 (Sun, 14 Oct 2007)
New Revision: 395

Modified:
   freenx-server/trunk/ChangeLog
   freenx-server/trunk/nxnode
Log:
* Added parsing of aux parameter. This should remove all keyboard
  related problems with nxdesktop with 2.[01].0 backend.
  (fabianx at bat.berlios.de)



Modified: freenx-server/trunk/ChangeLog
===================================================================
--- freenx-server/trunk/ChangeLog	2007-10-14 14:04:42 UTC (rev 394)
+++ freenx-server/trunk/ChangeLog	2007-10-14 14:19:04 UTC (rev 395)
@@ -58,6 +58,9 @@
 	* Bumped version number to 2.1.0-71 to let things like File-sharing
 	  port and auxiliary channels work.
 	  (fabianx at bat.berlios.de)
+	* Added parsing of aux parameter. This should remove all keyboard
+	  related problems with nxdesktop with 2.[01].0 backend.
+	  (fabianx at bat.berlios.de)
 
 07.07.2007 FreeNX 0.7.0 "Jornade SPL Edition VI+1"
 	* Fixed the printing support for CUPS 1.2.

Modified: freenx-server/trunk/nxnode
===================================================================
--- freenx-server/trunk/nxnode	2007-10-14 14:04:42 UTC (rev 394)
+++ freenx-server/trunk/nxnode	2007-10-14 14:19:04 UTC (rev 395)
@@ -1031,6 +1031,11 @@
 	# nxclient > 1.5.0-106 variables
 	resize=$(getparam resize)
 	keybd=$(getparam keybd)
+
+	# backwards compatibility for keybd parameter
+	[ -z "$keybd" ] && keybd=$(getparam aux)
+	aux=$(getparam aux)
+
 	kbload=$(getparam kbload)
 	keymap=$(getparam keymap)
 
@@ -1156,7 +1161,7 @@
 	umask 0077
 
 cat << EOF > "$USER_FAKE_HOME/.nx/C-$sess_id/options"
-${kbtype:+kbtype=$kbtype,}${kbload:+kbload=$kbload,}${keymap:+keymap=$keymap,}${resize:+resize=$resize,}${CACHE}${IMAGES}${PACK}link=$link,nodelay=$nodelay,type=$realtype,cleanup=0,${ACCEPT}cookie=$proxy_cookie,id=$sess_id,samba=$samba,media=$media${sync:+,sync=$sync}${cups:+,cups=$cups}${keybd:+,keybd=$keybd}${http:+,http=$http}${rdpcolors:+,rdpcolors=$rdpcolors}${rdpcache:+,rdpcache=$rdpcache}${fullscreen:+,fullscreen=1}:$display
+${kbtype:+kbtype=$kbtype,}${kbload:+kbload=$kbload,}${keymap:+keymap=$keymap,}${resize:+resize=$resize,}${CACHE}${IMAGES}${PACK}link=$link,nodelay=$nodelay,type=$realtype,cleanup=0,${ACCEPT}cookie=$proxy_cookie,id=$sess_id,samba=$samba,media=$media${sync:+,sync=$sync}${cups:+,cups=$cups}${keybd:+,keybd=$keybd}${aux:+,aux=$aux}${http:+,http=$http}${rdpcolors:+,rdpcolors=$rdpcolors}${rdpcache:+,rdpcache=$rdpcache}${fullscreen:+,fullscreen=1}:$display
 EOF
 	umask $OLD_UMASK
 #samba=$samba,



From fabianx at mail.berlios.de  Sun Oct 14 16:28:33 2007
From: fabianx at mail.berlios.de (fabianx at BerliOS)
Date: Sun, 14 Oct 2007 16:28:33 +0200
Subject: [Freenx-cvs] r396 - freenx-server/trunk
Message-ID: <200710141428.l9EESXr7022110@sheep.berlios.de>

Author: fabianx
Date: 2007-10-14 16:28:33 +0200 (Sun, 14 Oct 2007)
New Revision: 396

Added:
   freenx-server/trunk/nxdialog
Removed:
   freenx-server/trunk/nxclient
Modified:
   freenx-server/trunk/ChangeLog
   freenx-server/trunk/nxnode
   freenx-server/trunk/nxserver
Log:
* Renamed nxclient to nxdialog and setup the necessary environment
  variable for nxagent to find it.
  (fabianx at bat.berlios.de, Thanks to NoMachine for giving this hint)



Modified: freenx-server/trunk/ChangeLog
===================================================================
--- freenx-server/trunk/ChangeLog	2007-10-14 14:19:04 UTC (rev 395)
+++ freenx-server/trunk/ChangeLog	2007-10-14 14:28:33 UTC (rev 396)
@@ -61,6 +61,9 @@
 	* Added parsing of aux parameter. This should remove all keyboard
 	  related problems with nxdesktop with 2.[01].0 backend.
 	  (fabianx at bat.berlios.de)
+	* Renamed nxclient to nxdialog and setup the necessary environment
+	  variable for nxagent to find it.
+	  (fabianx at bat.berlios.de, Thanks to NoMachine for giving this hint)
 
 07.07.2007 FreeNX 0.7.0 "Jornade SPL Edition VI+1"
 	* Fixed the printing support for CUPS 1.2.

Deleted: freenx-server/trunk/nxclient
===================================================================
--- freenx-server/trunk/nxclient	2007-10-14 14:19:04 UTC (rev 395)
+++ freenx-server/trunk/nxclient	2007-10-14 14:28:33 UTC (rev 396)
@@ -1,446 +0,0 @@
-#!/bin/bash
-#
-# Copyright (c) 2004 by Fabian Franz <freenx at fabian-franz.de>
-#           (c) 2004 by Rick Stout <zipsonic at gmail.com>
-#
-# License: GPL, version 2
-#
-# Note: NX does not check the exit-code from nxclient,
-#       but we set it to a "good value" anyway in case 
-#       it does check it someday.
-#
-# SVN: $Id$
-#
-# ========================================================================
-
-#JJK: borrowed from Aron Griffis
-
-function requote 
-{
-	declare arg
-
-	for arg
-	do
-		arg=$(printf '%q' "$arg")
-		printf '%s ' "${arg:-''}"
-	done
-}
-
-INPUTS=$(requote "$@")	#JJK: Save input parameter line...
-
-TEMP=`getopt -a -o d: --long local,noautokill,dialog:,caption:,message:,display:,printer:,parent: -n $(basename $0) -- "$@"`
-
-if [ $? != 0 ] ; then echo "Terminating..." >&2 ; exit 1 ; fi
-
-# Note the quotes around `$TEMP': they are essential!
-eval set -- "$TEMP"
-
-DIALOG_TYPE="ok";
-DIALOG_CAPTION=""
-DIALOG_MESSAGE=""
-DIALOG_LOCAL=""
-DIALOG_NOAUTOKILL=""
-DIALOG_PRINTER=""
-DIALOG_PARENT="$PPID"
-
-while true
-do
-        case "$1" in
-		--dialog) DIALOG_TYPE="$2"; shift 2 ;;
-		--caption) DIALOG_CAPTION="$2"; shift 2 ;;
-		--message) DIALOG_MESSAGE="$2"; shift 2 ;;
-		--local) DIALOG_LOCAL="yes"; shift ;;
-		--noautokill) DIALOG_NOAUTOKILL="yes"; shift ;;
-		--display) DISPLAY="$2"; shift 2 ;;
-		--printer) DIALOG_PRINTER="$2"; shift 2 ;;
-		--parent) DIALOG_PARENT="$2"; shift 2 ;;
-		--) shift ; break ;;
-                *) echo "Internal error!" ; exit 1; ;;
-	esac
-done
-
-export DISPLAY
-
-# if --printer is set, the dialog type is overridden
-[ -n "$DIALOG_PRINTER" ] && DIALOG_TYPE="printer"
-
-# First check if the commercial nxclient is available and use it
-# but check that it isn't this script to prevent a loop!
-#
-# Also check that not --printer was used, because the commercial
-# client does not like large databases like used when ENABLE_FOOMATIC=1.
-#
-# This seems to be because the used sorting algorithm scales in O(n^2).
-
-NXCLIENT="/usr/NX/bin/nxclient"
-[ -x "$NXCLIENT" -a "$DIALOG_TYPE" != "printer" -a "$(file -bi $NXCLIENT)" != 'application/x-shellscript' ] \
-	&& exec ${NXCLIENT} "$@"
-
-# FIXME: This should be COMMAND_XDIALOG, ...
-if [ -x /usr/bin/Xdialog ] 
-then
-	dialog_interface="xdialog"
-	DIALOG=/usr/bin/Xdialog # just in case that we have no good path
-elif [ -x /usr/bin/dialog ]
-then
-	#JJK: Added 'dialog_interface=dialog' option because Xdialog not standard
-	#JJK: on some distros such as Fedora and xmessage won't handle long
-	#JJK: lists of ppd files while the combination of 'dialog' and 'xterm'
-	#JJK: should be present on most setups.
-
-	dialog_interface="dialog"
-	DIALOG=/usr/bin/dialog
-	if [ -z "$NXCLIENT_FIRST_TIME" ]
-	then
-		# Run only once in case of subdialogs. Capture result in tempfile
-		TMPFILE=$(mktemp /tmp/nxclient.XXXXX)
-		export NXCLIENT_FIRST_TIME=1
-
-		xterm -geometry 120x24+100+100 +sb -title "NXclient" -e \
-		       /bin/bash -c "$DIALOG --infobox 'Please wait...' 3 25; $0 $INPUTS | tee $TMPFILE" || exit 1
-
-		#Need to recover the last line output (and not remove non-printing chars, because --stdout is used)
-		tail -1 $TMPFILE 
-		rm -f $TMPFILE
-		exit 0
-	fi
-else
-	dialog_interface="xmessage"
-	xmessage=$(which xmessage 2>/dev/null)
-	[ -z "$xmessage" ] && xmessage="/usr/X11R6/bin/xmessage"
-fi
-
-#
-# utility functions for all interfaces
-#
-
-# utility_printer "get|set|getlist|getvendlist|getdrvlist"
-#
-#	get <name> - gets the current driver for name
-#	set <name> <driver> <description> - sets the current driver and description for name
-#	getvendlist - gets a list of vendors
-#	getdrvlist <vendor> - gets a list of drivers for vendor
-#	getextdrvlist <vendor> - gets an extended list (with driver and 
-#                                description) of drivers for vendor
-#	getdesc <driver> - gets the description for driver <driver>
-#	getlist - gets a list of drivers
-
-#
-# drivers.cache has the following format:
-#	
-#	driver|<printername>|<ppdfile>|<description>
-#
-
-#
-# Example: IFS='|' DEFAULT_PRINTER=( $(utility_printer get <myprinter>) )
-# 	  
-#	You can then select ${DEFAULT_PRINTER[1]} for <printername>.
-# 
-
-utility_printer()
-{
-	UTILITY_DRIVERS_CACHE="$HOME/.nx/config/drivers.cache"
-	[ -n "$USER_FAKE_HOME" ] && UTILITY_DRIVERS_CACHE="$USER_FAKE_HOME/.nx/config/drivers.cache"
-	UTILITY_NXPRINT="nxprint"
-	[ -n "$PATH_BIN" ] && UTILITY_NXPRINT="$PATH_BIN/nxprint"
-	# Export configuration vars for nxprint
-	export ENABLE_FOOMATIC COMMAND_FOOMATIC UTILITY_DRIVERS_CACHE
-	case "$1" in 
-		get)
-			grep "driver|$2|" "$UTILITY_DRIVERS_CACHE" 2>/dev/null
-		;;
-		set)
-			# FIXME: Handle possible race conditions?
-			grep -v "driver|$2|" "$UTILITY_DRIVERS_CACHE" 2>/dev/null > $UTILITY_DRIVERS_CACHE.tmp
-			echo "driver|$2|$3|$4" >> $UTILITY_DRIVERS_CACHE.tmp
-			mv -f $UTILITY_DRIVERS_CACHE.tmp $UTILITY_DRIVERS_CACHE
-		;;
-		getvendlist)
-			$UTILITY_NXPRINT -d | awk -F'|' '{ print $2 }' | uniq | tr '\n' '|'
-		;;
-		getdrvlist)
-			$UTILITY_NXPRINT -d | awk -F'|' '($2=="'$2'") { print $4}' | tr '\n' '|'
-		;;
-		getextdrvlist)
-			$UTILITY_NXPRINT -d | awk -F'|' '($2=="'$2'") { print $4 "|" $3 }'
-		;;
-
-		getdesc)
-			$UTILITY_NXPRINT -d | awk -F'|' '($4=="'$2'") { print $3}'
-		;;
-		getlist)
-			$UTILITY_NXPRINT -d
-		;;
-	esac
-}
-
-#
-# xmessage dialog interface
-#
-
-xmessage_ok()
-{
-	$xmessage -buttons "Ok:0" -center "$DIALOG_MESSAGE"
-	return 0 # Give cancel on close ...
-}
-
-xmessage_yesno()
-{
-	$xmessage -buttons "Yes:2,No:0" -center "$DIALOG_MESSAGE"
-}
-
-xmessage_yesnosuspend()
-{
-	$xmessage -buttons "Suspend:3,Terminate:2,Cancel:0" -center "$DIALOG_MESSAGE"
-}
-
-xmessage_panic()
-{
-	$xmessage -buttons "Terminate:2,Cancel:0" -center "$DIALOG_MESSAGE"
-}
-
-xmessage_quit()
-{
-	$xmessage -buttons "Quit:0" -center "$DIALOG_MESSAGE"
-	return 0 # Give cancel on close ...
-}
-
-xmessage_printer_ask()
-{
-	$xmessage -buttons "Ok:100,Configure:101,Cancel:102" -center "$DIALOG_MESSAGE"
-	RC=$?
-	[ $RC -lt 100 ] && return 2
-	let RC=$RC-100
-	return $RC
-}
-
-xmessage_printer_configure()
-{
-	IFS=','
-	$xmessage -buttons "$*" -center "$DIALOG_MESSAGE"
-	RC=$?
-	unset IFS
-	VENDOR=""
-	if [ $RC -gt 100 ]
-	then
-		let NR=$RC-100
-		VENDOR="${!NR}"
-	fi
-	echo "$VENDOR"
-}
-
-xmessage_printer_configure_vendor()
-{
-	IFS='|' VENDOR_LIST=( $(utility_printer getvendlist) )
-	xmessage_printer_configure "${VENDOR_LIST[@]}"
-}
-
-xmessage_printer_configure_driver()
-{
-	IFS='|' DRIVER_LIST=( $(utility_printer getdrvlist "$1") )
-	xmessage_printer_configure "${DRIVER_LIST[@]}"
-}
-
-#
-# xdialog interface
-#
-
-xdialog_ok()
-{
-	$DIALOG --title "$DIALOG_CAPTION" --msgbox "$DIALOG_MESSAGE" 0 0
-	return 0 # Give cancel on close ...
-}
-
-xdialog_yesno()
-{
-	$DIALOG --title "$DIALOG_CAPTION" --yesno "$DIALOG_MESSAGE" 0 0
-	RC=$?
-	[ $RC -eq 0 ] && return 2
-	[ $RC -eq 1 ] && return 0
-}
-
-xdialog_yesnosuspend()
-{
-	$DIALOG --title "$DIALOG_CAPTION" --buttons-style text --ok-label "Suspend" --cancel-label "Terminate" --yesno "$DIALOG_MESSAGE Close this dialog to cancel." 400x150
-	RC=$?
-	[ $RC -eq 0 ] && return 3
-	[ $RC -eq 1 ] && return 2
-}
-
-xdialog_panic()
-{
-	$DIALOG --title "$DIALOG_CAPTION" --buttons-style text --default-no --ok-label "Terminate" --cancel-label "Cancel" --yesno "$DIALOG_MESSAGE" 0x0
-	RC=$?
-	[ $RC -eq 0 ] && return 2
-	[ $RC -eq 1 ] && return 0
-}
-
-xdialog_quit()
-{
-        $DIALOG --buttons-style text --ok-label "Quit" --title "$DIALOG_CAPTION" --msgbox "$DIALOG_MESSAGE" 0 0
-        return 0 # Give cancel on close ...
-}
-
-xdialog_printer_ask()
-{
-	$DIALOG --title "$DIALOG_CAPTION" --buttons-style text --ok-label "Ok" --cancel-label "Configure" --yesno "$DIALOG_MESSAGE\n\nClose this dialog to cancel." 400x250
-	RC=$?
-	[ $RC -eq 255 ] && return 2
-	return $RC
-}
-
-xdialog_printer_configure_vendor()
-{
-	IFS='|' VENDOR_LIST=( $(utility_printer getvendlist | sed 's/|/||off|/g') )
-	$DIALOG --stdout --title "$DIALOG_CAPTION" --radiolist "$DIALOG_MESSAGE" 0 0 6 "${VENDOR_LIST[@]}"
-}
-
-# xdialog_printer_configure_driver vendor old_driver
-xdialog_printer_configure_driver()
-{
-	IFS='|' XDIALOG_LIST=( $(utility_printer getextdrvlist "$1" | sed 's,$,|off,g; /'"$(basename $2)"'/ s,|off,|on,g' | tr '\n' '|') )
-	$DIALOG --stdout --title "$DIALOG_CAPTION" --radiolist "$DIALOG_MESSAGE" 0 0 6 "${XDIALOG_LIST[@]}"
-}
-
-#JJK: dialog interface
-# These are analogous to the Xdialog functions with a few subtle
-# syntax differences
-#
-
-dialog_ok()
-{
-	$DIALOG --stdout --title "$DIALOG_CAPTION" --msgbox "$DIALOG_MESSAGE" 0 0
-	return 0 # Give cancel on close ...
-}
-
-dialog_yesno()
-{
-	$DIALOG --stdout --title "$DIALOG_CAPTION" --yesno "$DIALOG_MESSAGE" 0 0
-	RC=$?
-	[ $RC -eq 0 ] && return 2
-	[ $RC -eq 1 ] && return 0
-}
-
-dialog_yesnosuspend()
-{
-	$DIALOG --stdout --title "$DIALOG_CAPTION"  --yes-label "Suspend" --no-label "Terminate" --yesno "$DIALOG_MESSAGE\n\nPress 'Esc' to cancel." 8 60
-	RC=$?
-	[ $RC -eq 0 ] && return 3
-	[ $RC -eq 1 ] && return 2
-}
-
-dialog_panic()
-{
-	$DIALOG --stdout --title "$DIALOG_CAPTION" --defaultno --yes-label "Terminate" --no-label "Cancel" --yesno "$DIALOG_MESSAGE" 0 0
-	RC=$?
-	[ $RC -eq 0 ] && return 2
-	[ $RC -eq 1 ] && return 0
-}
-
-dialog_quit()
-{
-	$DIALOG --stdout --ok-label "Quit" --title "$DIALOG_CAPTION" --msgbox "$DIALOG_MESSAGE" 0 0
-	return 0 # Give cancel on close ...
-}
-
-dialog_printer_ask()
-{
-	$DIALOG --stdout --cr-wrap --title "$DIALOG_CAPTION" --yes-label "Ok" --no-label "Configure" --yesno "$DIALOG_MESSAGE\n\nPress 'Esc' to cancel." 10 70
-	RC=$?
-	echo $RC
-	[ $RC -eq 255 ] && return 2
-	return $RC
-}
-
-dialog_printer_configure_vendor()
-{
-	IFS='|' VENDOR_LIST=( $(utility_printer getvendlist | sed 's/|/||/g') )
-	$DIALOG --stdout --title "$DIALOG_CAPTION" --menu "$DIALOG_MESSAGE" 0 40 15 "${VENDOR_LIST[@]}"
-}
-
-# dialog_printer_configure_driver vendor old_driver
-dialog_printer_configure_driver()
-{
-	IFS='|' XDIALOG_LIST=( $(utility_printer getextdrvlist "$1" | tr '\n' '|') )
-	$DIALOG --stdout --title "$DIALOG_CAPTION" --menu "$DIALOG_MESSAGE" 0 110 15 "${XDIALOG_LIST[@]}"
-}
-
-
-#
-# helper functions
-#
-
-helper_dialog_printer()
-{
-	IFS="|" PRINTER_INFORMATION=( $(utility_printer get "$DIALOG_PRINTER") )
-	PRINTER_CONFIGURE="yes"
-	[ -z "$DIALOG_CAPTION" ] && DIALOG_CAPTION="NX Printer configuration for $DIALOG_PRINTER"
-	
-	# Do we have old printer information present?
-	if [ -n "$PRINTER_INFORMATION" ]
-	then
-		DIALOG_MESSAGE=$(echo -e "Found driver for printer $DIALOG_PRINTER.\n\nOld choice was: ${PRINTER_INFORMATION[3]}.\n\nIf you want to keep the settings click on 'Ok' \n- else click on 'Configure'.") ${dialog_interface}_printer_ask
-		RC=$?
-		# bail out with exit code 2 in case the user cancelled the operation
-		[ $RC -eq 2 ] && echo "cancel: aborted" && exit 2
-		[ $RC -eq 0 ] && PRINTER_CONFIGURE="no"
-	fi
-	
-	VENDOR=""
-	OLD_DRIVER="${PRINTER_INFORMATION[2]}"
-
-	if [ "$PRINTER_CONFIGURE" = "yes" ]
-	then
-		DRIVER=""
-		VENDOR=$(DIALOG_MESSAGE="Choose vendor for printer $DIALOG_PRINTER." ${dialog_interface}_printer_configure_vendor)
-		[ -n "$VENDOR" ] && DRIVER=$(DIALOG_MESSAGE="Choose driver for printer $DIALOG_PRINTER." ${dialog_interface}_printer_configure_driver "$VENDOR" "${OLD_DRIVER:-invalid}")
-		# set the new printer driver
-		if [ -n "$DRIVER" ]
-		then
-			DESC=$(utility_printer getdesc "$DRIVER")
-			utility_printer set "$DIALOG_PRINTER" "$DRIVER" "$DESC"
-		fi
-	else
-		DRIVER="$OLD_DRIVER"
-	fi
-
-	# echo the choosen <ppdfile> to stdout
-	[ -n "$DRIVER" ] && echo "$DRIVER"
-	[ -z "$DRIVER" ] && echo "cancel: aborted" && exit 2
-
-	exit 0
-}
-
-#
-# main case statement
-#
-
-case $DIALOG_TYPE in 
-	ok)
-		${dialog_interface}_ok
-	;;
-	yesno)
-		${dialog_interface}_yesno
-	;;
-	yesnosuspend)
-		${dialog_interface}_yesnosuspend
-	;;
-	panic)
-		${dialog_interface}_panic
-	;;
-	quit)
-		${dialog_interface}_quit
-	;;
-	printer)
-		helper_dialog_printer
-	;;
-esac
-
-#
-# Time for exit code checks :)
-#
-
-RC=$?
-	[ $RC -eq 2 ] && kill -TERM $DIALOG_PARENT
-	[ $RC -eq 3 ] && kill -HUP $DIALOG_PARENT
-exit 0

Copied: freenx-server/trunk/nxdialog (from rev 367, freenx-server/trunk/nxclient)

Modified: freenx-server/trunk/nxnode
===================================================================
--- freenx-server/trunk/nxnode	2007-10-14 14:19:04 UTC (rev 395)
+++ freenx-server/trunk/nxnode	2007-10-14 14:28:33 UTC (rev 396)
@@ -403,6 +403,7 @@
 	export DISPLAY="nx/nx,options=$USER_FAKE_HOME/.nx/C-$sess_id/options:$display"
 	export XAUTHORITY="$USER_FAKE_HOME/.nx/C-$sess_id/authority"
 	export HOME="$USER_FAKE_HOME"
+	export NX_CLIENT="$PATH_BIN/nxdialog"
 
 	#
 	# Setup optional parameters for nxagent
@@ -1288,10 +1289,10 @@
 	error=$(PASSWD="$password" $COMMAND_SMBMOUNT "//$computername/$share" "$HOME/$dir" -o username="$username,ip=127.0.0.1,port=$port" 2>&1)
 	if [ $? -eq 0 ]
 	then
-		$PATH_BIN/nxclient -dialog ok -caption "NXServer Message" -message "Info: Share: '//$computername/$share' mounted on: '$HOME/$dir'" -display :$display &
+		$PATH_BIN/nxdialog -dialog ok -caption "NXServer Message" -message "Info: Share: '//$computername/$share' mounted on: '$HOME/$dir'" -display :$display &
 		echo "$HOME/$dir" >> "$USER_FAKE_HOME/.nx/C-$SERVER_NAME-$display-$sessionid/scripts/mpoint"
 	else
-		$PATH_BIN/nxclient -dialog ok -caption "NXServer Message" -message "Info: Share: '//$computername/$share' failed to mount: $error" -display :$display &
+		$PATH_BIN/nxdialog -dialog ok -caption "NXServer Message" -message "Info: Share: '//$computername/$share' failed to mount: $error" -display :$display &
 	fi
 }
 
@@ -1327,7 +1328,7 @@
 
 	if [ "$ENABLE_CUPS_SEAMLESS" != "1" ]
 	then
-		MODEL=$($PATH_BIN/nxclient -printer "$NAME" -display :$display)
+		MODEL=$($PATH_BIN/nxdialog -printer "$NAME" -display :$display)
 		[ -z "$MODEL" -o "$MODEL" = "cancel: aborted" ] && return
 	else
 		sleep $CUPS_SEAMLESS_DELAY
@@ -1344,8 +1345,8 @@
 		then
 			curl --digest -o "$USER_FAKE_HOME/.nx/config/ppd/$printer.ppd" "http://$username:$password at 127.0.0.1:$port/ppd/${printer}_nxdl.ppd" >>"$USER_FAKE_HOME/.nx/C-$sess_id/cups/curl.log" 2>&1
 		RC=$?
-		[ $RC -eq 0 -a "$ENABLE_CUPS_SEAMLESS" != "1" ] && $PATH_BIN/nxclient --message "Download successful." -display :$display
-		[ $RC -ne 0 -a "$ENABLE_CUPS_SEAMLESS" != "1" ] && $PATH_BIN/nxclient --message "Download failed. Log is: $USER_FAKE_HOME/.nx/C-$sess_id/cups/curl.log" -display :$display
+		[ $RC -eq 0 -a "$ENABLE_CUPS_SEAMLESS" != "1" ] && $PATH_BIN/nxdialog --message "Download successful." -display :$display
+		[ $RC -ne 0 -a "$ENABLE_CUPS_SEAMLESS" != "1" ] && $PATH_BIN/nxdialog --message "Download failed. Log is: $USER_FAKE_HOME/.nx/C-$sess_id/cups/curl.log" -display :$display
 		fi
 		MODEL="$USER_FAKE_HOME/.nx/config/ppd/$printer.ppd"
 	fi

Modified: freenx-server/trunk/nxserver
===================================================================
--- freenx-server/trunk/nxserver	2007-10-14 14:19:04 UTC (rev 395)
+++ freenx-server/trunk/nxserver	2007-10-14 14:28:33 UTC (rev 396)
@@ -1720,7 +1720,7 @@
 			# is it a "good" session?
 			if [ "$cmd_status" = "Running" ] && stringinstring "unix-" "$cmd_type"
 			then
-				su - "$cmd_user" -c "$PATH_BIN/nxclient --dialog ok --caption \"NX Administrator Message\" --message \"$@\" --noautokill -display \":$cmd_display\"" &
+				su - "$cmd_user" -c "$PATH_BIN/nxdialog --dialog ok --caption \"NX Administrator Message\" --message \"$@\" -display \":$cmd_display\"" &
 				disown $!
 			fi
 	done



From fabianx at mail.berlios.de  Sun Oct 14 16:32:45 2007
From: fabianx at mail.berlios.de (fabianx at BerliOS)
Date: Sun, 14 Oct 2007 16:32:45 +0200
Subject: [Freenx-cvs] r397 - freenx-server/trunk
Message-ID: <200710141432.l9EEWjFO022458@sheep.berlios.de>

Author: fabianx
Date: 2007-10-14 16:32:45 +0200 (Sun, 14 Oct 2007)
New Revision: 397

Modified:
   freenx-server/trunk/nxloadconfig
Log:
Minor fix for malformed patch. It needs to be "openssl md5" not without quotes.



Modified: freenx-server/trunk/nxloadconfig
===================================================================
--- freenx-server/trunk/nxloadconfig	2007-10-14 14:28:33 UTC (rev 396)
+++ freenx-server/trunk/nxloadconfig	2007-10-14 14:32:45 UTC (rev 397)
@@ -183,7 +183,7 @@
 COMMAND_SSH=ssh
 COMMAND_SSH_KEYGEN=ssh-keygen
 COMMAND_CUPSD=/usr/sbin/cupsd
-COMMAND_MD5SUM=openssl md5
+COMMAND_MD5SUM="openssl md5"
 COMMAND_PERL=perl
 
 # Misc directives



From fabianx at mail.berlios.de  Sun Oct 14 20:04:42 2007
From: fabianx at mail.berlios.de (fabianx at BerliOS)
Date: Sun, 14 Oct 2007 20:04:42 +0200
Subject: [Freenx-cvs] r398 - freenx-server/trunk
Message-ID: <200710141804.l9EI4gH9017505@sheep.berlios.de>

Author: fabianx
Date: 2007-10-14 20:04:40 +0200 (Sun, 14 Oct 2007)
New Revision: 398

Added:
   freenx-server/trunk/nxdesktop_helper
   freenx-server/trunk/nxviewer_helper
Modified:
   freenx-server/trunk/ChangeLog
   freenx-server/trunk/node.conf.sample
   freenx-server/trunk/nxloadconfig
   freenx-server/trunk/nxnode
   freenx-server/trunk/nxserver
Log:
* Added experimental support for usage of external rdesktop and
  vncviewer programs.
  This is for example needed for 3.0.0 backend.
  (fabianx at bat.berlios.de)



Modified: freenx-server/trunk/ChangeLog
===================================================================
--- freenx-server/trunk/ChangeLog	2007-10-14 14:32:45 UTC (rev 397)
+++ freenx-server/trunk/ChangeLog	2007-10-14 18:04:40 UTC (rev 398)
@@ -64,6 +64,10 @@
 	* Renamed nxclient to nxdialog and setup the necessary environment
 	  variable for nxagent to find it.
 	  (fabianx at bat.berlios.de, Thanks to NoMachine for giving this hint)
+	* Added experimental support for usage of external rdesktop and
+	  vncviewer programs.	  
+	  This is for example needed for 3.0.0 backend.
+	  (fabianx at bat.berlios.de)
 
 07.07.2007 FreeNX 0.7.0 "Jornade SPL Edition VI+1"
 	* Fixed the printing support for CUPS 1.2.

Modified: freenx-server/trunk/node.conf.sample
===================================================================
--- freenx-server/trunk/node.conf.sample	2007-10-14 14:32:45 UTC (rev 397)
+++ freenx-server/trunk/node.conf.sample	2007-10-14 18:04:40 UTC (rev 398)
@@ -406,6 +406,19 @@
 # The tool to generate md5sums with
 #COMMAND_MD5SUM=md5sum
 
+# The key that contains the name of the complete path of the 'rdesktop' command.
+#COMMAND_RDESKTOP=rdesktop
+
+# The key that contains the name of the complete path of the 'vncviewer' command.
+#COMMAND_VNCVIEWER=vncviewer
+
+# The key that contains the name of the complete path of the 'vncpasswd' command.
+# By default the builtin nxpasswd is used.
+#COMMAND_VNCPASSWD="$PATH_BIN/nxpasswd"
+
+# The key that contains the name of the complete path of the 'x11vnc' command.
+#COMMAND_X11VNC=x11vnc
+
 #########################################################################
 # Misc directives
 #########################################################################
@@ -464,3 +477,20 @@
 
 # Extra options to nxproxy. See !M documentation for useful parameters.
 #PROXY_EXTRA_OPTIONS=""
+
+# In case you want to use an external 'rdesktop' command
+# set this to "1".
+# 
+# If nxdesktop cannot be found this is set automatically to "1".
+#ENABLE_EXTERNAL_NXDESKTOP="0"
+
+# This configuration variable determines if 'rdesktop' command should be run with -k keyboard option
+# or if the keyboard should be autodetected.
+#
+#ENABLE_EXTERNAL_NXDESKTOP_KEYBOARD="1"
+
+# In case you want to use an external 'nxviewer' command
+# set this to "1".
+# 
+# If nxviewer cannot be found this is set automatically to "1".
+#ENABLE_EXTERNAL_NXVIEWER="0"

Added: freenx-server/trunk/nxdesktop_helper
===================================================================
--- freenx-server/trunk/nxdesktop_helper	2007-10-14 14:32:45 UTC (rev 397)
+++ freenx-server/trunk/nxdesktop_helper	2007-10-14 18:04:40 UTC (rev 398)
@@ -0,0 +1,22 @@
+#!/bin/sh
+#
+# nxdesktop_helper - Small helper for external rdesktop program as needed by NX 3.0.0 backend.
+#
+# Copyright (c) 2007 by Fabian Franz <freenx at fabian-franz.de>
+#
+# License: GPL, v2
+#
+# SVN: $Id $
+#
+
+[ -z "$COMMAND_RDESKTOP" ] && COMMAND_RDESKTOP="rdesktop"
+
+# setup commandline
+set -- -f -u "$agent_user" -k "$agent_keyboard" -d "$agent_domain" "$agent_server"
+
+if [ -n "$agent_password" ]
+then
+	echo $agent_password | $COMMAND_RDESKTOP -p - "$@"
+else
+	$COMMAND_RDESKTOP "$@"
+fi


Property changes on: freenx-server/trunk/nxdesktop_helper
___________________________________________________________________
Name: svn:executable
   + *
Name: svn:keywords
   + Id

Modified: freenx-server/trunk/nxloadconfig
===================================================================
--- freenx-server/trunk/nxloadconfig	2007-10-14 14:32:45 UTC (rev 397)
+++ freenx-server/trunk/nxloadconfig	2007-10-14 18:04:40 UTC (rev 398)
@@ -72,7 +72,7 @@
 # the name of the authorized keys file for ssh
 SSH_AUTHORIZED_KEYS="authorized_keys2"
 
-# retest values like xauth, netcat
+# retest values like xauth, netcat and checks for nxdesktop/nxviewer availability
 # set to 0 if you are sure, you set the right values
 
 NXCONFIG_RETEST=1
@@ -185,6 +185,10 @@
 COMMAND_CUPSD=/usr/sbin/cupsd
 COMMAND_MD5SUM="openssl md5"
 COMMAND_PERL=perl
+COMMAND_RDESKTOP="rdesktop"
+COMMAND_VNCVIEWER="vncviewer"
+COMMAND_VNCPASSWD="$PATH_BIN/nxpasswd"
+COMMAND_X11VNC="x11vnc"
 
 # Misc directives
 
@@ -204,6 +208,9 @@
 AGENT_FONT_SERVER=""
 PROXY_TCP_NODELAY=""
 PROXY_EXTRA_OPTIONS=""
+ENABLE_EXTERNAL_NXDESKTOP="0"
+ENABLE_EXTERNAL_NXDESKTOP_KEYBOARD="1"
+ENABLE_EXTERNAL_NXVIEWER="0"
 
 ############################################################################
 # OS specific directives
@@ -257,6 +264,9 @@
 then
 	{ ! mywhich "$COMMAND_XAUTH" && which xauth; } >/dev/null 2>&1 && COMMAND_XAUTH=$(which xauth)
 	{ ! mywhich "$COMMAND_NETCAT" && which nc; } >/dev/null 2>&1 && COMMAND_NETCAT=$(which nc)
+	{ ! mywhich "$PATH_BIN/nxdesktop"; } >/dev/null 2>&1 && ENABLE_EXTERNAL_NXDESKTOP="1"
+	{ ! mywhich "$PATH_BIN/nxviewer"; } >/dev/null 2>&1 && ENABLE_EXTERNAL_NXVIEWER="1"
+	{ ! mywhich "$COMMAND_VNCPASSWD" && which vncpasswd; } >/dev/null 2>&1 && COMMAND_VNCPASSWD=$(which vncpasswd)
 fi
 
 #########################################################################
@@ -314,14 +324,31 @@
 		ERROR="yes" && echo "Error: Invalid value \"PATH_BIN=$PATH_BIN\""
 	# Check for NX agents ...
 	
-	[ ! -f "$PATH_BIN/nxagent" ] && \
+	[ ! -x "$PATH_BIN/nxagent" ] && \
 		ERROR="yes" && echo "Error: Could not find nxagent in $PATH_BIN. Please install some OSS components."
+	
+	if [ "ENABLE_EXTERNAL_NXDESKTOP" = "1" ]
+	then
+		[ ! mywhich "$COMMAND_RDESKTOP" >/dev/null 2>&1 ] && \
+			WARNING="yes" && echo "Warning: Could not find COMMAND_RDESKTOP=$COMMAND_RDESKTOP. RDP sessions won't work."
+	else
+		[ ! -x "$PATH_BIN/nxdesktop" ] && \
+			WARNING="yes" && echo "Warning: Could not find nxdesktop in $PATH_BIN. RDP sessions won't work."
+	fi
 		
-	[ ! -f "$PATH_BIN/nxdesktop" ] && \
-		WARNING="yes" && echo "Warning: Could not find nxdesktop in $PATH_BIN. RDP sessions won't work."
-		
-	[ ! -f "$PATH_BIN/nxviewer" ] && \
-		WARNING="yes" && echo "Warning: Could not find nxviewer in $PATH_BIN. VNC sessions won't work."
+	if [ "ENABLE_EXTERNAL_NXVIEWER" = "1" ]
+	then
+		[ ! mywhich "$COMMAND_VNCVIEWER" >/dev/null 2>&1 ] && \
+			WARNING="yes" && echo "Warning: Could not find COMMAND_VNCVIEWER=$COMMAND_VNCVIEWER. VNC sessions won't work."
+		[ ! mywhich "$COMMAND_VNCPASSWD" >/dev/null 2>&1 ] && \
+			WARNING="yes" && echo "Warning: Could not find COMMAND_VNCPASSWD=$COMMAND_VNCPASSWD. VNC sessions won't work."
+	else
+		[ ! -x "$PATH_BIN/nxviewer" ] && \
+			WARNING="yes" && echo "Warning: Could not find nxviewer in $PATH_BIN. VNC sessions won't work."
+	fi
+	
+	[ ! mywhich "$COMMAND_X11VNC" >/dev/null 2>&1 ] && \
+			WARNING="yes" && echo "Warning: Could not find COMMAND_X11VNC=$COMMAND_X11VNC. VNC mirror sessions won't work."
 
 	# Check for paths
 		

Modified: freenx-server/trunk/nxnode
===================================================================
--- freenx-server/trunk/nxnode	2007-10-14 14:32:45 UTC (rev 397)
+++ freenx-server/trunk/nxnode	2007-10-14 18:04:40 UTC (rev 398)
@@ -1096,6 +1096,34 @@
 	host=$(getparam host)
 	mirrordisplay=$(getparam mirrordisplay)
 	mirrorhost=$(getparam mirrorhost)
+	
+	sess_id="$SERVER_NAME-$display-$uniqueid"
+	NXSESSION_DIRECTORY="$USER_FAKE_HOME/.nx/C-$sess_id"
+	
+	# export the agent_* options for the helper scripts
+	if [ "$(getparam freenx_export_agents)" = "1" ]
+	then
+		export agent_user
+		export agent_password
+		export agent_server
+		export agent_domain
+		agent_keyboard=""
+		[ "ENABLE_EXTERNAL_NXDESKTOP_KEYBOARD" = "1" ] && agent_keyboard=$(echo "$keyboard" | cut -d'/' -f2)
+		export agent_keyboard
+		export NXSESSION_DIRECTORY
+		export AGENT_EXTRA_OPTIONS_RFB
+		export AGENT_EXTRA_OPTIONS_RDP
+		export COMMAND_RDESKTOP
+		export COMMAND_VNCVIEWER
+		export COMMAND_VNCPASSWD
+		export COMMAND_X11VNC
+		export PATH_BIN
+		export mirrordisplay
+		export mirrorhost
+		# We do not want to suspend such a session
+		# as RDP/RFB are both suspendable as well
+		ENABLE_PERSISTENT_SESSION=""
+	fi
 
 	fullscreen=$(getparam fullscreen)
 	[ "$geometry" = "fullscreen" ] && fullscreen="1"

Modified: freenx-server/trunk/nxserver
===================================================================
--- freenx-server/trunk/nxserver	2007-10-14 14:32:45 UTC (rev 397)
+++ freenx-server/trunk/nxserver	2007-10-14 18:04:40 UTC (rev 398)
@@ -1144,6 +1144,28 @@
 		CMDLINE=$PARAMS
 	fi
 	
+	if [ "$ACTION" = "start" ]
+	then
+
+		# Hack for external RDP/RFB agents
+
+		if [ "$ENABLE_EXTERNAL_NXDESKTOP" = "1" -a "$(getparam type)" = "windows" ]
+		then
+			type="unix-application"
+			application="$PATH_BIN/nxdesktop_helper"
+			PARAMS="$PARAMS&type=$type&application=$application&freenx_export_agents=1"
+			CMDLINE=$PARAMS
+		fi
+		 
+		if [ "$ENABLE_EXTERNAL_NXVIEWER" = "1" -a "$(getparam type)" = "vnc" ]
+		then
+			type="unix-application"
+			application="$PATH_BIN/nxviewer_helper"
+			PARAMS="$PARAMS&type=$type&application=$application&freenx_export_agents=1"
+			CMDLINE=$PARAMS
+		fi
+	fi
+	
 	# If we can't get the userip and SSHD_CHECK_IP is set to 1
 	# we bail out.
 	if [ -z "$SSH_CLIENT" -a -z "$SSH2_CLIENT" ]

Added: freenx-server/trunk/nxviewer_helper
===================================================================
--- freenx-server/trunk/nxviewer_helper	2007-10-14 14:32:45 UTC (rev 397)
+++ freenx-server/trunk/nxviewer_helper	2007-10-14 18:04:40 UTC (rev 398)
@@ -0,0 +1,39 @@
+#!/bin/sh
+#
+# nxviewer_helper - Small helper for external vncviewer program as needed by NX 3.0.0 backend.
+#
+# Copyright (c) 2007 by Fabian Franz <freenx at fabian-franz.de>
+#
+# License: GPL, v2
+#
+# SVN: $Id $
+#
+
+[ -z "$COMMAND_VNCVIEWER" ] && COMMAND_VNCVIEWER="vncviewer"
+[ -z "$COMMAND_VNCPASSWD" ] && COMMAND_VNCPASSWD="$PATH_BIN/nxpasswd"
+[ -z "$COMMAND_X11VNC" ] && COMMAND_X11VNC="x11vnc"
+
+mkdir -p "$NXSESSION_DIRECTORY/scripts/"
+echo "$agent_password" | $COMMAND_VNCPASSWD "$NXSESSION_DIRECTORY/scripts/.passwd" doit
+
+# Start x11vnc
+if [ -n "$mirrordisplay" ]
+then
+	(
+		unset XAUTHORITY
+		# Note: No "-accept popup" as its the same user and with that password
+		#       he could do already more than -accept popup would allow.
+		DISPLAY="$mirrorhost:$mirrordisplay.0" $COMMAND_X11VNC -timeout 120 -once -rfbauth "$NXSESSION_DIRECTORY/scripts/.passwd" >"$NXSESSION_DIRECTORY/scripts/.vnc_port" &
+	)
+	sleep 1
+	agent_port=$(cat "$NXSESSION_DIRECTORY/scripts/.vnc_port" | egrep "^PORT=" | cut -d'=' -f 2)
+	[ -z "agent_port" ] && agent_port="0"
+	# note the :: is not a mistake, but rather a hint for nxviewer to use this as a port and not
+	# interpret it as a display.
+	agent_server="127.0.0.1::$agent_port"
+	rm -f "$NXSESSION_DIRECTORY/scripts/.vnc_port"
+fi
+
+# Start the vncviewer
+
+exec $COMMAND_VNCVIEWER -passwd "$NXSESSION_DIRECTORY/scripts/.passwd" -fullscreen "$agent_server" $AGENT_EXTRA_OPTIONS_RFB


Property changes on: freenx-server/trunk/nxviewer_helper
___________________________________________________________________
Name: svn:executable
   + *
Name: svn:keywords
   + Id



From fabianx at mail.berlios.de  Sun Oct 14 20:05:36 2007
From: fabianx at mail.berlios.de (fabianx at BerliOS)
Date: Sun, 14 Oct 2007 20:05:36 +0200
Subject: [Freenx-cvs] r399 - freenx-server/trunk
Message-ID: <200710141805.l9EI5a5w017688@sheep.berlios.de>

Author: fabianx
Date: 2007-10-14 20:05:36 +0200 (Sun, 14 Oct 2007)
New Revision: 399

Modified:
   freenx-server/trunk/nxnode
Log:
We do no longer use unix: display style.



Modified: freenx-server/trunk/nxnode
===================================================================
--- freenx-server/trunk/nxnode	2007-10-14 18:04:40 UTC (rev 398)
+++ freenx-server/trunk/nxnode	2007-10-14 18:05:36 UTC (rev 399)
@@ -477,7 +477,6 @@
 		# Start x11vnc
 		if [ -n "$mirrordisplay" ]
 		then
-			[ -z "$mirrorhost" ] && mirrorhost="unix"
 			(
 				unset XAUTHORITY
 				# Note: No "-accept popup" as its the same user and with that password



From fabianx at mail.berlios.de  Sun Oct 14 20:07:03 2007
From: fabianx at mail.berlios.de (fabianx at BerliOS)
Date: Sun, 14 Oct 2007 20:07:03 +0200
Subject: [Freenx-cvs] r400 - freenx-server/trunk
Message-ID: <200710141807.l9EI73VI017793@sheep.berlios.de>

Author: fabianx
Date: 2007-10-14 20:07:02 +0200 (Sun, 14 Oct 2007)
New Revision: 400

Modified:
   freenx-server/trunk/node.conf.sample
Log:
Changed the default md5sum tool. Was only changed in nxloadconfig.



Modified: freenx-server/trunk/node.conf.sample
===================================================================
--- freenx-server/trunk/node.conf.sample	2007-10-14 18:05:36 UTC (rev 399)
+++ freenx-server/trunk/node.conf.sample	2007-10-14 18:07:02 UTC (rev 400)
@@ -404,7 +404,7 @@
 #COMMAND_CUPSD=/usr/sbin/cupsd
 
 # The tool to generate md5sums with
-#COMMAND_MD5SUM=md5sum
+#COMMAND_MD5SUM="openssl md5"
 
 # The key that contains the name of the complete path of the 'rdesktop' command.
 #COMMAND_RDESKTOP=rdesktop



From fabianx at mail.berlios.de  Sun Oct 14 20:11:49 2007
From: fabianx at mail.berlios.de (fabianx at BerliOS)
Date: Sun, 14 Oct 2007 20:11:49 +0200
Subject: [Freenx-cvs] r401 - freenx-server/trunk
Message-ID: <200710141811.l9EIBnCm018030@sheep.berlios.de>

Author: fabianx
Date: 2007-10-14 20:11:49 +0200 (Sun, 14 Oct 2007)
New Revision: 401

Modified:
   freenx-server/trunk/ChangeLog
   freenx-server/trunk/node.conf.sample
   freenx-server/trunk/nxloadconfig
Log:
* Changed the default load balancing algorithm to "random"
  as the nxcheckload script might not be available.
  (fabianx at bat.berlios.de)



Modified: freenx-server/trunk/ChangeLog
===================================================================
--- freenx-server/trunk/ChangeLog	2007-10-14 18:07:02 UTC (rev 400)
+++ freenx-server/trunk/ChangeLog	2007-10-14 18:11:49 UTC (rev 401)
@@ -68,6 +68,9 @@
 	  vncviewer programs.	  
 	  This is for example needed for 3.0.0 backend.
 	  (fabianx at bat.berlios.de)
+	* Changed the default load balancing algorithm to "random"
+	  as the nxcheckload script might not be available.
+	  (fabianx at bat.berlios.de)
 
 07.07.2007 FreeNX 0.7.0 "Jornade SPL Edition VI+1"
 	* Fixed the printing support for CUPS 1.2.

Modified: freenx-server/trunk/node.conf.sample
===================================================================
--- freenx-server/trunk/node.conf.sample	2007-10-14 18:07:02 UTC (rev 400)
+++ freenx-server/trunk/node.conf.sample	2007-10-14 18:11:49 UTC (rev 401)
@@ -225,8 +225,12 @@
 #
 # "load", "round-robin", "random"
 #
+# For "load" you need a script called nxcheckload in PATH_BIN.
+# 
+# A sample script, which you can change to your needs it shipped with
+# FreeNX under the name nxcheckload.sample.
 
-#LOAD_BALANCE_ALGORITHM="load"
+#LOAD_BALANCE_ALGORITHM="random"
 
 # By setting ENABLE_LOADBALANCE="1" you can let users choose their
 # preferred host, while being forwarded to another server. Of course

Modified: freenx-server/trunk/nxloadconfig
===================================================================
--- freenx-server/trunk/nxloadconfig	2007-10-14 18:07:02 UTC (rev 400)
+++ freenx-server/trunk/nxloadconfig	2007-10-14 18:11:49 UTC (rev 401)
@@ -134,7 +134,7 @@
 NOMACHINE_FORWARD_PORT="22"
 
 LOAD_BALANCE_SERVERS=""
-LOAD_BALANCE_ALGORITHM="load"
+LOAD_BALANCE_ALGORITHM="random"
 ENABLE_LOAD_BALANCE_PREFERENCE="0"
 
 # Services directives



From fabianx at mail.berlios.de  Sun Oct 14 20:21:43 2007
From: fabianx at mail.berlios.de (fabianx at BerliOS)
Date: Sun, 14 Oct 2007 20:21:43 +0200
Subject: [Freenx-cvs] r402 - freenx-server/trunk
Message-ID: <200710141821.l9EILhld018750@sheep.berlios.de>

Author: fabianx
Date: 2007-10-14 20:21:43 +0200 (Sun, 14 Oct 2007)
New Revision: 402

Modified:
   freenx-server/trunk/ChangeLog
   freenx-server/trunk/node.conf.sample
   freenx-server/trunk/nxloadconfig
   freenx-server/trunk/nxnode
Log:
* Added ENABLE_CLIPBOARD="none|client|server|both" option
  to node.conf to disable, restrict or enable the clipboard
  synchronization.
  (fabianx at bat.berlios.de)



Modified: freenx-server/trunk/ChangeLog
===================================================================
--- freenx-server/trunk/ChangeLog	2007-10-14 18:11:49 UTC (rev 401)
+++ freenx-server/trunk/ChangeLog	2007-10-14 18:21:43 UTC (rev 402)
@@ -71,6 +71,10 @@
 	* Changed the default load balancing algorithm to "random"
 	  as the nxcheckload script might not be available.
 	  (fabianx at bat.berlios.de)
+	* Added ENABLE_CLIPBOARD="none|client|server|both" option
+	  to node.conf to disable, restrict or enable the clipboard
+	  synchronization.
+	  (fabianx at bat.berlios.de)
 
 07.07.2007 FreeNX 0.7.0 "Jornade SPL Edition VI+1"
 	* Fixed the printing support for CUPS 1.2.

Modified: freenx-server/trunk/node.conf.sample
===================================================================
--- freenx-server/trunk/node.conf.sample	2007-10-14 18:11:49 UTC (rev 401)
+++ freenx-server/trunk/node.conf.sample	2007-10-14 18:21:43 UTC (rev 402)
@@ -135,6 +135,22 @@
 #
 #ENABLE_DESKTOP_SHARING=1
 
+#
+# Enable or disable clipboard:
+#
+# client:  The content copied on the client can be pasted inside the
+#            NX session.
+#
+# server: The content copied inside the NX session can be pasted
+#             on the client.
+#
+# both:    The copy&paste operations are allowed both between the
+#             client and the NX session and vice-versa.
+#
+# none:   The copy&paste operations between the client and the NX
+#            session are never allowed.
+#
+#ENABLE_CLIPBOARD = "both"
 
 #########################################################################
 # Logging directives

Modified: freenx-server/trunk/nxloadconfig
===================================================================
--- freenx-server/trunk/nxloadconfig	2007-10-14 18:11:49 UTC (rev 401)
+++ freenx-server/trunk/nxloadconfig	2007-10-14 18:21:43 UTC (rev 402)
@@ -112,6 +112,8 @@
 ENABLE_MIRROR_VIA_VNC=1
 ENABLE_DESKTOP_SHARING=1
 
+ENABLE_CLIPBOARD="both"
+
 # Logging directives
 
 NX_LOG_LEVEL=0

Modified: freenx-server/trunk/nxnode
===================================================================
--- freenx-server/trunk/nxnode	2007-10-14 18:11:49 UTC (rev 401)
+++ freenx-server/trunk/nxnode	2007-10-14 18:21:43 UTC (rev 402)
@@ -1177,6 +1177,8 @@
 	[ -z "$media" ] && media=0
 	[ -z "$nodelay" ] && nodelay=1
 
+	clipboard="$ENABLE_CLIPBOARD"
+
 	CACHE="cache=$cache,"
 	[ -z "$cache" ] && CACHE=""
 	IMAGES="images=$images,"
@@ -1189,7 +1191,7 @@
 	umask 0077
 
 cat << EOF > "$USER_FAKE_HOME/.nx/C-$sess_id/options"
-${kbtype:+kbtype=$kbtype,}${kbload:+kbload=$kbload,}${keymap:+keymap=$keymap,}${resize:+resize=$resize,}${CACHE}${IMAGES}${PACK}link=$link,nodelay=$nodelay,type=$realtype,cleanup=0,${ACCEPT}cookie=$proxy_cookie,id=$sess_id,samba=$samba,media=$media${sync:+,sync=$sync}${cups:+,cups=$cups}${keybd:+,keybd=$keybd}${aux:+,aux=$aux}${http:+,http=$http}${rdpcolors:+,rdpcolors=$rdpcolors}${rdpcache:+,rdpcache=$rdpcache}${fullscreen:+,fullscreen=1}:$display
+${kbtype:+kbtype=$kbtype,}${kbload:+kbload=$kbload,}${keymap:+keymap=$keymap,}${resize:+resize=$resize,}${CACHE}${IMAGES}${PACK}link=$link,nodelay=$nodelay,type=$realtype,cleanup=0,${ACCEPT}cookie=$proxy_cookie,id=$sess_id,samba=$samba,media=$media${sync:+,sync=$sync}${cups:+,cups=$cups}${keybd:+,keybd=$keybd}${aux:+,aux=$aux}${http:+,http=$http}${rdpcolors:+,rdpcolors=$rdpcolors}${rdpcache:+,rdpcache=$rdpcache}${fullscreen:+,fullscreen=1}${clipboard:+,clipboard=$clipboard}:$display
 EOF
 	umask $OLD_UMASK
 #samba=$samba,



From fabianx at mail.berlios.de  Mon Oct 15 00:09:27 2007
From: fabianx at mail.berlios.de (fabianx at BerliOS)
Date: Mon, 15 Oct 2007 00:09:27 +0200
Subject: [Freenx-cvs] r403 - freenx-server/trunk
Message-ID: <200710142209.l9EM9RQ8032632@sheep.berlios.de>

Author: fabianx
Date: 2007-10-15 00:09:26 +0200 (Mon, 15 Oct 2007)
New Revision: 403

Modified:
   freenx-server/trunk/nxnode
Log:
Added keyboard parameter to options file.



Modified: freenx-server/trunk/nxnode
===================================================================
--- freenx-server/trunk/nxnode	2007-10-14 18:21:43 UTC (rev 402)
+++ freenx-server/trunk/nxnode	2007-10-14 22:09:26 UTC (rev 403)
@@ -1191,7 +1191,7 @@
 	umask 0077
 
 cat << EOF > "$USER_FAKE_HOME/.nx/C-$sess_id/options"
-${kbtype:+kbtype=$kbtype,}${kbload:+kbload=$kbload,}${keymap:+keymap=$keymap,}${resize:+resize=$resize,}${CACHE}${IMAGES}${PACK}link=$link,nodelay=$nodelay,type=$realtype,cleanup=0,${ACCEPT}cookie=$proxy_cookie,id=$sess_id,samba=$samba,media=$media${sync:+,sync=$sync}${cups:+,cups=$cups}${keybd:+,keybd=$keybd}${aux:+,aux=$aux}${http:+,http=$http}${rdpcolors:+,rdpcolors=$rdpcolors}${rdpcache:+,rdpcache=$rdpcache}${fullscreen:+,fullscreen=1}${clipboard:+,clipboard=$clipboard}:$display
+${keyboard:+keyboard=$keyboard,}${kbtype:+kbtype=$kbtype,}${kbload:+kbload=$kbload,}${keymap:+keymap=$keymap,}${resize:+resize=$resize,}${CACHE}${IMAGES}${PACK}link=$link,nodelay=$nodelay,type=$realtype,cleanup=0,${ACCEPT}cookie=$proxy_cookie,id=$sess_id,samba=$samba,media=$media${sync:+,sync=$sync}${cups:+,cups=$cups}${keybd:+,keybd=$keybd}${aux:+,aux=$aux}${http:+,http=$http}${rdpcolors:+,rdpcolors=$rdpcolors}${rdpcache:+,rdpcache=$rdpcache}${fullscreen:+,fullscreen=1}${clipboard:+,clipboard=$clipboard}:$display
 EOF
 	umask $OLD_UMASK
 #samba=$samba,



From fabianx at mail.berlios.de  Mon Oct 15 00:22:06 2007
From: fabianx at mail.berlios.de (fabianx at BerliOS)
Date: Mon, 15 Oct 2007 00:22:06 +0200
Subject: [Freenx-cvs] r404 - freenx-server/trunk
Message-ID: <200710142222.l9EMM6eS001065@sheep.berlios.de>

Author: fabianx
Date: 2007-10-15 00:22:06 +0200 (Mon, 15 Oct 2007)
New Revision: 404

Modified:
   freenx-server/trunk/ChangeLog
Log:
Preparing for release.



Modified: freenx-server/trunk/ChangeLog
===================================================================
--- freenx-server/trunk/ChangeLog	2007-10-14 22:09:26 UTC (rev 403)
+++ freenx-server/trunk/ChangeLog	2007-10-14 22:22:06 UTC (rev 404)
@@ -1,4 +1,4 @@
-xx.10.2007 FreeNX 0.7.1
+14.10.2007 FreeNX 0.7.1 "Hip Hop Edition"
 	* Fixed the issue that makes fonts look tiny and unreadable by default 
 	  with freenx and the commercial client. (diamond at google.com)
 	* Added invalidating of NSCD cache after group and user add.



From fabianx at mail.berlios.de  Mon Oct 15 01:34:46 2007
From: fabianx at mail.berlios.de (fabianx at BerliOS)
Date: Mon, 15 Oct 2007 01:34:46 +0200
Subject: [Freenx-cvs] r406 - freenx-website
Message-ID: <200710142334.l9ENYkXX022432@sheep.berlios.de>

Author: fabianx
Date: 2007-10-15 01:34:45 +0200 (Mon, 15 Oct 2007)
New Revision: 406

Modified:
   freenx-website/home.inc
Log:
Release of FreeNX 0.7.1.



Modified: freenx-website/home.inc
===================================================================
--- freenx-website/home.inc	2007-10-14 22:25:14 UTC (rev 405)
+++ freenx-website/home.inc	2007-10-14 23:34:45 UTC (rev 406)
@@ -12,6 +12,93 @@
 	</h2>
 	<h3>
 		<a
+	href="http://mail.kde.org/pipermail/freenx-knx/2007-October/005959.html">FreeNX
+	0.7.1 Released</a> 
+        - Sunday, 14/10/07 - 
+	[<a title="Download"
+	href="http://prdownload.berlios.de/freenx/freenx-0.7.1.tar.gz">Download</a>]
+	</h3>
+	<pre>
+14.10.2007 FreeNX 0.7.1 "Hip Hop Edition"
+        * Fixed the issue that makes fonts look tiny and unreadable by default
+          with freenx and the commercial client. (diamond at google.com)
+        * Added invalidating of NSCD cache after group and user add.
+          (diamond at google.com)
+        * Added better wording with less misunderstanding to dialog of
+          nxclient for Suspend/Terminate/Close case. (diamond at google.com)
+        * Added 'dialog_interface=dialog' option since many installations may
+          not have Xdialog and since xmessage is very limiting. This new option
+          will work on any machine that has dialog and xterm.
+          (puterguy at bat.berlios.de)
+        * Fixed the APPLICATION_LIBRARY_PRELOAD to be just a warning and fixed
+          the default path. (fabianx at bat.berlios.de)
+        * Added drivers.cache.all that is reloaded just every 60 minutes.
+          (puterguy at bat.berlios.de)
+        * Fixed missing services stop that lead to redundant mounts and still
+          running cupsd processes.
+          (puterguy at bat.berlios.de)
+        * Added support for mount.cifs additionally to the deprecated
+          smbmount. (fabianx at bat.berlios.de, puterguy at bat.berlios.de)
+        * Added "host" output to --list to see which user is connected to
+          which server in case of loadbalancing.
+          (fabianx at bat.berlios.de, Bastian Kames <kames at ibg-monforts.de>)
+        * Fixed nxclient -printer to not use commercial client, because its too
+          slow in case of huge databases like foomatic. (fabianx at bat.berlios.de)
+        * Removed bad -noautokill option from the nxclient dialog spawning.
+          (wayneb at bat.berlios.de)
+        * Added basic support for mirrored sessions.
+          * The functionality can be used by connecting to VNC session
+            and choosing to "resume" such a session.
+          * New configuration key: ENABLE_MIRROR_VIA_VNC=1
+          * New configuration key: ENABLE_DESKTOP_SHARING=1
+          (fabianx at bat.berlios.de)
+        * Fixed some portability issues.
+          * Fixed nxloadconfig in case that COMMAND_X is not only one word,
+            like "openssl md5".
+          * Added usage of "openssl md5" instead of "md5sum" by default.
+          * Changed perl to COMMAND_PERL.
+          * Removed rev and replaced the code with efficient awk code.
+          * Added an outcommented way to also use "POSIX find" for history
+            cleaning.
+          (Peter O'Gorman <peter at pogma.com>)
+        * Fix ownership of $SSH_AUTHORIZED_KEYS in nxkeygen, just in case
+          it is run without nxsetup.
+          (fabianx at bat.berlios.de, thx to sambiase on #nx)
+        * Fixed diverse occurences of $sess_id in nxnode, when hostname
+          contains whitespace.
+          (fabianx at bat.berlios.de)
+        * Fixed setting up KDE_PRINTRC altogether if ENABLE_KDE_CUPS is not 1,
+          and handles errors better when it is but kde-config is not available
+          or fails.
+          (scop at bat.berlios.de)
+        * Changed unix:$display -> :$display to enable FreeNX usage with newer
+          xlib in C (used for example by Novell).
+          (fabianx at bat.berlios.de)
+        * Enabled 3.0.0 backend with same usage pattern as 2.[0|1].0 backend.
+          (Shawn Starr <spstarr at kde.org>)
+        * Bumped version number to 2.1.0-71 to let things like File-sharing
+          port and auxiliary channels work.
+          (fabianx at bat.berlios.de)
+        * Added parsing of aux parameter. This should remove all keyboard
+          related problems with nxdesktop with 2.[01].0 backend.
+          (fabianx at bat.berlios.de)
+        * Renamed nxclient to nxdialog and setup the necessary environment
+          variable for nxagent to find it.
+          (fabianx at bat.berlios.de, Thanks to NoMachine for giving this hint)
+        * Added experimental support for usage of external rdesktop and
+          vncviewer programs.
+          This is for example needed for 3.0.0 backend.
+          (fabianx at bat.berlios.de)
+        * Changed the default load balancing algorithm to "random"
+          as the nxcheckload script might not be available.
+          (fabianx at bat.berlios.de)
+        * Added ENABLE_CLIPBOARD="none|client|server|both" option
+          to node.conf to disable, restrict or enable the clipboard
+          synchronization.
+          (fabianx at bat.berlios.de)		
+	</pre>
+	<h3>
+		<a
 	href="http://mail.kde.org/pipermail/freenx-knx/2007-July/005473.html">FreeNX
 	0.7.0 Released</a> 
         - Saturday, 07/07/07 - 



From sebjames at mail.berlios.de  Tue Oct 16 23:23:16 2007
From: sebjames at mail.berlios.de (sebjames at BerliOS)
Date: Tue, 16 Oct 2007 23:23:16 +0200
Subject: [Freenx-cvs] r407 - nxlaunch
Message-ID: <200710162123.l9GLNGJQ017238@sheep.berlios.de>

Author: sebjames
Date: 2007-10-16 23:23:16 +0200 (Tue, 16 Oct 2007)
New Revision: 407

Modified:
   nxlaunch/Makefile.am
Log:
Fixed lib/src subdirectories so that they're compiled in the right 
order.


Modified: nxlaunch/Makefile.am
===================================================================
--- nxlaunch/Makefile.am	2007-10-14 23:34:45 UTC (rev 406)
+++ nxlaunch/Makefile.am	2007-10-16 21:23:16 UTC (rev 407)
@@ -1,10 +1,10 @@
 
 AUTOMAKE_OPTIONS = check-news dist-bzip2
 
-SUBDIRS = src lib
+SUBDIRS = lib src
 
 CLEANFILES = *~
 
 MAINTAINERCLEANFILES = aclocal.m4 nxlaunch-*.tar.gz nxlaunch-*.tar.bz2 nxlaunch-*.diff
 
-INCLUDES = -I./lib
\ No newline at end of file
+INCLUDES = -I./lib



From sebjames at mail.berlios.de  Tue Oct 16 23:26:15 2007
From: sebjames at mail.berlios.de (sebjames at BerliOS)
Date: Tue, 16 Oct 2007 23:26:15 +0200
Subject: [Freenx-cvs] r408 - in nxcl: lib nxcl
Message-ID: <200710162126.l9GLQFlL017423@sheep.berlios.de>

Author: sebjames
Date: 2007-10-16 23:26:15 +0200 (Tue, 16 Oct 2007)
New Revision: 408

Modified:
   nxcl/lib/notQt.cpp
   nxcl/nxcl/nxcl.cpp
Log:
Improved some dbus error handling in nxcl.cpp.
Small fix in notQt.cpp to call the correct exit function.


Modified: nxcl/lib/notQt.cpp
===================================================================
--- nxcl/lib/notQt.cpp	2007-10-16 21:23:16 UTC (rev 407)
+++ nxcl/lib/notQt.cpp	2007-10-16 21:26:15 UTC (rev 408)
@@ -138,7 +138,7 @@
 		close (childErrToParent[WRITING_END]);
 		
 		// Child should exit now.
-		exit(-1);
+		_exit(-1);
 
 	default:
 		// This is the PARENT process

Modified: nxcl/nxcl/nxcl.cpp
===================================================================
--- nxcl/nxcl/nxcl.cpp	2007-10-16 21:23:16 UTC (rev 407)
+++ nxcl/nxcl/nxcl.cpp	2007-10-16 21:26:15 UTC (rev 408)
@@ -229,7 +229,6 @@
 {
 	DBusMessage * message;
 	DBusMessageIter args;
-	DBusError error;
 	char * parameter = NULL;
 	bool settings_transferred = false;
 	stringstream ss;
@@ -240,8 +239,12 @@
 	// loop listening for signals being emitted
 	while (settings_transferred == false) {
 
-		if (dbus_error_is_set(&error)) { 
-			this->callbacks.error ("receiveSettings(): Got a dbus error");
+		if (dbus_error_is_set(&this->error)) {
+			stringstream errmsg;
+			errmsg << "receiveSettings(): Got a dbus error '"
+			       << this->error.name << "': " << this->error.message;
+			this->callbacks.error (errmsg.str());
+			dbus_error_free (&this->error);
 		}
 
 		// non blocking read of the next available message



From sebjames at mail.berlios.de  Wed Oct 17 10:34:21 2007
From: sebjames at mail.berlios.de (sebjames at BerliOS)
Date: Wed, 17 Oct 2007 10:34:21 +0200
Subject: [Freenx-cvs] r409 - nxlaunch/lib
Message-ID: <200710170834.l9H8YLIu019798@sheep.berlios.de>

Author: sebjames
Date: 2007-10-17 10:34:20 +0200 (Wed, 17 Oct 2007)
New Revision: 409

Modified:
   nxlaunch/lib/callbacks_nx.c
Log:
Thanks to Austin Che for feedback, I realised that in all my calls to 
gtk_combo_box_get_active_iter() should check its return value and if it 
fails, manually allocate and populate the string I was about to use.


Modified: nxlaunch/lib/callbacks_nx.c
===================================================================
--- nxlaunch/lib/callbacks_nx.c	2007-10-16 21:26:15 UTC (rev 408)
+++ nxlaunch/lib/callbacks_nx.c	2007-10-17 08:34:20 UTC (rev 409)
@@ -1541,14 +1541,17 @@
 	GtkTextBuffer * buffer;
 	GtkTextIter start, end;
 	GtkTreeIter iter;
-	GtkListStore * nxList;
+	GtkListStore * nxList = NULL;
 	gchar * str;
+	gboolean strAllocatedMan = FALSE; // True if str has been allocated manually
+	gboolean strAllocatedGtk = FALSE; // True if str has been allocated within gtk fn
 
 	/* Used to get the connection capacity hscale value */
 	gdouble speed;
 	guint speed_as_int;
 
-	str = g_malloc0 (512 * sizeof (gchar));
+	// Either gtk_tree_model_get will malloc str or we manually malloc it
+	//str = g_malloc0 (512 * sizeof (gchar));
 
 	/*
 	 * The Network Tab.
@@ -1639,9 +1642,20 @@
 	widget = glade_xml_get_widget (xml_glob, "combobox_nx_desktop_session");
 	nxList = GTK_LIST_STORE (gtk_combo_box_get_model (GTK_COMBO_BOX (widget)));
 	printerr ("Getting active iter for desktop session list..\n");
-	gtk_combo_box_get_active_iter (GTK_COMBO_BOX (widget), &iter);
-	gtk_tree_model_get (GTK_TREE_MODEL (nxList), &iter, PROGRAM, &str, -1);
 
+	if (gtk_combo_box_get_active_iter (GTK_COMBO_BOX (widget), &iter)) {		
+		gtk_tree_model_get (GTK_TREE_MODEL (nxList), &iter, PROGRAM, &str, -1);
+		strAllocatedGtk = TRUE;
+	} else {
+		if (strAllocatedMan == FALSE || strAllocatedGtk == TRUE) {
+			str = g_realloc ((gpointer)str, NX_FIELDLEN * sizeof (gchar));
+			strAllocatedMan = TRUE;
+			strAllocatedGtk = FALSE;
+		}
+		/* If we can't get the string from the tree_model, then set it manually to a default */
+		snprintf (str, 6, "%s", "GNOME");
+	}
+
 	if (strstr (str, _("KDE"))) {
 		strncpy (nx_conn->Desktop, "kde", NX_FIELDLEN);
 		strncpy (nx_conn->Session, "unix", NX_FIELDLEN);
@@ -1725,8 +1739,18 @@
 	widget = glade_xml_get_widget (xml_glob, "combobox_nx_xdm_mode");
 	nxList = GTK_LIST_STORE (gtk_combo_box_get_model (GTK_COMBO_BOX (widget)));
 	printerr ("Getting active iter for xdm mode..\n");
-	gtk_combo_box_get_active_iter (GTK_COMBO_BOX (widget), &iter);
-	gtk_tree_model_get (GTK_TREE_MODEL (nxList), &iter, PROGRAM, &str, -1);
+	if (gtk_combo_box_get_active_iter (GTK_COMBO_BOX (widget), &iter)) {		
+		gtk_tree_model_get (GTK_TREE_MODEL (nxList), &iter, PROGRAM, &str, -1);
+		strAllocatedGtk = TRUE;
+	} else {
+		if (strAllocatedMan == FALSE || strAllocatedGtk == TRUE) {
+			str = g_realloc ((gpointer)str, NX_FIELDLEN * sizeof (gchar));
+			strAllocatedMan = TRUE;
+			strAllocatedGtk = FALSE;
+		}
+		/* If we can't get the string from the tree_model, then set it manually to a default */
+		snprintf (str, NX_FIELDLEN, "%s", _("Let NX server decide"));
+	}
 
 	if (strstr (str, _("Let NX server decide"))) {
 		strncpy (nx_conn->XdmMode, "server decide", NX_FIELDLEN);
@@ -1753,8 +1777,18 @@
 	widget = glade_xml_get_widget (xml_glob, "combobox_nx_window_size");
 	nxList = GTK_LIST_STORE (gtk_combo_box_get_model (GTK_COMBO_BOX (widget)));
 	printerr ("Getting active iter for nx window size..\n");
-	gtk_combo_box_get_active_iter (GTK_COMBO_BOX (widget), &iter);
-	gtk_tree_model_get (GTK_TREE_MODEL (nxList), &iter, PROGRAM, &str, -1);
+	if (gtk_combo_box_get_active_iter (GTK_COMBO_BOX (widget), &iter)) {		
+		gtk_tree_model_get (GTK_TREE_MODEL (nxList), &iter, PROGRAM, &str, -1);
+		strAllocatedGtk = TRUE;
+	} else {
+		if (strAllocatedMan == FALSE || strAllocatedGtk == TRUE) {
+			str = g_realloc ((gpointer)str, NX_FIELDLEN * sizeof (gchar));
+			strAllocatedMan = TRUE;
+			strAllocatedGtk = FALSE;
+		}
+		/* If we can't get the string from the tree_model, then set it manually to a default */
+		snprintf (str, NX_FIELDLEN, "%s", _("Full Screen"));
+	}
 
 	if (strstr (str, "640 x 480")) {
 		nx_conn->FullScreen = FALSE;
@@ -1805,8 +1839,18 @@
 	widget = glade_xml_get_widget (xml_glob, "combobox_nx_image_encoding");
 	nxList = GTK_LIST_STORE (gtk_combo_box_get_model (GTK_COMBO_BOX (widget)));
 	printerr ("Getting active iter for image encoding..\n");
-	gtk_combo_box_get_active_iter (GTK_COMBO_BOX (widget), &iter);
-	gtk_tree_model_get (GTK_TREE_MODEL (nxList), &iter, PROGRAM, &str, -1);
+	if (gtk_combo_box_get_active_iter (GTK_COMBO_BOX (widget), &iter)) {		
+		gtk_tree_model_get (GTK_TREE_MODEL (nxList), &iter, PROGRAM, &str, -1);
+		strAllocatedGtk = TRUE;
+	} else {
+		if (strAllocatedMan == FALSE || strAllocatedGtk == TRUE) {
+			str = g_realloc ((gpointer)str, NX_FIELDLEN * sizeof (gchar));
+			strAllocatedMan = TRUE;
+			strAllocatedGtk = FALSE;
+		}
+		/* If we can't get the string from the tree_model, then set it manually to a default */
+		snprintf (str, NX_FIELDLEN, "%s", _("Default"));
+	}
 
 	if (strstr (str, _("Default"))) {
 		nx_conn->ImageEncoding = 0;
@@ -1823,7 +1867,12 @@
 	widget = glade_xml_get_widget (xml_glob, "spinbutton_nx_jpeg_quality");
 	nx_conn->JPEGQuality = gtk_spin_button_get_value_as_int (GTK_SPIN_BUTTON (widget));
 
-	g_free (str);
+	/*
+	 * Free up str here before using it below
+	 */
+	if (strAllocatedMan == TRUE || strAllocatedGtk == TRUE) {
+		g_free (str);
+	}
 
 	/*
 	 * The SSH Public Key
@@ -2118,8 +2167,12 @@
 	
 	widget = glade_xml_get_widget (xml_glob, "combobox_nx_desktop_session");
 	nxList = GTK_LIST_STORE (gtk_combo_box_get_model (GTK_COMBO_BOX (widget)));
-	gtk_combo_box_get_active_iter (GTK_COMBO_BOX (widget), &iter);
-	gtk_tree_model_get (GTK_TREE_MODEL (nxList), &iter, PROGRAM, &str, -1);
+	if (gtk_combo_box_get_active_iter (GTK_COMBO_BOX (widget), &iter)) {
+		gtk_tree_model_get (GTK_TREE_MODEL (nxList), &iter, PROGRAM, &str, -1);
+	} else {
+		str = g_malloc (NX_FIELDLEN * sizeof (gchar));
+		snprintf (str, NX_FIELDLEN, "%s", _("GNOME"));
+	}
 
 	if (strstr (str, _("KDE"))) {
 		grey_all_xdm_settings ();
@@ -2145,6 +2198,8 @@
 		grey_all_xdm_settings ();
 	}
 
+	g_free (str);
+
 	return rtn;
 }
 
@@ -2215,12 +2270,16 @@
 	GtkTreeIter iter;
 	GtkListStore * nxList;
 	gchar * str;
+	
+	//str = g_malloc0 (512 * sizeof (gchar));
 
-	str = g_malloc0 (512 * sizeof (gchar));
-
 	nxList = GTK_LIST_STORE (gtk_combo_box_get_model (box));
-	gtk_combo_box_get_active_iter (box, &iter);
-	gtk_tree_model_get (GTK_TREE_MODEL (nxList), &iter, PROGRAM, &str, -1);
+	if (gtk_combo_box_get_active_iter (box, &iter)) {
+		gtk_tree_model_get (GTK_TREE_MODEL (nxList), &iter, PROGRAM, &str, -1);
+	} else {
+		str = g_malloc0 (NX_FIELDLEN * sizeof (gchar));
+		snprintf (str, NX_FIELDLEN, "%s", _("Full Screen"));
+	}
 
 	if (strstr (str, "640 x 480")) {
 		widget =  glade_xml_get_widget (xml_glob, "spinbutton_nx_width");
@@ -2283,11 +2342,13 @@
 	GtkListStore * nxList;
 	gchar * str;
 
-	str = g_malloc0 (512 * sizeof (gchar));
-
 	nxList = GTK_LIST_STORE (gtk_combo_box_get_model (box));
-	gtk_combo_box_get_active_iter (box, &iter);
-	gtk_tree_model_get (GTK_TREE_MODEL (nxList), &iter, PROGRAM, &str, -1);
+	if (gtk_combo_box_get_active_iter (box, &iter)) {
+		gtk_tree_model_get (GTK_TREE_MODEL (nxList), &iter, PROGRAM, &str, -1);
+	} else {
+		str = g_malloc0 (8 * sizeof (gchar));
+		snprintf (str, 5, "%s", "null");
+	}
 
 	if (strstr (str, "JPEG")) {
 		widget =  glade_xml_get_widget (xml_glob, "spinbutton_nx_jpeg_quality");
@@ -2302,6 +2363,8 @@
 		gtk_widget_set_sensitive (widget, FALSE);
 
 	}
+	
+	g_free (str);
 }
 
 



From sebjames at mail.berlios.de  Wed Oct 17 11:09:47 2007
From: sebjames at mail.berlios.de (sebjames at BerliOS)
Date: Wed, 17 Oct 2007 11:09:47 +0200
Subject: [Freenx-cvs] r410 - nxlaunch/src
Message-ID: <200710170909.l9H99lOE021988@sheep.berlios.de>

Author: sebjames
Date: 2007-10-17 11:09:47 +0200 (Wed, 17 Oct 2007)
New Revision: 410

Modified:
   nxlaunch/src/nxlaunch.c
Log:
Added an important zeroing function for config creation. This code 
is still full of bugs though.


Modified: nxlaunch/src/nxlaunch.c
===================================================================
--- nxlaunch/src/nxlaunch.c	2007-10-17 08:34:20 UTC (rev 409)
+++ nxlaunch/src/nxlaunch.c	2007-10-17 09:09:47 UTC (rev 410)
@@ -191,6 +191,9 @@
 	widget = glade_xml_get_widget (xml_glob, "conn_new_nx");
 	gtk_widget_show_all (widget);
 
+	/* Initialise the new connection popup */
+	zero_new_nx_popup();
+
 	return;
 }
 



From fabianx at mail.berlios.de  Sun Oct 21 23:34:51 2007
From: fabianx at mail.berlios.de (fabianx at BerliOS)
Date: Sun, 21 Oct 2007 23:34:51 +0200
Subject: [Freenx-cvs] r411 - freenx-server/trunk
Message-ID: <200710212134.l9LLYpY8017579@sheep.berlios.de>

Author: fabianx
Date: 2007-10-21 23:34:51 +0200 (Sun, 21 Oct 2007)
New Revision: 411

Modified:
   freenx-server/trunk/ChangeLog
   freenx-server/trunk/nxloadconfig
   freenx-server/trunk/nxserver
Log:
* Fixed the display of local sessions to display only
  when session type is VNC.
  (fabianx at bat.berlios.de)



Modified: freenx-server/trunk/ChangeLog
===================================================================
--- freenx-server/trunk/ChangeLog	2007-10-17 09:09:47 UTC (rev 410)
+++ freenx-server/trunk/ChangeLog	2007-10-21 21:34:51 UTC (rev 411)
@@ -1,3 +1,9 @@
+xx.01.2008 FreeNX 0.7.2
+	* Opened the 0.7.2 development.
+	* Fixed the display of local sessions to display only 
+	  when session type is VNC.
+	  (fabianx at bat.berlios.de)
+
 14.10.2007 FreeNX 0.7.1 "Hip Hop Edition"
 	* Fixed the issue that makes fonts look tiny and unreadable by default 
 	  with freenx and the commercial client. (diamond at google.com)

Modified: freenx-server/trunk/nxloadconfig
===================================================================
--- freenx-server/trunk/nxloadconfig	2007-10-17 09:09:47 UTC (rev 410)
+++ freenx-server/trunk/nxloadconfig	2007-10-21 21:34:51 UTC (rev 411)
@@ -52,7 +52,7 @@
 # DO NOT TOUCH unless you REALLY know what you are doing
 #########################################################################
 
-NX_VERSION=2.1.0-71
+NX_VERSION=2.1.0-72-SVN
 NX_LICENSE="OS (GPL)"
 
 # Where can different nx components be found

Modified: freenx-server/trunk/nxserver
===================================================================
--- freenx-server/trunk/nxserver	2007-10-17 09:09:47 UTC (rev 410)
+++ freenx-server/trunk/nxserver	2007-10-21 21:34:51 UTC (rev 411)
@@ -267,7 +267,7 @@
 		egrep -q "^userName=$1$" $i && let SESSION_COUNT_USER=$SESSION_COUNT_USER+1
 	done
 	
-	if [ "$ENABLE_DESKTOP_SHARING" = "1" ]
+	if [ "$4" = "vnc" -a "$ENABLE_DESKTOP_SHARING" = "1" ]
 	then
 		export DESKTOP_SHARING_IDS=""
 		for i in $(LC_ALL=C netstat -ln --protocol=unix | egrep 'X11-unix/X[0-9]$' | sed 's/.*X\(.*\)/\1/g')



From fabianx at mail.berlios.de  Mon Oct 22 13:34:45 2007
From: fabianx at mail.berlios.de (fabianx at BerliOS)
Date: Mon, 22 Oct 2007 13:34:45 +0200
Subject: [Freenx-cvs] r412 - freenx-server/trunk
Message-ID: <200710221134.l9MBYjTl028535@sheep.berlios.de>

Author: fabianx
Date: 2007-10-22 13:34:45 +0200 (Mon, 22 Oct 2007)
New Revision: 412

Modified:
   freenx-server/trunk/ChangeLog
   freenx-server/trunk/nxdialog
Log:
* Fixed the issue that commercial NXClient was called with 0 parameters
  and such the "Connection Wizard" came up.
  (fabianx at bat.berlios.de)



Modified: freenx-server/trunk/ChangeLog
===================================================================
--- freenx-server/trunk/ChangeLog	2007-10-21 21:34:51 UTC (rev 411)
+++ freenx-server/trunk/ChangeLog	2007-10-22 11:34:45 UTC (rev 412)
@@ -3,6 +3,9 @@
 	* Fixed the display of local sessions to display only 
 	  when session type is VNC.
 	  (fabianx at bat.berlios.de)
+	* Fixed the issue that commercial NXClient was called with 0 parameters
+	  and such the "Connection Wizard" came up.
+	  (fabianx at bat.berlios.de)
 
 14.10.2007 FreeNX 0.7.1 "Hip Hop Edition"
 	* Fixed the issue that makes fonts look tiny and unreadable by default 

Modified: freenx-server/trunk/nxdialog
===================================================================
--- freenx-server/trunk/nxdialog	2007-10-21 21:34:51 UTC (rev 411)
+++ freenx-server/trunk/nxdialog	2007-10-22 11:34:45 UTC (rev 412)
@@ -71,10 +71,13 @@
 # client does not like large databases like used when ENABLE_FOOMATIC=1.
 #
 # This seems to be because the used sorting algorithm scales in O(n^2).
+#
+# This is now fixed in NXClient 3.0.0, but still people sometimes use
+# older clients.
 
 NXCLIENT="/usr/NX/bin/nxclient"
 [ -x "$NXCLIENT" -a "$DIALOG_TYPE" != "printer" -a "$(file -bi $NXCLIENT)" != 'application/x-shellscript' ] \
-	&& exec ${NXCLIENT} "$@"
+	&& exec ${NXCLIENT} $INPUTS
 
 # FIXME: This should be COMMAND_XDIALOG, ...
 if [ -x /usr/bin/Xdialog ] 



From fabianx at mail.berlios.de  Tue Oct 30 16:17:15 2007
From: fabianx at mail.berlios.de (fabianx at BerliOS)
Date: Tue, 30 Oct 2007 16:17:15 +0100
Subject: [Freenx-cvs] r413 - freenx-server/trunk
Message-ID: <200710301517.l9UFHEmK024443@sheep.berlios.de>

Author: fabianx
Date: 2007-10-30 16:17:14 +0100 (Tue, 30 Oct 2007)
New Revision: 413

Modified:
   freenx-server/trunk/nxdialog
Log:
Really fixed the nxclient dialog does not popup issue.



Modified: freenx-server/trunk/nxdialog
===================================================================
--- freenx-server/trunk/nxdialog	2007-10-22 11:34:45 UTC (rev 412)
+++ freenx-server/trunk/nxdialog	2007-10-30 15:17:14 UTC (rev 413)
@@ -26,6 +26,7 @@
 	done
 }
 
+PARAMS=( "$@" )
 INPUTS=$(requote "$@")	#JJK: Save input parameter line...
 
 TEMP=`getopt -a -o d: --long local,noautokill,dialog:,caption:,message:,display:,printer:,parent: -n $(basename $0) -- "$@"`
@@ -77,7 +78,7 @@
 
 NXCLIENT="/usr/NX/bin/nxclient"
 [ -x "$NXCLIENT" -a "$DIALOG_TYPE" != "printer" -a "$(file -bi $NXCLIENT)" != 'application/x-shellscript' ] \
-	&& exec ${NXCLIENT} $INPUTS
+	&& exec ${NXCLIENT} "${PARAMS[@]}"
 
 # FIXME: This should be COMMAND_XDIALOG, ...
 if [ -x /usr/bin/Xdialog ] 



From fabianx at mail.berlios.de  Mon Oct 15 00:25:58 2007
From: fabianx at mail.berlios.de (fabianx at BerliOS)
Date: Sun, 14 Oct 2007 22:25:58 -0000
Subject: [Freenx-cvs] r405 - in freenx-server/tags: . FreeNX-0.7.1
	FreeNX-0.7.1/nxserver-helper
Message-ID: <200710142225.l9EMPFEm001476@sheep.berlios.de>

Author: fabianx
Date: 2007-10-15 00:25:14 +0200 (Mon, 15 Oct 2007)
New Revision: 405

Added:
   freenx-server/tags/FreeNX-0.7.1/
   freenx-server/tags/FreeNX-0.7.1/ChangeLog
   freenx-server/tags/FreeNX-0.7.1/node.conf.sample
   freenx-server/tags/FreeNX-0.7.1/nxdesktop_helper
   freenx-server/tags/FreeNX-0.7.1/nxdialog
   freenx-server/tags/FreeNX-0.7.1/nxkeygen
   freenx-server/tags/FreeNX-0.7.1/nxloadconfig
   freenx-server/tags/FreeNX-0.7.1/nxnode
   freenx-server/tags/FreeNX-0.7.1/nxprint
   freenx-server/tags/FreeNX-0.7.1/nxserver
   freenx-server/tags/FreeNX-0.7.1/nxserver-helper/nxserver-helper.c
   freenx-server/tags/FreeNX-0.7.1/nxsetup
   freenx-server/tags/FreeNX-0.7.1/nxviewer_helper
Removed:
   freenx-server/tags/FreeNX-0.7.1/ChangeLog
   freenx-server/tags/FreeNX-0.7.1/node.conf.sample
   freenx-server/tags/FreeNX-0.7.1/nxclient
   freenx-server/tags/FreeNX-0.7.1/nxkeygen
   freenx-server/tags/FreeNX-0.7.1/nxloadconfig
   freenx-server/tags/FreeNX-0.7.1/nxnode
   freenx-server/tags/FreeNX-0.7.1/nxprint
   freenx-server/tags/FreeNX-0.7.1/nxserver
   freenx-server/tags/FreeNX-0.7.1/nxserver-helper/nxserver-helper.c
   freenx-server/tags/FreeNX-0.7.1/nxsetup
Log:
Release of FreeNX-0.7.1 "Hip Hop Edition".



Copied: freenx-server/tags/FreeNX-0.7.1 (from rev 334, freenx-server/trunk)

Deleted: freenx-server/tags/FreeNX-0.7.1/ChangeLog
===================================================================
--- freenx-server/trunk/ChangeLog	2007-05-29 15:27:07 UTC (rev 334)
+++ freenx-server/tags/FreeNX-0.7.1/ChangeLog	2007-10-14 22:25:14 UTC (rev 405)
@@ -1,366 +0,0 @@
-xx.xx.2007 FreeNX 0.6.1
-	* Fixed the printing support for CUPS 1.2.
-	  Older versions of CUPS are no longer supported.
-	  * Note: You must do as root:
-
-	          cp /usr/lib/cups/backend/ipp /usr/lib/cups/backend/nxipp
-		  chmod 755 /usr/lib/cups/backend/nxipp
-
-		  Or alternatively re-run nxsetup.
-
-	* Added foomatic support.
-	  * Note: You might need to do: ln -s /usr/bin/foomatic-ppdfile
-	          /usr/lib/cups/driver/
-	* Added setting of CUPS_SERVER environment var.
-	* Added automatic downloading of PPDs, if the client supports it.
-	* Added configuration vars to tweak the new behaviour.
-	* Added cups seamless support with no "use this driver?" dialogs at all.
-	  * Note: You need nxcupsd-wrapper on the client side for CUPS 1.2
-	          clients.
-
-	          Get it from nxutils repository.
-
-	* Fixed Support for "Running" sessions - again.
-	* Made the NXAgent exited with exit code 1 message more verbose.
-	* Added support for nxipp to nxnode and nxsetup.
-	* Added nxcups-gethost script for automatic usage in KDE.
-	* Fixed RDP/VNC sessions. No application should be started for that type. 
-	  (Patch by Bernard Cafarelli <voyageur at operamail.com>)
-	* Added backingstore fix for older clients from Gentoo.
-	  (http://bugs.gentoo.org/show_bug.cgi?id=149298)
-	* Fixed VNC sessions.
-	* Fixed fullscreen sessions.
-	  (Patch by Gentoo Bugtracker)
-	* Fixed --broadcast.
-	* Added "passwd -u nx" to nxsetup to fix slackware.
-	* Fixed respecting of enconding settings in case of rootless mode.
-	* Fixed smb mounting in case nxclient sends the wrong port. 
-	  (Patch by Jan Lockenvitz <jan.lockenvitz.ext at siemens.com>)
-	* Fixed loadbalancing - was still using an undocumented variable.
-
-23.01.2007 FreeNX 0.6.0 "Juliana birthday edition"
-	* Opened the 0.6.0 branch.
-	* Added nxnode slave mode.
-	* General code cleanup.
-		* Huge cleanup of nxnode.
-	* Removed "no-x11-forwarding" from keys to allow client to use the
-	  faster interactive sessions.
-	* Fixed nxsetup automatic testing of sessions and cleared up
-	  explanations.
-	* Added support for NX 2.0.0 style nxclient dialogs.
-	* Support for NX 2.0.0 backend in nxloadconfig.
-	* Fixed cups printing (added username and password).
-	* Fixed one more stray tail process.
-	* Added example script for "load" based loadbalancing.
-	* Fixed spaces in parameters for NX Client 2.0.0.
-	  (ssycplkbocve at spammotel.com)
-	* Added version 2.1.0 support.
-	* Fixed LD_LIBRARY_PRELOAD default path in nxloadconfig.
-	* Fixed nxclient to work with 2.1.0 backend.
-	* Added autodetection of backend.
-
-01.07.2006 FreeNX 0.5.0 "UKUUG 2006 Edition"
-	* Opened the 0.5.0 branch.
-	* Added load balancing.
-	* Completely removed support for 1.4.0 backend.
-	* Rootless mode is now the default.
-	* Reworked nxnode / suspend on connection failure should work now.
-	* Added support for "Running" sessions.
-	* Fixed --send command. (Emmanuel Blindauer <freenx at mooby.net>)
-	* Fixed resume with nxclient >=1.5.0-106 for Windows.
-	* Fixed rootless sessions with Windows nxclient.
-	* Fixed keyboard issues by enabling the keybd channel.
-	* Fixed one more stray tail process and being able to
-	  cleanup after a hopelessly failed reconnection. (i.e. agent died)
-	* Fixed detection of xauth / netcat. Added option to disable extra
-	  checks.
-	* Fixed --terminate / --suspend when hostname has a '-' in it.
-	  (Emmanuel Blindauer <freenx at mooby.net>)
-	* ESD_NO_SPAWN is always set when ESPEAKER is set.
-	  ("Felipe Alfaro Solana" <felipe.alfaro at gmail.com>)
-	* Added perl replacement for 'rev' function on Sun OS 5.10.
-	* Fixed NODE_AUTOSTART to be unable to block sessions.
-	* Fixed stale sessions introduced by the new session handling model.
-	* Added usage of TCP NODELAY option.
-	* Fixed loadbalancing IP issues.
-	* Added --force-terminate to remove session info.
-	  Fixed issue with suspend/terminate commands.
-	* Added correct errorcode 596 instead of 504.
-	* Implemented "round-robin" and "load" loadbalancing algorithms.
-	  Cleaned up node.conf keys.
-	* Fixed help for --restart.
-	* Fixed session_running function, which fixes all remaining stale
-	  session problems.
-	* Removed termination of nxagent in case of rootless mode.
-	  (Fixes kontact without --nofork)
-	* Last minute fixes for new functions using rev.
-	* Added experimental last minute support for NX 2.0.0 backend.
-	  (set ENABLE_2_0_0_BACKEND=1)
-
-XX.XX.2006 FreeNX 0.4.5 "aKademy Edition"
-	* Made nxsetup more user-friendly and hopefully finally failsafe.
-	* Added --agent to nxnode/nxserver to allow easier debugging.
-	* Added addgroup/groupadd to nxsetup
-	* Added --ignore-errors support on nxsetup/nxloadconfig
-	* Added check for expect.
-
-06.08.2005 FreeNX 0.4.4 "UKUUG Enterprise Edition"
-	* Added ENABLE_1_5_0_BACKEND configuration directive:
-		* Fixed fullscreen support in nxdesktop (still feels more like
-		  'Available Area', but with Ctrl-Alt-F you can get "real"
-		  fullscreen)
-	* Added COMMAND_MD5SUM directive
-	* Security: $USER_FAKE_HOME/.nx now gets 0700
-	* Fixed support for CUPS forwarding.
-	* Added secure re-transmitting to client.
-	* Removed grep from getent to not search through the whole database.
-	  (Suggestion by "Matthew S. Harris" <mharris at google.com>,
-	                 "Ed Warnicke"       <eaw at cisco.com>)
-	* Set sleeps to 60 instead of 10 seconds, removed one wrong trap.
-	  (Suggestion by "Sunil" <funtoos at yahoo.com>)
-	* Made automatic timeout configurable.
-	  (Patch by "Ed Warnicke" <eaw at cisco.com>)
-	* Made nxsetup more enterprise friendly. Added --localuser
-	  (RedHat only) and --gid. 
-	  (Based on a patch by "Ed Warnicke" <eaw at cisco.com>)
-	* Fixed resume of multiple sessions.	
-
-28.07.2005 FreeNX 0.4.3 "NoMachine 1.5.0 Edition"
-	* Fixed reconnection problems with !M 1.5.0 client.
-	* Fixed reconnection problems with !M 1.5.0 backend.
-	* Added evaluation of $NX_ETC_DIR/node.conf.d/* config files.
-	* Fixed a possible security problem. (The client was able
-	  to overwrite parameters set by the server)
-	* Added ENABLE_1_5_0_BACKEND configuration directive:
-		* Added support for fake cookie authentication with
-		  !M 1.5.0 client and 1.5.0 backend.
-		* Fixed nxagent termination problems with !M 1.5.0
-		  backend.
-		* Added RDP highcolor support for !M 1.5.0 client
-		  with !M 1.5.0 backend.
-	* Added secure logging - Passwords are no longer shown in log files.
-	* Security: Certain passwords for VNC/RDP could have been visible via 
-	  `ps aux`.
-	* Added experimental usermode authentication scheme.
-	  (Disabled by default)
-
-16.07.2005 FreeNX 0.4.2 "Solaris / Bugfix / Linux Infotag Pforzheim Edition"
-	* Removed forwarding support via "freenx.<user>", because it was
-	  buggy.
-	* Cleaned up lots of code.
-		* Fixed one case of a left over file.
-		* Removed one unnecessary usage of a temporary file.
-	* Added exit handlers in nxserver and nxnode for more stability on 
-	  reboot of system.
-	* Changed nxnode to be much more stable.
-		* Catched one additional "unclean termination of nxagent" 
-		  case, which lead to "zombie" sessions.
-	* Reworked reconnection support for more stability.
-		* Added displaying of reconnection failure in
-		  system log / client ssh log.
-	* Added even more possibilities to catch and report session startup 
-	  failures.
-	* Fixed PNG and JPEG-levels pack method.
-	* Added usage of netcat -z to check that the port is really not used by
-	  another agent.
-	* Added nxserver --cleanup, which terminates all running sessions.
-	  Useful after a power outage.
-	* Fixed nxclient invocation with non-standard installation path
-	* Added detection of SSH2_CLIENT variable (commercial ssh)
-	* Finally fixed problems with GNOME.
-	* FINALLY added Solaris Support Patch.
-
-24.06.2005 FreeNX 0.4.1 "LinuxTag Edition"
-	* Fixed a small security problem giving access to session database.
-	* Added support for 1.5.0 OSS components. (especially rootless mode)
-	* Fixed Filesharing over the Internet. (Thanks to rogierm at users.berlios.de)
-	* Fixed Resume on Windows with non-fullscreen sessions.
-	* Added suspend/resume support for 1.5.0 OSS components.
-	* Fixed display of suspended sessions in nxserver --list.
-
-04.05.2005 FreeNX 0.4.0 "SambaXP Edition"
-	* Opened the 0.4.0 branch.
-	* Added initial support for filesharing via samba.
-	* Improvements to be more node.conf compatible.
-	* Added COMMAND_NETCAT, COMMAND_SSH & COMMAND_SSH_KEYGEN directive
-	* Added support for 'nxloadconfig --check' to validate node.conf 
-	  settings
-	* Added initial support for sound (esd/artsd).
-	* Added optional support for utmp/wtmp/lastlog database.
-	* Removed support for OSS components prior version 1.4.0 in nxnode.
-	  Added -option option to nxagent/nxdesktop/nxviewer.
-	* Added forwarding to commercial server via destination port.
-	* Added more compatible getparam function
-	* Sets LD_PRELOAD for applications and LD_LIBRARY_PATH for 
-	  nxagent/nxproxy by default.
-		- SET_LD_LIBRARY_PATH replaces NX_NOMACHINE_WAY and is 
-		  enabled by default, as it is now safe to do so
-	* Implemented SSHD_CHECK_IP directive.
-	* Added the SESSION_HISTORY directive. Session history will by default 
-	  be kept for 30 days.
-	* Implemented DEFAULT_X_WM for unix-application virtual desktop mode.
-	* Implemented SESSION_LIMIT and SESSION_USER_LIMIT.
-	* Fixed nxviewer commandline for geometry and fullscreen-support
-	* Added NX_LOG_LEVEL instead of NX_LOGGING, allowing less verbose 
-	  logfile.
-	* Added SESSION_LOG_CLEAN for configurable removal of the temporary 
-	  session directory.
-	* Added "--ssh2" cmdline switch for commercial ssh2-server support 
-	  in nxsetup.
-	* Added ENABLE_FORCE_ENCRYPTION to enforce the usage of encryption on 
-	  the server.
-	* Added nxprint and added -printer to nxclient together with handling
-	  of drivers cache.
-	* Fixed a possible race-condition. (reported by Edward Warnicke
-	  <eaw at cisco.com>)
-	* Feature Request #847 (stderror of some applications to log-file)
-	* Feature Request #900 (Detect ssh/sshd in nxsetup)
-	* Added printing support via userspace CUPSd and Samba.
-
-20.03.2005 FreeNX 0.3.1 "Bugfix Edition"
-	* Fixed keyboard mapping problems.
-	* Fixed unix-custom mode; now allowing parameters to be passed.
-	* Fixed password prompt detection support in nxnode-login.
-	* Fixed locking to prevent usage of the same display.
-	* Fixed resume when agent is no longer there.
-	* Fixed error message shown to user, when session startup fails.
-	* Fixed handling of /tmp/.X*-lock files.
-	* Fixed handling of not closed sessions in "Terminating" status.
-	* Fixed resume of multiple suspended sessions.
-
-05.03.2005 FreeNX 0.3.0 "Chemnitzer LinuxTage Edition"
-	* Initial CVS checkin.
-	* Added unix-default as session type - by Kalev Lember 
-	  <kalev at smartlink.ee>
-	* Fixed nxclient loop - by "Neil Wilson" <neil at aldur.co.uk>.
-	* Several fixes by Thorsten Sandfuchs <fux at users.berlios.de>.
-	* Optional config file support (system- and user-wide)
-		- by Jon Severinsson <jonno at users.berlios.de>.
-	* Moved logfile to /var/log/nxserver.log.
-	* Moved nx homedir to /var/lib/nxserver/home
-	* Complete rewrite of authentication code
-		* passdb, su or ssh is now supported.
-		- by Jon Severinsson <jonno at users.berlios.de>.
-	* Added NODE_AUTOSTART, EXPORT_{USERIP/SESSIONID} config file
-	  directives.
-	* Added mechanism to forward connection to commercial NoMachine 
-	  nxserver (as available from www.nomachine.com).
-	* Added mechanism to forward connection to another nxserver. This
-	  allows using a "chain" of nxservers.
-	* Added "floating window" support by using rootless nxagent as
-	  it will be standard in NX 1.5.0.
-	* Added "floating window" support by just nxproxy/nxproxy connection
-	  and added configuration directive to enable rootless mode.
-	* Added nxsetup --uninstall and added more feature to nxsetup.
-	  Note: You need to use nxsetup --install for installation now.
-	* Added Disabling of port-forwarding, X11-forwarding, ... to ssh-key.
-
-	* Security: Fixed a security blunder. Authority file was not used 
-	            and so basically xhost +localhost was set. (ported from
-		    0.2.8)
-		    
-		    Update immediately.
-                   
-	* Security: Fixed two possible security problems (umask was not set
-                   correctly; ported from 0.2.8)
-
-20.11.2004 FreeNX 0.2.7 "Skolelinux Edition"
-	* Fix nxserver to work again with KNX-Client. ('\r' is evil)
-	* Fix timeout in nxnode-login to allow proper session management
-	  again.
-	* Fixed possible race condition for the wait-file.
-
-11.11.2004 FreeNX 0.2.6
-	
-	* Security: Fixed a possible exploit in ssh-usage
-	    (thanx to Sebastian Krahmer from the SuSE security team)
-	* Important: Public/Private key is no longer used for PAM auth mode.
-	
-14.10.2004 FreeNX 0.2.5
-	* Added Xdialog interface for nxclient and automatic usage
-	  of commercial nxclient when available. (Thx go to Rick Stout 
-	  <zipsonic at gmail.com>)
-	* Added bugfix from the 0.3.0 branch for more flexible nxdesktop in
-	  nxnode.
-	* Added patch by Rick Stout for permission problems in nxnode.
-	* Added patch by Rick Stout for a typo in nxkeygen.
-	* Updated gentoo-nomachine.diff.
-	* Updated CONTRIB to include a description of lazy-image encoding.
-
-11.09.2004 FreeNX 0.2.4
-	* Added timeout to avoid having hanging tail processes.
-	* Added "locking" of the display-offset if nxagent failed to start.
-	* Fixed ssh encryption for resume on client 1.4.0-snapshot 5.
-	* Fixed mktemp, which was non-portable to FreeBSD and Red Hat 9.
-
-10.09.2004 FreeNX 0.2-3
-	* Added support for autoreconnection or autoreconnection just 
-	  for the case when an older client version is used.
-	  	* This makes it possible to use Reconnection with the 
-	  	  stable version 1.3.2-7 (enabled by default)
-	* Added instructions how to install the NoMachine sources to INSTALL
-	* Changed $NX_DIR/bin/ssh to ssh to fix gentoo-nomachine.diff
-	* Added nxkeygen by Stuart Herbert for easier change from the 
-	  NoMachine key to another key afterwards.
-	
-	* Security: Any user was able to change the status of other sessions
-	            in the session database by providing the correct uniqueid.
-
-10.09.2004 FreeNX 0.2-2
-	* Added additional support for safe session suspend, 
-	  autosuspend when network connection times out works now!
-	* AuthorizedKeysFile cannot be safely determined on Gentoo;
-	  changed it to config option now.
-	* Added config option to completely disable passdb support.
-	* Fixed bugs in nxclient dialog frontend.
-	* Removed all usage of nxssh due to security concerns from SuSE. 
-	* Fixed session management for knx client.
-	* Added detection of failed nxagent startup.
-	* Updated the gentoo-nomachine.diff to be not fuzzy.
-
-08.09.2004 FreeNX 0.2-1
-	* Fixed support for one windows client version. 
-	* Fixed setting of key with --adduser.
-	  (Thanks to Stuart Herbert <stuart at gentoo.org>)
-	* Fixed _some_ cases for AuthorizedKeysFile in sshd_config.
-	  (Thanks to Peter Holik <peter at holik.at>)
-
-	* Fixed gentoo-nomachine.diff (nxnode not in path, but nxnode-login would try that)
-	* Fixed the bug with hanging tail processes.
-
-07.09.2004 FreeNX 0.2-0
-	* Reworked the whole security model in nxsetup due to requests from SuSE and Gentoo.
-		- nxsetup does not use the NoMachine key by default. 
-		- PAM authentication is enabled by default.
-	
-	* Added nxclient for compatibility with nxclient -dialog mode.
-	
-	* Minor changes
-		* Added SSHD_AUTH_PORT to config vars in nxserver
-		* Made all programs NX_ aware
-		* Programs do now honor the setting of AuthorizedKeysFile in sshd_config
-		* Changed nxsetup check from direct reading of passwd to getent
-		  (Thanks to Tom Hibbert <tom at nsp.co.nz>)
-		* Changed overall messages in nxsetup
-	
-	* Made a overall clean upstream package.
-	* Added Gentoo / NoMachine compatibility diff
-
-06.09.2004 
-	* Added pam authentication
-	* Added user_db switch
-	* moved some su - to nxnode-login
-
-02.09.2004 
-	* Added support for snapshot 4 (43/66)
-	* Fixed compatibility issue with 1.3.0 
-	  (Used by Knoppix 3.4 and earlier)
-	* added sane logging (LOGGING is now properly used)
-
-20.06.2004 
-	* Added Protocol version 1.4.0
-	* Cleanup
-	* Added missing functions
-
-14.06.2004 
-	* Added Protocol version 1.3.2

Copied: freenx-server/tags/FreeNX-0.7.1/ChangeLog (from rev 404, freenx-server/trunk/ChangeLog)

Deleted: freenx-server/tags/FreeNX-0.7.1/node.conf.sample
===================================================================
--- freenx-server/trunk/node.conf.sample	2007-05-29 15:27:07 UTC (rev 334)
+++ freenx-server/tags/FreeNX-0.7.1/node.conf.sample	2007-10-14 22:25:14 UTC (rev 405)
@@ -1,431 +0,0 @@
-# node.conf
-#
-# This file is provided by FreeNX. It should be placed either into
-# /etc/nxserver/node.conf (FreeNX style) or /usr/NX/etc/node.conf
-# (NoMachine NX style).
-#
-# It is mostly compatible with NoMachine node.conf. The most important 
-# difference is that no spaces are allowed when assigning values (eg 
-# "A=value" is allowed, "A = value" is NOT).
-#
-# This file is sourced by bash, so you can do some fancy stuff here if you
-# want to, but be aware that it is sourced 3 times per connection. If you 
-# want autostart stuff, set NODE_AUTOSTART instead!
-# 
-#
-# You surely are aware that FreeNX is based on the fantastic results that
-# the hard work by NoMachine.com has achieved. NoMachine.com released the
-# core NX libraries under the GPL. The installation of these libs are the
-# precondition for all FreeNX scripts to work. If you are installing this
-# software with the help of one of the package management tools of your
-# Linux distribution, you can assume that this dependency is taken care of
-# by the tool.
-#
-# You have questions about the inner workings of the NX technology?
-#
-# Then you are recommended to first check out the rich and very detailed
-# NoMachine documentation and their online Knowledge Base at 
-#
-#           http://www.nomachine.com/kb/
-#
-# Other sources of information are the NoMachine mailing lists 
-# (nxusers at nomachine.com and nxdevelopers at nomachine.com):
-#
-#           http://www.nomachine.com/mailinglists.php
-#
-# The FreeNX (freenx-knx at kde.org) list is here:
-#
-#           https://mail.kde.org/mailman/listinfo/freenx-knx
-#
-# SVN: $Id$
-
-#########################################################################
-# General FreeNX directives
-#########################################################################
-
-# The host name which is used by NX server. It's should be used if it's
-# different than the default hostname (as returned by `hostname`)
-#SERVER_NAME="$(hostname)"
-
-# The port number where local 'sshd' is listening.
-#SSHD_PORT=22
-
-
-#########################################################################
-# Authentication / Security directives
-#########################################################################
-
-# Authentication directives
-
-# This adds the usermode to the possible authentication methods
-# Usermode means that a user can start the nxserver as his shell
-# and connect directly to the right server via a custom client.
-#ENABLE_USERMODE_AUTHENTICATION="0"
-
-# This adds the passdb to the possible authentication methods
-#ENABLE_PASSDB_AUTHENTICATION="1"
-
-# This adds SSH to the possible authentication methods. For it to work sshd
-# must be set up at localhost accepting password authentication.
-#ENABLE_SSH_AUTHENTICATION="1"
-
-# This adds SU to the possible authentication methods. For it to work the 
-# "nx" user must be in the wheel (RedHat, Fedora) or the users group (SUSE)
-# and the user logging in must have a valid shell that accepts the -c
-# parameter.
-#ENABLE_SU_AUTHENTICATION="0"
-
-# Require all users to be in the passdb, regardless of authentication method
-#ENABLE_USER_DB="0"
-
-
-# If enabled forces the user to use encryption. This will bail out
-# if the user does not have encryption enabled.
-#ENABLE_FORCE_ENCRYPTION="0"
-
-# Refuse the NX client connection if SSHD does not export the
-# SSH_CONNECTION and SSH_CLIENT variables in the environment
-# passed to the NX server.
-# 1: Will check the remote IP and will not accept the
-#    connection if it can't be determined.
-# 0: Will accept the connection even if the remote IP
-#    is not provided.
-#SSHD_CHECK_IP="0"
-
-
-#########################################################################
-# Restriction directives
-#########################################################################
-
-# The base display number from which sessions are started.
-#DISPLAY_BASE=1000
-
-# The maximum number of contemporary sessions that can be run on FreeNX
-#SESSION_LIMIT=200
-
-# The maximum number of contemporary sessions that a single user can run
-# on FreeNX. Defaults to the value of SESSION_LIMIT.
-#SESSION_USER_LIMIT=200
-
-# The number of displays reserved for sessions, it has to be greater or equal
-# to the maximum number of contemporary sessions that a server can run.
-#DISPLAY_LIMIT=200
-
-
-# User for which sessions should be persistent. Either the keyword "all" or a
-# comma-separated list of usernames or groups in the @groupname syntax.
-#ENABLE_PERSISTENT_SESSION="all"
-
-# Users and groups for whom persistent sessions should be disabled.
-# Especially useful if ENABLE_PERSISTENT_SESSION="all"
-#DISABLE_PERSISTENT_SESSION=""
-
-
-#########################################################################
-# Logging directives
-#########################################################################
-
-# This directives controls the verbosity of the server-wide log.
-# 0: No Logging
-# 1: Errors
-# 2: Warnings
-# 3: Important information
-# 4: Server - Client communication
-# 5: Information
-# 6: Debugging information
-# 7: stderror of some applications
-#NX_LOG_LEVEL=0
-
-# By setting this to 0 the nxserver might be a bit faster, but passwords can be found in the log files.
-#NX_LOG_SECURE=1
-
-# Before turning logging on, please make sure that NX_LOGFILE is
-# writeable for the "nx" user
-#NX_LOGFILE=/var/log/nxserver.log
-
-# This directive controls if the temporary session directory
-# ($HOME/.nx/C-<hostname>-<display>-<session_id>) should be kept after a
-# session has ended. A successfully terminated session will be saved as
-# T-C-<hostname>-<display>-<session_id> while a failed session will be saved
-# as F-C-<hostname>-<display>-<session_id>.
-# The default is to cleanup the directories.
-#SESSION_LOG_CLEAN=1
-
-# Amount of seconds nxserver is to keep session history. The default of 2592000
-# is equivalent to 30 days. If this is 0 no session history will be kept
-# and a negative value denotes infinity.
-#SESSION_HISTORY=2592000
-
-
-#########################################################################
-# Forwarding directives
-#########################################################################
-
-# FreeNX with ENABLE_SERVER_FORWARD="1" will automatically forward all
-# connections to the host specified in SERVER_FORWARD_HOST with the
-# secret key SERVER_FORWARD_KEY.
-#
-# This allows to have a "chain" of NX Servers. Note that you will need to
-# use "SSL encryption" for all connections.
-
-#ENABLE_SERVER_FORWARD="0"
-#SERVER_FORWARD_HOST=""
-#SERVER_FORWARD_PORT=22
-#SERVER_FORWARD_KEY="/usr/NX/share/client.id_dsa.key"
-
-
-# FreeNX with ENABLE_NOMACHINE_FORWARD_PORT="1" will automatically forward all
-# connections to the commercial NoMachine nxserver installed on the same
-# machine, which go in by port NOMACHINE_FORWARD_PORT. This feature is introduced
-# to enable the usage of FreeNX and NoMachine NX side by side on the same machine
-# without conflicts.
-#
-# Note: You need to let SSHD listen to several ports to make use of this
-#       directive.
-
-#ENABLE_NOMACHINE_FORWARD_PORT="0"
-#NOMACHINE_FORWARD_PORT="22"
-
-#NOMACHINE_SERVER="/usr/NX/bin/nxserver"
-#NOMACHINE_NX_HOME_DIR="/usr/NX/home/nx"
-
-
-# LOAD BALANCING
-# ==============
-#
-# To do load balancing setup some hosts in LOAD_BALANCE_SERVERS and
-# make:
-#
-#   - either sure that all incoming connections are sent to the master
-#     server by using forwarding directives on the "slave" servers.
-#
-#   - or share the session database space via NFS between the servers.
-#     (not recommended at the moment as race conditions for DISPLAYs can 
-#      occur)
-#
-
-#LOAD_BALANCE_SERVERS=""
-
-# The following load_balance_algorithms are available at the moment:
-#
-# "load", "round-robin", "random"
-#
-
-#LOAD_BALANCE_ALGORITHM="load"
-
-# By setting ENABLE_LOADBALANCE="1" you can let users choose their
-# preferred host, while being forwarded to another server. Of course
-# this is just a preference. The loadbalancing algorithm can completely
-# choose to ignore the users choice.
-
-#ENABLE_LOAD_BALANCE_PREFERENCE="0"
-
-#########################################################################
-# Services directives
-#########################################################################
-
-# FreeNX with ENABLE_ESD_PRELOAD="1" will automatically try to setup
-# the sound with the help of the esd media helper.
-#
-# Currently ESD will be used just by the Windows NX Client.
-#
-# Be sure that $ESD_BIN_PRELOAD is in your path, does exist and work
-# before enabling this directive.
-
-#ENABLE_ESD_PRELOAD="0"
-#ESD_BIN_PRELOAD="esddsp"
-
-# FreeNX with ENABLE_ARTSD_PRELOAD="1" will automatically try to setup
-# the sound with the help of the artsd media helper.
-#
-# Currently ARTSD will be used just by the Linux NX Client.
-#
-# Be sure that $ARTSD_BIN_PRELOAD is in your path, does exist and work
-# before enabling this directive.
-
-#ENABLE_ARTSD_PRELOAD="0"
-#ARTSD_BIN_PRELOAD="artsdsp"
-
-# FreeNX with ENABLE_KDE_CUPS="1" will automatically write 
-# $KDE_PRINTRC and put the current used socket into it.
-#
-# If you additionally enable ENABLE_KDE_CUPS_DYNAMIC it will set the 
-# Host entry to the script nxcups-gethost, which dynamically tries all 
-# possible entries to find the current printing host.
-#
-# The order is: CUPS_SERVER (env var), ~/.cups/client.conf, $KDE_PRINTRC,
-#               $CUPS_DEFAULT_SOCK, localhost
-#
-# So this option is most useful with ENABLE_CUPS_SERVER_EXPORT="1".
-# 
-# $KDE_PRINTRC is automatically calculated if its not set.
-
-#ENABLE_KDE_CUPS="0"
-#ENABLE_KDE_CUPS_DYNAMIC="0"
-#KDE_PRINTRC="$KDEHOME/share/config/kdeprintrc"
-
-# FreeNX with ENABLE_CUPS_SERVER_EXPORT="1" will automatically
-# export the environment variable CUPS_SERVER.
-
-#ENABLE_CUPS_SERVER_EXPORT="1"
-
-# FreeNX with ENABLE_CUPS_SEAMLESS will automatically try to download the 
-# necessary ppds from the client.
-# 
-# As the forwarding is just active as soon as nxagent is started,
-# we need a small delay of $CUPS_SEAMLESS_DELAY.
-#
-# Note: You need to use a patched cupsd on client side.
-
-#ENABLE_CUPS_SEAMLESS="0"
-#CUPS_SEAMLESS_DELAY="10"
-
-# FreeNX with ENABLE_FOOMATIC will integrate the foomatic db to the list
-# of available ppd drivers via the $COMMAND_FOOMATIC command.
-
-#ENABLE_FOOMATIC="1"
-#COMMAND_FOOMATIC="/usr/lib/cups/driver/foomatic-ppdfile"
-
-# CUPS_BACKEND and CUPS_ETC are the corresponding paths of your CUPS 
-# installation.
-
-#CUPS_BACKEND="/usr/lib/cups/backend"
-#CUPS_IPP_BACKEND="$CUPS_BACKEND/nxipp"
-#CUPS_DEFAULT_SOCK="/var/run/cups/cups.sock"
-#CUPS_ETC="/etc/cups"
-
-#########################################################################
-# Path directives
-#########################################################################
-
-# USER_FAKE_HOME is the base directory for the .nx directory. Use this
-# parameter instead of the users home directory if $HOME is on a NFS share.
-# Note that this directory must be unique for every user! To accomplish this
-# it is recommended to include $USER in the path.
-#USER_FAKE_HOME=$HOME
-
-# Add the nx libraries to LD_LIBRARY_PATH before starting nx agents.
-# WARNING: This will NOT (and should not) affect applications. ONLY Disable
-# this if the nx libraries are in a standard system path (such as /usr/lib)!
-#SET_LD_LIBRARY_PATH="1"
-
-
-# The command binary for the default window manager. If set it is run when a
-# 'unix-custom' session is requested by the NX Client and an application
-# to run is specified. It defaults to empty (ie no WM is run).
-# If KILL_DEFAULT_X_WM is set the WM is terminated after the started 
-# application finishes. Else FreeNX will wait for the WM to complete.
-#DEFAULT_X_WM=""
-#KILL_DEFAULT_X_WM="1"
-
-# When a 'unix-default' session is requested by the client the user's X startup
-# script will be run if pressent and executable, otherwise the default X
-# session will be run.
-# Depending on distribution USER_X_STARTUP_SCRIPT might be .Xclients, .xinitrc
-# and .Xsession
-# Depending on distribution DEFAULT_X_SESSION might be /etc/X11/xdm/Xsession,
-# /etc/X11/Sessions/Xsession or /etc/X11/xinit/xinitrc
-#USER_X_STARTUP_SCRIPT=.Xclients
-#DEFAULT_X_SESSION=/etc/X11/xdm/Xsession
-
-# The key that contains the name of the script that starts a KDE session.
-# It's run when a 'unix-kde' session is requested by the client.
-#COMMAND_START_KDE=startkde
-
-# The key that contains the name of the script that starts a gnome session.
-# It's run when a 'unix-gnome' session is requested by the client.
-#COMMAND_START_GNOME=gnome-session
-
-# The key that contains the name of the script that starts a CDE session.
-# It's run when a 'unix-cde' session is requested by the client.
-#COMMAND_START_CDE=cdwm
-
-# The key that contains the name of the complete path of command name
-# 'xterm'. It is run when a unix "xterm" session is requested by the
-# client.
-#COMMAND_XTERM=xterm
-
-# The key that contains the name of the complete path of command name
-# 'xauth'.
-#COMMAND_XAUTH=/usr/X11R6/bin/xauth
-
-# The key that contains the name of the complete path of command name
-# 'smbmount'.
-#COMMAND_SMBMOUNT=smbmount
-
-# The key that contains the name of the complete path of command name
-# 'smbumount'.
-#COMMAND_SMBUMOUNT=smbumount
-
-# The key that contains the name of the complete path of the 'netcat' command.
-#COMMAND_NETCAT=netcat
-
-# The key that contains the name of the complete path of the 'ssh' and
-# 'ssh-keygen' command.
-#COMMAND_SSH=ssh
-#COMMAND_SSH_KEYGEN=ssh-keygen
-
-# The key that contains the name of the complete path of the 'cupsd' command.
-#COMMAND_CUPSD=/usr/sbin/cupsd
-
-# The tool to generate md5sums with
-#COMMAND_MD5SUM=md5sum
-
-#########################################################################
-# Misc directives
-#########################################################################
-
-# When you installed a 2.0.0 NX Backend, set this to 1.
-#ENABLE_2_0_0_BACKEND="0"
-
-# When set to 1 this will automatically resume started sessions
-#ENABLE_AUTORECONNECT="0"
-
-# When set to 1 this will automatically resume started sessions
-# but only if an older client version is used
-#ENABLE_AUTORECONNECT_BEFORE_140="1"
-
-# When set to 1 exports NXUSERIP / NXSESSIONID in nxnode
-#EXPORT_USERIP="0"
-#EXPORT_SESSIONID="1"
-
-# This can be set to any executable, which is started after session startup
-# like: $NODE_AUTOSTART {start|restore}
-#NODE_AUTOSTART=""
-
-# When set to 1 will start nxagent in rootless mode.
-#ENABLE_ROOTLESS_MODE="1"
-
-# If enabled writes entries via the COMMAND_SESSREG program
-# into utmp/wtmp/lastlog database.
-# Note: You have to make sure that you add the nx user to the
-#       utmp or tty group or how its called on your system
-#       before this directive works.
-#ENABLE_USESSION="0"
-#COMMAND_SESSREG="sessreg"
-
-# Extra options sent to the different nx agents. See !M documentation
-# for examples of useful parameters.
-#AGENT_EXTRA_OPTIONS_RFB=""
-#AGENT_EXTRA_OPTIONS_RDP=""
-#AGENT_EXTRA_OPTIONS_X=""
-
-# The number of seconds we wait for the nxagent to start before
-# deciding startup has failed
-#AGENT_STARTUP_TIMEOUT="60"
-
-# The font server the agent will use. If set to "" no font server is used.
-# For this to do any good, the client has to have the same font server set
-# in /etc/X11/XF86Config
-#AGENT_FONT_SERVER=""
-
-# Disable or enable use of 'tcp nodelay' on proxy. Old versions of Linux
-# kernels have problems using this option on sockets that will cause a loss
-# of TCP connections. This option is not set by default to allow clients to
-# specify whether to enable or disable TCP nodelay. Setting this option to
-# the value of "0" NX proxy avoids using 'tcp nodelay' but it will cause a
-# loss of interaction in sessions.
-#PROXY_TCP_NODELAY=""
-
-# Extra options to nxproxy. See !M documentation for useful parameters.
-#PROXY_EXTRA_OPTIONS=""

Copied: freenx-server/tags/FreeNX-0.7.1/node.conf.sample (from rev 402, freenx-server/trunk/node.conf.sample)

Deleted: freenx-server/tags/FreeNX-0.7.1/nxclient
===================================================================
--- freenx-server/trunk/nxclient	2007-05-29 15:27:07 UTC (rev 334)
+++ freenx-server/tags/FreeNX-0.7.1/nxclient	2007-10-14 22:25:14 UTC (rev 405)
@@ -1,338 +0,0 @@
-#!/bin/bash
-#
-# Copyright (c) 2004 by Fabian Franz <freenx at fabian-franz.de>
-#           (c) 2004 by Rick Stout <zipsonic at gmail.com>
-#
-# License: GPL, version 2
-#
-# Note: NX does not check the exit-code from nxclient,
-#       but we set it to a "good value" anyway in case 
-#       it does check it someday.
-#
-# SVN: $Id$
-#
-# ========================================================================
-
-# First check if the commercial nxclient is available and use it
-# but check that it isn't this script to prevent a loop!
-NXCLIENT="/usr/NX/bin/nxclient"
-[ -x "$NXCLIENT" -a "$(file -bi $NXCLIENT)" != 'application/x-shellscript' ] \
-	&& exec ${NXCLIENT} "$@"
-
-TEMP=`getopt -a -o d: --long local,noautokill,dialog:,caption:,message:,display:,printer:,parent: -n $(basename $0) -- "$@"`
-
-if [ $? != 0 ] ; then echo "Terminating..." >&2 ; exit 1 ; fi
-
-# Note the quotes around `$TEMP': they are essential!
-eval set -- "$TEMP"
-
-DIALOG_TYPE="ok";
-DIALOG_CAPTION=""
-DIALOG_MESSAGE=""
-DIALOG_LOCAL=""
-DIALOG_NOAUTOKILL=""
-DIALOG_PRINTER=""
-DIALOG_PARENT="$PPID"
-
-while true
-do
-        case "$1" in
-		--dialog) DIALOG_TYPE="$2"; shift 2 ;;
-		--caption) DIALOG_CAPTION="$2"; shift 2 ;;
-		--message) DIALOG_MESSAGE="$2"; shift 2 ;;
-		--local) DIALOG_LOCAL="yes"; shift ;;
-		--noautokill) DIALOG_NOAUTOKILL="yes"; shift ;;
-		--display) DISPLAY="$2"; shift 2 ;;
-		--printer) DIALOG_PRINTER="$2"; shift 2 ;;
-		--parent) DIALOG_PARENT="$2"; shift 2 ;;
-		--) shift ; break ;;
-                *) echo "Internal error!" ; exit 1; ;;
-	esac
-done
-
-export DISPLAY
-
-# if --printer is set, the dialog type is overridden
-[ -n "$DIALOG_PRINTER" ] && DIALOG_TYPE="printer"
-
-if [ -x /usr/bin/Xdialog ] 
-then
-	dialog_interface="xdialog"
-	DIALOG=/usr/bin/Xdialog # just in case that we have no good path
-else
-	dialog_interface="xmessage"
-	xmessage=$(which xmessage 2>/dev/null)
-	[ -z "$xmessage" ] && xmessage="/usr/X11R6/bin/xmessage"
-fi
-
-#
-# utility functions for all interfaces
-#
-
-# utility_printer "get|set|getlist|getvendlist|getdrvlist"
-#
-#	get <name> - gets the current driver for name
-#	set <name> <driver> <description> - sets the current driver and description for name
-#	getvendlist - gets a list of vendors
-#	getdrvlist <vendor> - gets a list of drivers for vendor
-#	getextdrvlist <vendor> - gets an extended list (with driver and 
-#                                description) of drivers for vendor
-#	getdesc <driver> - gets the description for driver <driver>
-#	getlist - gets a list of drivers
-
-#
-# drivers.cache has the following format:
-#	
-#	driver|<printername>|<ppdfile>|<description>
-#
-
-#
-# Example: IFS='|' DEFAULT_PRINTER=( $(utility_printer get <myprinter>) )
-# 	  
-#	You can then select ${DEFAULT_PRINTER[1]} for <printername>.
-# 
-
-utility_printer()
-{
-	UTILITY_DRIVERS_CACHE="$HOME/.nx/config/drivers.cache"
-	[ -n "$USER_FAKE_HOME" ] && UTILITY_DRIVERS_CACHE="$USER_FAKE_HOME/.nx/config/drivers.cache"
-	UTILITY_NXPRINT="nxprint"
-	[ -n "$PATH_BIN" ] && UTILITY_NXPRINT="$PATH_BIN/nxprint"
-	# Export configuration vars for nxprint
-	export ENABLE_FOOMATIC COMMAND_FOOMATIC
-	case "$1" in 
-		get)
-			grep "driver|$2|" "$UTILITY_DRIVERS_CACHE" 2>/dev/null
-		;;
-		set)
-			# FIXME: Handle possible race conditions?
-			grep -v "driver|$2|" "$UTILITY_DRIVERS_CACHE" 2>/dev/null > $UTILITY_DRIVERS_CACHE.tmp
-			echo "driver|$2|$3|$4" >> $UTILITY_DRIVERS_CACHE.tmp
-			mv -f $UTILITY_DRIVERS_CACHE.tmp $UTILITY_DRIVERS_CACHE
-		;;
-		getvendlist)
-			$UTILITY_NXPRINT -d | awk -F'|' '{ print $2 }' | uniq | tr '\n' '|'
-		;;
-		getdrvlist)
-			$UTILITY_NXPRINT -d | awk -F'|' '($2=="'$2'") { print $4}' | tr '\n' '|'
-		;;
-		getextdrvlist)
-			$UTILITY_NXPRINT -d | awk -F'|' '($2=="'$2'") { print $4 "|" $3 }'
-		;;
-
-		getdesc)
-			$UTILITY_NXPRINT -d | awk -F'|' '($4=="'$2'") { print $3}'
-		;;
-		getlist)
-			$UTILITY_NXPRINT -d
-		;;
-	esac
-}
-
-#
-# xmessage dialog interface
-#
-
-xmessage_ok()
-{
-	$xmessage -buttons "Ok:0" -center "$DIALOG_MESSAGE"
-	return 0 # Give cancel on close ...
-}
-
-xmessage_yesno()
-{
-	$xmessage -buttons "Yes:2,No:0" -center "$DIALOG_MESSAGE"
-}
-
-xmessage_yesnosuspend()
-{
-	$xmessage -buttons "Suspend:3,Terminate:2,Cancel:0" -center "$DIALOG_MESSAGE"
-}
-
-xmessage_panic()
-{
-	$xmessage -buttons "Terminate:2,Cancel:0" -center "$DIALOG_MESSAGE"
-}
-
-xmessage_quit()
-{
-	$xmessage -buttons "Quit:0" -center "$DIALOG_MESSAGE"
-	return 0 # Give cancel on close ...
-}
-
-xmessage_printer_ask()
-{
-	$xmessage -buttons "Ok:100,Configure:101,Cancel:102" -center "$DIALOG_MESSAGE"
-	RC=$?
-	[ $RC -lt 100 ] && return 2
-	let RC=$RC-100
-	return $RC
-}
-
-xmessage_printer_configure()
-{
-	IFS=','
-	$xmessage -buttons "$*" -center "$DIALOG_MESSAGE"
-	RC=$?
-	unset IFS
-	VENDOR=""
-	if [ $RC -gt 100 ]
-	then
-		let NR=$RC-100
-		VENDOR="${!NR}"
-	fi
-	echo "$VENDOR"
-}
-
-xmessage_printer_configure_vendor()
-{
-	IFS='|' VENDOR_LIST=( $(utility_printer getvendlist) )
-	xmessage_printer_configure "${VENDOR_LIST[@]}"
-}
-
-xmessage_printer_configure_driver()
-{
-	IFS='|' DRIVER_LIST=( $(utility_printer getdrvlist "$1") )
-	xmessage_printer_configure "${DRIVER_LIST[@]}"
-}
-
-#
-# xdialog interface
-#
-
-xdialog_ok()
-{
-	$DIALOG --title "$DIALOG_CAPTION" --msgbox "$DIALOG_MESSAGE" 0 0
-	return 0 # Give cancel on close ...
-}
-
-xdialog_yesno()
-{
-	$DIALOG --title "$DIALOG_CAPTION" --yesno "$DIALOG_MESSAGE" 0 0
-	RC=$?
-	[ $RC -eq 0 ] && return 2
-	[ $RC -eq 1 ] && return 0
-}
-
-xdialog_yesnosuspend()
-{
-	$DIALOG --title "$DIALOG_CAPTION" --buttons-style text --ok-label "Suspend" --cancel-label "Terminate" --yesno "$DIALOG_MESSAGE Close window to cancel." 400x150
-	RC=$?
-	[ $RC -eq 0 ] && return 3
-	[ $RC -eq 1 ] && return 2
-}
-
-xdialog_panic()
-{
-	$DIALOG --title "$DIALOG_CAPTION" --buttons-style text --default-no --ok-label "Terminate" --cancel-label "Cancel" --yesno "$DIALOG_MESSAGE" 0x0
-	RC=$?
-	[ $RC -eq 0 ] && return 2
-	[ $RC -eq 1 ] && return 0
-}
-
-xdialog_quit()
-{
-        $DIALOG --buttons-style text --ok-label "Quit" --title "$DIALOG_CAPTION" --msgbox "$DIALOG_MESSAGE" 0 0
-        return 0 # Give cancel on close ...
-}
-
-xdialog_printer_ask()
-{
-	$DIALOG --title "$DIALOG_CAPTION" --buttons-style text --ok-label "Ok" --cancel-label "Configure" --yesno "$DIALOG_MESSAGE\n\nClose window to cancel." 400x250
-	RC=$?
-	[ $RC -eq 255 ] && return 2
-	return $RC
-}
-
-xdialog_printer_configure_vendor()
-{
-	IFS='|' VENDOR_LIST=( $(utility_printer getvendlist | sed 's/|/||off|/g') )
-	$DIALOG --stdout --title "$DIALOG_CAPTION" --radiolist "$DIALOG_MESSAGE" 0 0 6 "${VENDOR_LIST[@]}"
-}
-
-# xdialog_printer_configure_driver vendor old_driver
-xdialog_printer_configure_driver()
-{
-	IFS='|' XDIALOG_LIST=( $(utility_printer getextdrvlist "$1" | sed 's,$,|off,g; /'"$(basename $2)"'/ s,|off,|on,g' | tr '\n' '|') )
-	$DIALOG --stdout --title "$DIALOG_CAPTION" --radiolist "$DIALOG_MESSAGE" 0 0 6 "${XDIALOG_LIST[@]}"
-}
-
-
-#
-# helper functions
-#
-
-helper_dialog_printer()
-{
-	IFS="|" PRINTER_INFORMATION=( $(utility_printer get "$DIALOG_PRINTER") )
-	PRINTER_CONFIGURE="yes"
-	[ -z "$DIALOG_CAPTION" ] && DIALOG_CAPTION="NX Printer configuration for $DIALOG_PRINTER"
-	
-	# Do we have old printer information present?
-	if [ -n "$PRINTER_INFORMATION" ]
-	then
-		DIALOG_MESSAGE=$(echo -e "Found driver for printer $DIALOG_PRINTER.\n\nOld choice was: ${PRINTER_INFORMATION[3]}.\n\nIf you want to keep the settings click on 'Ok' \n- else click on 'Configure'.") ${dialog_interface}_printer_ask
-		RC=$?
-		# bail out with exit code 2 in case the user cancelled the operation
-		[ $RC -eq 2 ] && echo "cancel: aborted" && exit 2
-		[ $RC -eq 0 ] && PRINTER_CONFIGURE="no"
-	fi
-	
-	VENDOR=""
-	OLD_DRIVER="${PRINTER_INFORMATION[2]}"
-
-	if [ "$PRINTER_CONFIGURE" = "yes" ]
-	then
-		DRIVER=""
-		VENDOR=$(DIALOG_MESSAGE="Choose vendor for printer $DIALOG_PRINTER." ${dialog_interface}_printer_configure_vendor)
-		[ -n "$VENDOR" ] && DRIVER=$(DIALOG_MESSAGE="Choose driver for printer $DIALOG_PRINTER." ${dialog_interface}_printer_configure_driver "$VENDOR" "${OLD_DRIVER:-invalid}")
-		# set the new printer driver
-		if [ -n "$DRIVER" ]
-		then
-			DESC=$(utility_printer getdesc "$DRIVER")
-			utility_printer set "$DIALOG_PRINTER" "$DRIVER" "$DESC"
-		fi
-	else
-		DRIVER="$OLD_DRIVER"
-	fi
-
-	# echo the choosen <ppdfile> to stdout
-	[ -n "$DRIVER" ] && echo "$DRIVER"
-	[ -z "$DRIVER" ] && echo "cancel: aborted" && exit 2
-			
-	exit 0
-}
-
-#
-# main case statement
-#
-
-case $DIALOG_TYPE in 
-	ok)
-		${dialog_interface}_ok
-	;;
-	yesno)
-		${dialog_interface}_yesno
-	;;
-	yesnosuspend)
-		${dialog_interface}_yesnosuspend
-	;;
-	panic)
-		${dialog_interface}_panic
-	;;
-	quit)
-		${dialog_interface}_quit
-	;;
-	printer)
-		helper_dialog_printer
-	;;
-esac
-
-#
-# Time for exit code checks :)
-#
-
-RC=$?
-	[ $RC -eq 2 ] && kill -TERM $DIALOG_PARENT
-	[ $RC -eq 3 ] && kill -HUP $DIALOG_PARENT
-exit 0

Copied: freenx-server/tags/FreeNX-0.7.1/nxdesktop_helper (from rev 398, freenx-server/trunk/nxdesktop_helper)

Copied: freenx-server/tags/FreeNX-0.7.1/nxdialog (from rev 396, freenx-server/trunk/nxdialog)

Deleted: freenx-server/tags/FreeNX-0.7.1/nxkeygen
===================================================================
--- freenx-server/trunk/nxkeygen	2007-05-29 15:27:07 UTC (rev 334)
+++ freenx-server/tags/FreeNX-0.7.1/nxkeygen	2007-10-14 22:25:14 UTC (rev 405)
@@ -1,69 +0,0 @@
-#!/bin/bash
-#
-# /usr/NX/bin/nxkeygen
-#		Create a new client/server key pair
-#
-#		Originally written for Gentoo Linux
-#
-# Author	Stuart Herbert
-#		(stuart at gentoo.org)
-#
-# Copyright	(c) 2004 Gentoo Foundation
-#		Released under v2 of the GNU GPL
-#
-# SVN: $Id$
-#
-# ========================================================================
-
-# Read the config file
-. $(PATH=$(cd $(dirname $0) && pwd):$PATH which nxloadconfig) --
-
-NX_KEY_DIR="$NX_HOME_DIR/.ssh"
-DATE="`date '+%Y%m%d-%H%M%S'`"
-NX_CLIENT_KEY="${NX_KEY_DIR}/client.id_dsa.key"
-NX_SERVER_KEY="${NX_KEY_DIR}/server.id_dsa.pub.key"
-
-main ()
-{
-	# create a new key
-	umask 177
-	$COMMAND_SSH_KEYGEN -q -t dsa -N '' -f ${NX_KEY_DIR}/local.id_dsa
-
-	# backup the existing keys
-	
-	if [ -f "${NX_SERVER_KEY}" ]; then
-		echo "Backing up existing server key to ${NX_SERVER_KEY}.${DATE}"
-		mv -f "${NX_SERVER_KEY}" "${NX_SERVER_KEY}.${DATE}"
-	fi
-
-	if [ -f "${NX_CLIENT_KEY}" ]; then
-		echo "Backing up existing client key to ${NX_CLIENT_KEY}.${DATE}"
-		mv -f "${NX_CLIENT_KEY}" "${NX_CLIENT_KEY}.${DATE}"
-	fi
-
-	# put the new keys in place
-
-	mv -f "${NX_KEY_DIR}/local.id_dsa" "${NX_CLIENT_KEY}"
-	mv -f "${NX_KEY_DIR}/local.id_dsa.pub" "${NX_SERVER_KEY}"
-
-	for x in ${NX_CLIENT_KEY} ${NX_SERVER_KEY} ; do
-		chmod 600 $x
-		chown nx:root $x
-	done
-	
-	# copy the key to the authorized_keys2 file
-	rm -f $NX_KEY_DIR/$SSH_AUTHORIZED_KEYS
-	echo -n "no-port-forwarding,no-agent-forwarding,command=\"$PATH_BIN/nxserver\" " >$NX_KEY_DIR/$SSH_AUTHORIZED_KEYS
-	cat ${NX_SERVER_KEY} >> $NX_KEY_DIR/$SSH_AUTHORIZED_KEYS
-
-	# now tell the user what to do
-
-	echo "Unique key generated; your users must install"
-	echo
-	echo "    ${NX_CLIENT_KEY}"
-	echo
-	echo "on their computers."
-}
-
-main "$@"
-

Copied: freenx-server/tags/FreeNX-0.7.1/nxkeygen (from rev 372, freenx-server/trunk/nxkeygen)

Deleted: freenx-server/tags/FreeNX-0.7.1/nxloadconfig
===================================================================
--- freenx-server/trunk/nxloadconfig	2007-05-29 15:27:07 UTC (rev 334)
+++ freenx-server/tags/FreeNX-0.7.1/nxloadconfig	2007-10-14 22:25:14 UTC (rev 405)
@@ -1,574 +0,0 @@
-#!/bin/bash
-#
-# Copyright (c) 2005 by Fabian Franz <freenx at fabian-franz.de>
-#           (c) 2005 by Jon Severinsson <jonno at users.berlios.de>
-#
-# License: GPL, version 2
-#
-# SVN: $Id$
-#
-# ========================================================================
-
-#########################################################################
-# Commandline support for --help, --check and --userconf
-#########################################################################
-
-HELP="no"
-CHECK="no"
-USERCONF="no"
-NXLCFG_IGNORE_ERRORS="no"
-
-while [ "$1" ]
-do
-	case "$1" in
-		--help) HELP="yes"; shift ;;
-		--check) CHECK="yes"; shift ;;
-		--ignore-errors) NXLCFG_IGNORE_ERRORS="yes"; shift;;
-		--userconf) USERCONF="yes" ; 
-					case "$2" in
-						"" | --*) shift ;;
-						*) USER=$2 ; shift 2 ;;
-					esac ;;
-		--) shift ; break ;;
-		*) echo "Invalid flag $1" ; HELP="yes"; shift ; break ;;
-	esac
-done
-
-if [ "$HELP" = "yes" ]
-then
-	echo "nxloadconfig - Load the FreeNX configuration variables into the environment."
-	echo "Syntax: nxloadconfig --help"
-	echo "        nxloadconfig [--check] [--userconf [<username>]]"
-	echo
-	echo "  --check                  Write errors to standard output."
-	echo "	--ignore-errors		 just warn, and don't exit with a error, if errors occure"
-	echo "  --userconf [<username>]  Parse <username>.node.conf as well as node.conf."
-	echo "                           Assume current user if no username is specified."
-	exit 0
-fi
-
-#########################################################################
-# INTERNAL STUFF
-# DO NOT TOUCH unless you REALLY know what you are doing
-#########################################################################
-
-NX_VERSION=1.5.0-61-SVN
-NX_LICENSE="OS (GPL)"
-
-# Where can different nx components be found
-NX_DIR=/usr
-PATH_BIN=$NX_DIR/bin # if you change that, be sure to also change the public keys
-PATH_LIB=$NX_DIR/lib
-NX_ETC_DIR=/etc/nxserver
-NX_SESS_DIR=/var/lib/nxserver/db
-NX_HOME_DIR=/var/lib/nxserver/home
-
-# Advanced users ONLY
-AGENT_LIBRARY_PATH="" #Calculated
-PROXY_LIBRARY_PATH="" #Calculated
-APPLICATION_LIBRARY_PATH="" #Calculated
-APPLICATION_LIBRARY_PRELOAD="" #Calculated
-
-# the name of the authorized keys file for ssh
-SSH_AUTHORIZED_KEYS="authorized_keys2"
-
-# retest values like xauth, netcat
-# set to 0 if you are sure, you set the right values
-
-NXCONFIG_RETEST=1
-
-#########################################################################
-# Default Values
-# A user should NEVER touch this, edit $NX_ETC_DIR/node.conf instead
-#########################################################################
-
-# General FreeNX directives
-
-SERVER_NAME="$(hostname)"
-SSHD_PORT=22
-
-# Authentication / Security directives
-
-ENABLE_USERMODE_AUTHENTICATION="0"
-ENABLE_PASSDB_AUTHENTICATION="1"
-ENABLE_SSH_AUTHENTICATION="1"
-ENABLE_SU_AUTHENTICATION="0"
-ENABLE_USER_DB="0"
-
-ENABLE_FORCE_ENCRYPTION="0"
-SSHD_CHECK_IP="0"
-
-
-# Restriction directives
-
-DISPLAY_BASE=1000
-SESSION_LIMIT=200
-SESSION_USER_LIMIT="" #Calculated
-DISPLAY_LIMIT=200
-
-ENABLE_PERSISTENT_SESSION="all"
-DISABLE_PERSISTENT_SESSION=""
-
-
-# Logging directives
-
-NX_LOG_LEVEL=0
-NX_LOG_SECURE=1
-NX_LOGFILE=/var/log/nxserver.log
-SESSION_LOG_CLEAN=1
-SESSION_HISTORY=2592000
-
-
-# Forwarding directives
-
-ENABLE_SERVER_FORWARD="0"
-SERVER_FORWARD_HOST=""
-SERVER_FORWARD_PORT=22
-SERVER_FORWARD_KEY="/usr/NX/share/client.id_dsa.key"
-
-NOMACHINE_SERVER="/usr/NX/bin/nxserver"
-NOMACHINE_NX_HOME_DIR="/usr/NX/home/nx"
-ENABLE_NOMACHINE_FORWARD_PORT="0"
-NOMACHINE_FORWARD_PORT="22"
-
-LOAD_BALANCE_SERVERS=""
-LOAD_BALANCE_ALGORITHM="load"
-ENABLE_LOAD_BALANCE_PREFERENCE="0"
-
-# Services directives
-
-ENABLE_ESD_PRELOAD="0"
-ESD_BIN_PRELOAD="esddsp"
-ENABLE_ARTSD_PRELOAD="0"
-ARTSD_BIN_PRELOAD="artsdsp"
-
-ENABLE_KDE_CUPS="0"
-ENABLE_KDE_CUPS_DYNAMIC="0"
-KDE_PRINTRC="" # Calculated
-
-ENABLE_CUPS_SERVER_EXPORT="1"
-ENABLE_CUPS_SEAMLESS="0"
-CUPS_SEAMLESS_DELAY="10"
-ENABLE_FOOMATIC="1"
-COMMAND_FOOMATIC="/usr/lib/cups/driver/foomatic-ppdfile"
-
-CUPS_BACKEND="/usr/lib/cups/backend"
-CUPS_IPP_BACKEND="$CUPS_BACKEND/nxipp"
-CUPS_DEFAULT_SOCK="/var/run/cups/cups.sock"
-CUPS_ETC="/etc/cups/"
-
-# Path directives
-
-USER_FAKE_HOME="" #Calculated
-SET_LD_LIBRARY_PATH="1"
-
-DEFAULT_X_WM=""
-KILL_DEFAULT_X_WM="1"
-USER_X_STARTUP_SCRIPT=.Xclients
-DEFAULT_X_SESSION=/etc/X11/xdm/Xsession
-COMMAND_START_KDE=startkde
-COMMAND_START_GNOME=gnome-session
-COMMAND_START_CDE=cdwm
-COMMAND_XTERM=xterm
-COMMAND_XAUTH=/usr/X11R6/bin/xauth
-COMMAND_SMBMOUNT=smbmount
-COMMAND_SMBUMOUNT=smbumount
-COMMAND_NETCAT=netcat
-COMMAND_SSH=ssh
-COMMAND_SSH_KEYGEN=ssh-keygen
-COMMAND_CUPSD=/usr/sbin/cupsd
-COMMAND_MD5SUM=md5sum
-
-
-# Misc directives
-
-ENABLE_2_0_0_BACKEND=""
-ENABLE_AUTORECONNECT="0"
-ENABLE_AUTORECONNECT_BEFORE_140="1"
-EXPORT_USERIP="0"
-EXPORT_SESSIONID="1"
-NODE_AUTOSTART=""
-ENABLE_ROOTLESS_MODE="1"
-ENABLE_USESSION="0"
-COMMAND_SESSREG="sessreg"
-AGENT_EXTRA_OPTIONS_RFB=""
-AGENT_EXTRA_OPTIONS_RDP=""
-AGENT_EXTRA_OPTIONS_X=""
-AGENT_STARTUP_TIMEOUT="60"
-AGENT_FONT_SERVER=""
-PROXY_TCP_NODELAY=""
-PROXY_EXTRA_OPTIONS=""
-
-############################################################################
-# OS specific directives
-############################################################################
-
-OS="$( uname -sr )"
-
-case "$OS" in
-	"SunOS 5.10")
-		DEFAULT_X_WM=cdwm
-		DEFAULT_X_SESSION=/etc/X11/gdm/Xsession
-		COMMAND_XTERM=/usr/openwin/bin/xterm
-		COMMAND_XAUTH=/usr/openwin/bin/xauth
-		COMMAND_CUPSD=/opt/sfw/cups/sbin/cupsd
-		COMMAND_MD5SUM=gmd5sum
-		PATH=/usr/xpg4/bin:/usr/openwin/bin:$PATH
-		export PATH
-		;;
-esac
-
-# replace incompatible commands
-
-case "$OS" in
-       "SunOS 5.10")
-               function which()
-               {
-                       [ -e "$1" ] && echo $1 && return 0
-                       [ -z "$1" ] && return 1
-                       for i in  $(echo $PATH | tr ":" "\n"); do
-                               [ -e $i/$1 ] && echo $i/$1 && return 0
-                       done
-                       return 1
-               }
-
-	       function rev() {
-		       perl -lpe'$_ = reverse'
-	       }
-       ;;
-esac
-
-#########################################################################
-# Retested values
-#########################################################################
-
-if [ "$NXCONFIG_RETEST" = "1" ]
-then
-	{ ! which "$COMMAND_XAUTH" && which xauth; } >/dev/null 2>&1 && COMMAND_XAUTH=$(which xauth)
-	{ ! which "$COMMAND_NETCAT" && which nc; } >/dev/null 2>&1 && COMMAND_NETCAT=$(which nc)
-fi
-
-#########################################################################
-# node.conf file evaluation
-#########################################################################
-
-if [ -d $NX_ETC_DIR/node.conf.d ]
-then
-	for i in $NX_ETC_DIR/node.conf.d/*
-	do
-		[ -e $i ] && . $i
-	done
-fi
-
-[ -e $NX_ETC_DIR/node.conf ] && . $NX_ETC_DIR/node.conf
-[ "$USERCONF" = "yes" -a -e $NX_ETC_DIR/$USER.node.conf ] && . $NX_ETC_DIR/$USER.node.conf
-
-
-#########################################################################
-# Calculated values
-#########################################################################
-
-[ -z "$SESSION_USER_LIMIT" ] && SESSION_USER_LIMIT=$SESSION_LIMIT
-[ -z "$USER_FAKE_HOME" ] && USER_FAKE_HOME=$HOME
-
-[ -z "$AGENT_LIBRARY_PATH" ] && AGENT_LIBRARY_PATH=$PATH_LIB
-[ -z "$PROXY_LIBRARY_PATH" ] && PROXY_LIBRARY_PATH=$PATH_LIB
-[ -z "$APPLICATION_LIBRARY_PATH" ] && APPLICATION_LIBRARY_PATH=$PATH_LIB
-[ -z "$APPLICATION_LIBRARY_PRELOAD" ] && APPLICATION_LIBRARY_PRELOAD="$APPLICATION_LIBRARY_PATH/libX11.so.6.2:$APPLICATION_LIBRARY_PATH/libXext.so.6.4:$APPLICATION_LIBRARY_PATH/libXcomp.so:$APPLICATION_LIBRARY_PATH/libXcompext.so.1:$APPLICATION_LIBRARY_PATH/libXrender.so.1.2"
-if [ -z "$ENABLE_2_0_0_BACKEND" ]
-then
-	ENABLE_2_0_0_BACKEND="1"
-	[ -z "$(strings $PATH_BIN/nxagent | egrep 'NXAGENT - Version 2.[01].0')" ] && ENABLE_2_0_0_BACKEND="0"
-fi 
-
-[ -z "$KDE_PRINTRC" -a -n "$KDEHOME" ] && KDE_PRINTRC="$KDEHOME/share/config/kdeprintrc"
-[ -z "$KDE_PRINTRC" ] && KDE_PRINTRC=$(kde-config --localprefix)"/share/config/kdeprintrc"
-[ -z "$KDE_PRINTRC" -o ! -r "$KDE_PRINTRC" ] && KDE_PRINTRC="$HOME/.kde/share/config/kdeprintrc"
-
-#########################################################################
-# Support for --check
-#########################################################################
-
-if [ "$CHECK" = "yes" ]
-then
-	ERROR="no"
-	WARNING="no"
-	
-	# Internal Stuff
-	
-	[ ! -d "$PATH_BIN" ] && \
-		ERROR="yes" && echo "Error: Invalid value \"PATH_BIN=$PATH_BIN\""
-	# Check for NX agents ...
-	
-	[ ! -f "$PATH_BIN/nxagent" ] && \
-		ERROR="yes" && echo "Error: Could not find nxagent in $PATH_BIN. Please install some OSS components."
-		
-	[ ! -f "$PATH_BIN/nxdesktop" ] && \
-		WARNING="yes" && echo "Warning: Could not find nxdesktop in $PATH_BIN. RDP sessions won't work."
-		
-	[ ! -f "$PATH_BIN/nxviewer" ] && \
-		WARNING="yes" && echo "Warning: Could not find nxviewer in $PATH_BIN. VNC sessions won't work."
-
-	# Check for paths
-		
-	[ ! -d "$PATH_LIB" ] && \
-		ERROR="yes" && echo "Error: Invalid value \"PATH_LIB=$PATH_LIB\""
-	[ ! -d "$NX_ETC_DIR" ] && \
-		ERROR="yes" && echo "Error: Invalid value \"NX_ETC_DIR=$NX_ETC_DIR\""
-	[ ! -d "$NX_SESS_DIR" ] && \
-		ERROR="yes" && echo "Error: Invalid value \"NX_SESS_DIR=$NX_SESS_DIR\""
-	[ ! -d "$NX_HOME_DIR" ] && \
-		ERROR="yes" && echo "Error: Invalid value \"NX_HOME_DIR=$NX_HOME_DIR\""
-
-	[ ! -d "$AGENT_LIBRARY_PATH" ] && \
-		ERROR="yes" && echo "Error: Invalid value \"AGENT_LIBRARY_PATH=$AGENT_LIBRARY_PATH\""
-	[ ! -d "$PROXY_LIBRARY_PATH" ] && \
-		ERROR="yes" && echo "Error: Invalid value \"PROXY_LIBRARY_PATH=$PROXY_LIBRARY_PATH\""
-	[ ! -d "$APPLICATION_LIBRARY_PATH" ] && \
-		ERROR="yes" && echo "Error: Invalid value \"APPLICATION_LIBRARY_PATH=$APPLICATION_LIBRARY_PATH\""
-	
-	OLD_IFS=$IFS
-	IFS=":"
-	for LIBRARY in $APPLICATION_LIBRARY_PRELOAD; do
-		[ ! -e $LIBRARY ] && \
-			ERROR="yes" && echo "Error: Invalid value \"APPLICATION_LIBRARY_PRELOAD=$APPLICATION_LIBRARY_PRELOAD\"" && break ;
-	done
-	IFS=$OLD_IFS
-	
-	[ -z "$SSH_AUTHORIZED_KEYS" ] && \
-		ERROR="yes" && echo "Error: Invalid value \"SSH_AUTHORIZED_KEYS=$SSH_AUTHORIZED_KEYS\""
-	
-	
-	# General FreeNX directives
-	
-	[ -z "$SERVER_NAME" ] && \
-		ERROR="yes" && echo "Error: Invalid value \"SERVER_NAME=$SERVER_NAME\""
-	[ -z $(echo "$SSHD_PORT" | egrep "^[1-9][0-9]{0,4}$") ] && \
-		ERROR="yes" && echo "Error: Invalid value \"SSHD_PORT=$SSHD_PORT\""
-	
-	
-	# Authentication / Security directives
-	
-	[ -z $(echo "$ENABLE_PASSDB_AUTHENTICATION" | egrep "^[0|1]$") ] && \
-		ERROR="yes" && echo "Error: Invalid value \"ENABLE_PASSDB_AUTHENTICATION=$ENABLE_PASSDB_AUTHENTICATION\""
-	[ -z $(echo "$ENABLE_SSH_AUTHENTICATION" | egrep "^[0|1]$") ] && \
-		ERROR="yes" && echo "Error: Invalid value \"ENABLE_SSH_AUTHENTICATION=$ENABLE_SSH_AUTHENTICATION:\""
-	[ -z $(echo "$ENABLE_SU_AUTHENTICATION" | egrep "^[0|1]$") ] && \
-		ERROR="yes" && echo "Error: Invalid value \"ENABLE_SU_AUTHENTICATION=$NENABLE_SU_AUTHENTICATION\""
-	[ -z $(echo "$ENABLE_USER_DB" | egrep "^[0|1]$") ] && \
-		ERROR="yes" && echo "Error: Invalid value \"ENABLE_USER_DB=$ENABLE_USER_DB\""
-	
-	[ -z $(echo "$ENABLE_FORCE_ENCRYPTION" | egrep "^[0|1]$") ] && \
-		ERROR="yes" && echo "Error: Invalid value \"ENABLE_FORCE_ENCRYPTION=$ENABLE_FORCE_ENCRYPTION\""
-	[ -z $(echo "$SSHD_CHECK_IP" | egrep "^[0|1]$") ] && \
-		ERROR="yes" && echo "Error: Invalid value \"SSHD_CHECK_IP=$SSHD_CHECK_IP\""
-	
-	
-	# Restriction directives
-	
-	[ -z $(echo "$DISPLAY_BASE" | egrep "^[1-9][0-9]{0,4}$") ] && \
-		ERROR="yes" && echo "Error: Invalid value \"DISPLAY_BASE=$DISPLAY_BASE\""
-	[ -z $(echo "$SESSION_LIMIT" | egrep "^[1-9][0-9]{0,4}$") ] &&  \
-		ERROR="yes" && echo "Error: Invalid value \"SESSION_LIMIT=$SESSION_LIMIT\""
-	[ -z $(echo "$SESSION_USER_LIMIT" | egrep "^[1-9][0-9]{0,4}$") -o $SESSION_USER_LIMIT -gt $SESSION_LIMIT ] && \
-		ERROR="yes" && echo "Error: Invalid value \"SESSION_USER_LIMIT=$SESSION_USER_LIMIT\""
-	[ -z $(echo "$DISPLAY_LIMIT" | egrep "^[1-9][0-9]{0,4}$") -o $DISPLAY_LIMIT -lt $SESSION_LIMIT ] && \
-		ERROR="yes" && echo "Error: Invalid value \"DISPLAY_LIMIT=$DISPLAY_LIMIT\""
-	
-	OLD_IFS=$IFS
-	IFS=","
-	if [ "$ENABLE_PERSISTENT_SESSION" != "all" ]
-	then
-		for USERNAME in $ENABLE_PERSISTENT_SESSION; do
-			[ "${USERNAME:0:1}" != "@" ] && [ -z $(getent passwd $USERNAME) ] && \
-				ERROR="yes" && echo "Error: Invalid value \"ENABLE_PERSISTENT_SESSION=$ENABLE_PERSISTENT_SESSION\"" && break ;
-			[ "${USERNAME:0:1}" = "@" ] && [ -z $(getent group ${USERNAME:1}) ] && \
-				ERROR="yes" && echo "Error: Invalid value \"ENABLE_PERSISTENT_SESSION=$ENABLE_PERSISTENT_SESSION\"" && break ;
-		done
-	fi
-	for USERNAME in $DISABLE_PERSISTENT_SESSION; do
-		[ "${USERNAME:0:1}" != "@" ] && [ -z $(getent passwd $USERNAME) ] && \
-			ERROR="yes" && echo "Error: Invalid value \"DISABLE_PERSISTENT_SESSION=$DISABLE_PERSISTENT_SESSION\"" && break ;
-		[ "${USERNAME:0:1}" = "@" ] && [ -z $(getent group ${USERNAME:1}) ] && \
-			ERROR="yes" && echo "Error: Invalid value \"DISABLE_PERSISTENT_SESSION=$DISABLE_PERSISTENT_SESSION\"" && break ;
-	done
-	IFS=$OLD_IFS
-	
-	
-	# Logging directives
-	
-	[ -z $(echo "$NX_LOG_LEVEL" | egrep "^[0-7]$") ] && \
-		ERROR="yes" && echo "Error: Invalid value \"NX_LOG_LEVEL=$NX_LOG_LEVEL\""
-	[ "$NX_LOG_LEVEL" != "0" -a ! -e "$NX_LOGFILE" ] && \
-		WARNING="yes" && echo "Warning: Invalid value \"NX_LOGFILE=$NX_LOGFILE\"" \
-					  && echo "         No logfile will be kept."
-		# How do I check if another user might write to a file? ( -w checks only current user)
-	[ -z $(echo "$SESSION_LOG_CLEAN" | egrep "^[0|1]$") ] && \
-		ERROR="yes" && echo "Error: Invalid value \"SESSION_LOG_CLEAN=$SESSION_LOG_CLEAN\""
-	[ -z $(echo "$SESSION_HISTORY" | egrep "^-?[0-9]+$") ] && \
-		ERROR="yes" && echo "Error: Invalid value \"SESSION_HISTORY=$SESSION_HISTORY\""
-	
-	
-	# Forwarding directives
-	
-	[ -z $(echo "$ENABLE_SERVER_FORWARD" | egrep "^[0|1]$") ] && \
-		ERROR="yes" && echo "Error: Invalid value \"ENABLE_SERVER_FORWARD=$ENABLE_SERVER_FORWARD\""
-	[ "$ENABLE_SERVER_FORWARD" = "1" -a -z "$SERVER_FORWARD_HOST" ] && \
-		ERROR="yes" && echo "Error: Invalid value \"SERVER_FORWARD_HOST=$SERVER_FORWARD_HOST\"" 
-		# Any ideas on how I can check for a VALID host is velcome!
-		# In my private scripts I use 'resolveip -q' and check if output conforms to [0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}, 
-		# but resolveip is part of mysql, and I don't think I should add that dependancy...
-	[ "$ENABLE_SERVER_FORWARD" = "1" -a -z $(echo "$SERVER_FORWARD_PORT" | egrep "^[1-9][0-9]{0,4}$") ] && \
-		ERROR="yes" && echo "Error: Invalid value \"SERVER_FORWARD_PORT=$SERVER_FORWARD_PORT\""
-	[ "$ENABLE_SERVER_FORWARD" = "1" -a ! -e "$SERVER_FORWARD_KEY" ] && \
-		ERROR="yes" && echo "Error: Invalid value \"SERVER_FORWARD_KEY=$SERVER_FORWARD_KEY\""
-	
-	[ -z $(echo "$ENABLE_NOMACHINE_FORWARD_PORT" | egrep "^[0|1]$") ] && \
-		ERROR="yes" && echo "Error: Invalid value \"ENABLE_NOMACHINE_FORWARD_PORT=$ENABLE_NOMACHINE_FORWARD_PORT\""
-	[ "$ENABLE_NOMACHINE_FORWARD_PORT" = "1" ] && ! which "$NOMACHINE_SERVER" >/dev/null 2>&1 && \
-		ERROR="yes" && echo "Error: Invalid value \"NOMACHINE_SERVER=$NOMACHINE_SERVER\""
-	[ "$ENABLE_NOMACHINE_FORWARD_PORT" = "1" -a -z $(echo "$NOMACHINE_FORWARD_PORT" | egrep "^[1-9][0-9]{0,4}$") ] && \
-		ERROR="yes" && echo "Error: Invalid value \"NOMACHINE_FORWARD_PORT=$NOMACHINE_FORWARD_PORT\""
-	
-	# Services directives
-	
-	[ -z $(echo "$ENABLE_ESD_PRELOAD" | egrep "^[0|1]$") ] && \
-		ERROR="yes" && echo "Error: Invalid value \"ENABLE_ESD_PRELOAD=$ENABLE_ESD_PRELOAD\""
-	[ "$ENABLE_ESD_PRELOAD" = "1" ] && ! which "$ESD_BIN_PRELOAD" >/dev/null 2>&1 && \
-		WARNING="yes" && echo "Warning: Invalid value \"ESD_BIN_PRELOAD=$ESD_BIN_PRELOAD\"" \
-					  && echo "         No esd preload will be performed."
-	
-	[ -z $(echo "$ENABLE_ARTSD_PRELOAD" | egrep "^[0|1]$") ] && \
-		ERROR="yes" && echo "Error: Invalid value \"ENABLE_ARTSD_PRELOAD=$ENABLE_ARTSD_PRELOAD\""
-	[ "$ARTSD_BIN_PRELOAD" = "1" ] && ! which "$ARTSD_BIN_PRELOAD" >/dev/null 2>&1 && \
-		WARNING="yes" && echo "Warning: Invalid value \"ARTSD_BIN_PRELOAD=$ARTSD_BIN_PRELOAD\"" \
-					  && echo "         No arts preload will be performed."
-	
-	[ -z $(echo "$ENABLE_KDE_CUPS" | egrep "^[0|1]$") ] && \
-		ERROR="yes" && echo "Error: Invalid value \"ENABLE_KDE_CUPS=$ENABLE_KDE_CUPS\""
-	[ "$ENABLE_KDE_CUPS" = "1" -a ! -e "$KDE_PRINTRC" ] && \
-		ERROR="yes" && echo "Error: Invalid value \"KDE_PRINTRC=$KDE_PRINTRC\""
-
-
-	[ "$ENABLE_FOOMATIC" = "1" ] && ! which "$COMMAND_FOOMATIC" >/dev/null 2>&1 && \
-		WARNING="yes" && echo "Warning: Invalid value \"COMMAND_FOOMATIC=$COMMAND_FOOMATIC\"" \
-					  && echo "         Users will not be able to use foomatic."
-	[ ! -x "$CUPS_IPP_BACKEND" ] && \
-		WARNING="yes" && echo "Warning: \"$CUPS_IPP_BACKEND\" is not executable." \
-					  && echo "         Users will not be able to enable printing."
-	[ ! -x "$CUPS_BACKEND/smb" ] && \
-		WARNING="yes" && echo "Warning: \"$CUPS_BACKEND/smb\" is not executable." \
-					  && echo "         Users will not be able to enable printing."
-	[ ! -e "$CUPS_ETC/mime.types" -o ! -e "$CUPS_ETC/mime.convs" ] && \
-		WARNING="yes" && echo "Warning: Invalid value \"CUPS_ETC=$CUPS_ETC\"" \
-					  && echo "         Users will not be able to enable printing."
-	
-	# Path directives
-	
-	[ ! -d "$USER_FAKE_HOME" ] && \
-		ERROR="yes" && echo "Error: Invalid value \"USER_FAKE_HOME=$USER_FAKE_HOME\""
-	[ -z $(echo "$SET_LD_LIBRARY_PATH" | egrep "^[0|1]$") ] && \
-		ERROR="yes" && echo "Error: Invalid value \"SET_LD_LIBRARY_PATH=$SET_LD_LIBRARY_PATH\""
-	
-	[ "$DEFAULT_X_WM" != "" ] && ! which "$DEFAULT_X_WM" >/dev/null 2>&1 && \
-		ERROR="yes" && echo "Error: Invalid value \"DEFAULT_X_WM=$DEFAULT_X_WM\""
-	[ "$DEFAULT_X_WM" != "" -a  -z $(echo "$KILL_DEFAULT_X_WM" | egrep "^[0|1]$") ] && \
-		ERROR="yes" && echo "Error: Invalid value \"KILL_DEFAULT_X_WM=$KILL_DEFAULT_X_WM\""
-	[ -z "$USER_X_STARTUP_SCRIPT" ] && \
-		ERROR="yes" && echo "Error: Invalid value \"USER_X_STARTUP_SCRIPT=$USER_X_STARTUP_SCRIPT\""
-	! which "$DEFAULT_X_SESSION" >/dev/null 2>&1 && \
-		WARNING="yes" && echo "Warning: Invalid value \"DEFAULT_X_SESSION=$DEFAULT_X_SESSION\"" \
-					  && echo "         Users might not be able to request a default X session."
-	! which "$COMMAND_START_KDE" >/dev/null 2>&1 && \
-		WARNING="yes" && echo "Warning: Invalid value \"COMMAND_START_KDE=$COMMAND_START_KDE\"" \
-					  && echo "         Users will not be able to request a KDE session."
-	! which "$COMMAND_START_GNOME" >/dev/null 2>&1 && \
-		WARNING="yes" && echo "Warning: Invalid value \"COMMAND_START_GNOME=$COMMAND_START_GNOME\"" \
-					  && echo "         Users will not be able to request a Gnome session."
-	! which "$COMMAND_START_CDE" >/dev/null 2>&1 && \
-		WARNING="yes" && echo "Warning: Invalid value \"COMMAND_START_CDE=$COMMAND_START_CDE\"" \
-					  && echo "         Users will not be able to request a CDE session."
-	! which "$COMMAND_XTERM" >/dev/null 2>&1 && \
-		WARNING="yes" && echo "Warning: Invalid value \"COMMAND_XTERM=$COMMAND_XTERM\"" \
-					  && echo "         Users will not be able to request an xterm session."
-	! which "$COMMAND_XAUTH" >/dev/null 2>&1 && \
-		ERROR="yes" && echo "Error: Invalid value \"COMMAND_XAUTH=$COMMAND_XAUTH\""
-	! which "$COMMAND_SMBMOUNT" >/dev/null 2>&1 && \
-		WARNING="yes" && echo "Warning: Invalid value \"COMMAND_SMBMOUNT=$COMMAND_SMBMOUNT\". You'll not be able to use SAMBA. "
-	! which "$COMMAND_SMBUMOUNT" >/dev/null 2>&1 && \
-		WARNING="yes" && echo "Warning: Invalid value \"COMMAND_SMBUMOUNT=$COMMAND_SMBUMOUNT\". You'll not be able to use SAMBA."
-	! which "$COMMAND_NETCAT" >/dev/null 2>&1 && \
-		ERROR="yes" && echo "Error: Invalid value \"COMMAND_NETCAT=$COMMAND_NETCAT\""
-	! which "$COMMAND_SSH" >/dev/null 2>&1 && \
-		ERROR="yes" && echo "Error: Invalid value \"COMMAND_SSH=$COMMAND_SSH\""
-	! which "$COMMAND_SSH_KEYGEN" >/dev/null 2>&1 && \
-		ERROR="yes" && echo "Error: Invalid value \"COMMAND_SSH_KEYGEN=$COMMAND_SSH_KEYGEN\""
-	! which "$COMMAND_CUPSD" >/dev/null 2>&1 && \
-		WARNING="yes" && echo "Warning: Invalid value \"COMMAND_CUPSD=$COMMAND_CUPSD\"" \
-					  && echo "         Users will not be able to enable printing."
-	[ -z "$(strings $COMMAND_CUPSD | egrep 'CUPS\/1.2')" ] && \
-		WARNING="yes" && echo "Warning: Invalid cupsd version of \"$COMMAND_CUPSD\". Need version 1.2." \
-					  && echo "         Users will not be able to enable printing."
-	! which "$COMMAND_MD5SUM" >/dev/null 2>&1 && \
-		ERROR="yes" && echo "Error: Invalid value \"COMMAND_MD5SUM=$COMMAND_MD5SUM\""
-
-	# Check for expect
-	COMMAND_EXPECT=$(head -n1 $PATH_BIN/nxnode-login | cut -d'!' -f2)
-	! which "$COMMAND_EXPECT" >/dev/null 2>&1 && \
-		ERROR="yes" && echo "Error: expect necessary for $PATH_BIN/nxnode-login could not be found in '$COMMAND_EXPECT'. Please install it or change nxnode-login accordingly."
-
-	# Misc directives
-	
-	[ -z $(echo "$ENABLE_AUTORECONNECT" | egrep "^[0|1]$") ] && \
-		ERROR="yes" && echo "Error: Invalid value \"ENABLE_AUTORECONNECT=$ENABLE_AUTORECONNECT\""
-	[ -z $(echo "$ENABLE_AUTORECONNECT_BEFORE_140" | egrep "^[0|1]$") ] && \
-		ERROR="yes" && echo "Error: Invalid value \"ENABLE_AUTORECONNECT_BEFORE_140=$ENABLE_AUTORECONNECT_BEFORE_140\""
-	
-	[ -z $(echo "$EXPORT_USERIP" | egrep "^[0|1]$") ] && \
-		ERROR="yes" && echo "Error: Invalid value \"EXPORT_USERIP=$EXPORT_USERIP\""
-	[ -z $(echo "$EXPORT_SESSIONID" | egrep "^[0|1]$") ] && \
-		ERROR="yes" && echo "Error: Invalid value \"EXPORT_SESSIONID=$EXPORT_SESSIONID\""
-	[ -n "$NODE_AUTOSTART" ] && ! which "$NODE_AUTOSTART" >/dev/null 2>&1 && \
-		WARNING="yes" && echo "Warning: Invalid value \"NODE_AUTOSTART=$NODE_AUTOSTART\"" \
-					  && echo "         No autostart will be performed."
-
-	[ -z $(echo "$ENABLE_ROOTLESS_MODE" | egrep "^[0|1]$") ] && \
-		ERROR="yes" && echo "Error: Invalid value \"ENABLE_ROOTLESS_MODE=$ENABLE_ROOTLESS_MODE\""
-
-	[ -z "$(strings $PATH_BIN/nxagent | egrep 'NXAGENT - Version 1.5.0|NXAGENT - Version 2.[01].0')" ] && \
-		ERROR="yes" && echo "Error: Could not find 1.5.0 or 2.[01].0 version string in nxagent. NX 1.5.0 or 2.[01].0 backend is needed for this version of FreeNX."
-		
-	[ -z $(echo "$ENABLE_USESSION" | egrep "^[0|1]$") ] && \
-		ERROR="yes" && echo "Error: Invalid value \"ENABLE_USESSION=$ENABLE_USESSION\""
-	[ "$ENABLE_USESSION" = "1" ] && ! which "$COMMAND_SESSREG" >/dev/null 2>&1 && \
-		WARNING="yes" && echo "Warning: Invalid value \"COMMAND_SESSREG=$COMMAND_SESSREG\"" \
-					  && echo "         Logged in users will not be registered with sessreg."
-	
-	#AGENT_EXTRA_OPTIONS_RFB=""
-	#AGENT_EXTRA_OPTIONS_RDP=""
-	#AGENT_EXTRA_OPTIONS_X=""
-	#PROXY_EXTRA_OPTIONS=""
-		#Can these be checked???
-	
-	#AGENT_FONT_SERVER=""
-		#Any ideas on how I can check for a VALID host is velcome!
-	
-	#[ -z $(echo "$PROXY_TCP_NODELAY" | egrep "^[|0|1]$") ] && \
-	#	ERROR="yes" && echo "Error: Invalid value \"PROXY_TCP_NODELAY=$PROXY_TCP_NODELAY\""
-	
-	
-	if [ "$ERROR" = "yes" ]
-	then
-		echo
-		echo "  Errors occured during config check."
-		echo "  Please correct the configuration file."
-		echo
-		[ "$NXLCFG_IGNORE_ERRORS" = "no" ] && exit 1 || exit 0
-	elif [ "$WARNING" = "yes" ]
-	then
-		echo
-		echo "  Warnings occured during config check."
-		echo "  To enable these features please correct the configuration file."
-		echo
-	fi
-fi

Copied: freenx-server/tags/FreeNX-0.7.1/nxloadconfig (from rev 402, freenx-server/trunk/nxloadconfig)

Deleted: freenx-server/tags/FreeNX-0.7.1/nxnode
===================================================================
--- freenx-server/trunk/nxnode	2007-05-29 15:27:07 UTC (rev 334)
+++ freenx-server/tags/FreeNX-0.7.1/nxnode	2007-10-14 22:25:14 UTC (rev 405)
@@ -1,1356 +0,0 @@
-#!/bin/bash
-
-# Free implementation of nxserver components
-#
-# nxnode does accept (for now):
-# 
-#	--startsession
-#	--terminate
-#	--smbmount 
-#		(smbmount is not implemented yet)
-#
-# Copyright (c) 2004 by Fabian Franz.
-#
-# License: GNU GPL, version 2
-#
-# SVN: $Id$
-#
-# 21.06.2004: - Full reconnection support
-
-# Read the config file
-. $(PATH=$(cd $(dirname $0) && pwd):$PATH which nxloadconfig) --userconf
-
-#
-# -----------------------------------------------------------------------------
-# Startup of nxnode
-# -----------------------------------------------------------------------------
-#
-
-echo "NX> 1000 NXNODE - Version $NX_VERSION $NX_LICENSE"
-
-if [ "$1" != "--check" -a "$1" != "--setkey" -a "$1" != "--agent" -a "$1" != "--slave" ]
-then 
-	read CMDLINE
-
-	CMDLINE="a=b&$CMDLINE"
-fi
-
-#
-# -----------------------------------------------------------------------------
-# Various helper functions
-# -----------------------------------------------------------------------------
-#
-
-stringinstring()
-{
-	case "$2" in
-		*$1*)
-			return 0
-		;;
-	esac
-	
-	return 1
-}
-
-getparam()
-{
-	stringinstring "&$1=" "$CMDLINE" || return 1
-	
-	echo "$CMDLINE" |  tr "&" "\n" | egrep "^"$1"=" | awk -F= '{ VAL=$2 } END { print VAL }'
-	
-	return 0
-}
-
-find_app()
-{
-	set -- $*
-	which $1 2>/dev/null
-}
-
-getparam_sessionid()
-{
-	sessionid=$(getparam sessionid)
-	
-	[ -n "$sessionid" ] || sessionid=$(getparam session_id)
-	if [ -z "$sessionid" ]
-	then
-		echo "NX> 500 Error: Fatal - Missing parameter session id." 1>&2
-		exit 1
-	fi
-	
-	echo $sessionid
-}
-
-#
-# -----------------------------------------------------------------------------
-# Node functions module
-# -----------------------------------------------------------------------------
-#
-
-#
-# node_terminate_agent <session id>
-#
-
-node_terminate_agent()
-{
-	NODE_AGENT_PID=$(cat "$USER_FAKE_HOME/.nx/C-$1/pids/agent" 2>/dev/null)
-	[ -n "$NODE_AGENT_PID" ] && kill $NODE_AGENT_PID 2>/dev/null
-}
-
-#
-# node_terminate_session <session id>
-#
-#	Used local vars: $virtualdesktop, $rootless
-#
-#	Used config vars: $COMMAND_XAUTH, $SESSION_LOG_CLEAN
-#
-
-node_terminate_session()
-{
-	#
-	# Cleanup session
-	#
-
-	[ -d "$USER_FAKE_HOME/.nx/C-$1/" ] || return
-
-	# Kill nxagent
-	
-	NODE_AGENT_PID=$(cat "$USER_FAKE_HOME/.nx/C-$1/pids/agent" 2>/dev/null)
-	
-	if [ -n "$NODE_AGENT_PID" ]
-	then
-		kill $NODE_AGENT_PID 2>/dev/null
-		if ! [ "$virtualdesktop" = "0" -a "$rootless" != "1" ]
-		then
-			sleep 1
-			kill -0 $NODE_AGENT_PID 2>/dev/null && kill -9 $NODE_AGENT_PID 2>/dev/null
-		fi
-	fi
-
-	# Kill tail process
-	
-	NODE_TAIL_PID=$(cat "$USER_FAKE_HOME/.nx/C-$sess_id/pids/tail" 2>/dev/null)
-	[ -n "$NODE_TAIL_PID" ] && kill $NODE_TAIL_PID 2>/dev/null
-
-	# Remove display information
-	
-	NODE_DISPLAY=$(echo $1 | rev | cut -d"-" -f2 | rev)
-	rm -f /tmp/.X$NODE_DISPLAY-lock
-	rm -f /tmp/.X11-unix/X$NODE_DISPLAY
-	
-	# Remove magic cookie information
-	
-	$COMMAND_XAUTH -v source "$USER_FAKE_HOME/.nx/C-$1/scripts/authority" >/dev/null 2>&1
-
-	# Preserve or remove session information
-	
-	[ "$SESSION_LOG_CLEAN" = "1" ] && rm -rf "$USER_FAKE_HOME/.nx/C-$1/"
-	
-	[ "$SESSION_LOG_CLEAN" = "0" -a "$2" = "failed" ] && mv "$USER_FAKE_HOME/.nx/C-$1/" "$USER_FAKE_HOME/.nx/F-C-$1/"
-	[ "$SESSION_LOG_CLEAN" = "0" -a "$2" != "failed" ] && mv "$USER_FAKE_HOME/.nx/C-$1/" "$USER_FAKE_HOME/.nx/T-C-$1/"
-}
-
-#
-# node_fail_restore_session <session id>
-#
-
-# TODO: Kill still running tail -f process.
-
-node_fail_restore_session()
-{
-	echo "NX> 1004 Error: Could not resume session. nxagent process could not be found."
-	
-	NODE_TAIL_PID=$(cat "$USER_FAKE_HOME/.nx/C-$sess_id/pids/tail" 2>/dev/null)
-	[ -n "$NODE_TAIL_PID" ] && kill $NODE_TAIL_PID
-	[ -n "$NODE_TAIL_PID" ] && echo "NX 1004> kill $NODE_TAIL_PID"
-	
-	node_terminate_session "$1" "failed"
-	exit 1
-}
-
-#
-# node_suspend_session <session id>
-#
-
-node_suspend_session()
-{
-	NODE_AGENT_PID=$(cat "$USER_FAKE_HOME/.nx/C-$1/pids/agent" 2>/dev/null)
-
-	if [ -n "$NODE_AGENT_PID" ]
-	then
-		kill -0 $NODE_AGENT_PID || return 1
-		kill -HUP $NODE_AGENT_PID && return 0
-	fi
-
-	return 1
-}
-
-#
-# node_find_application <type>
-#
-#	Used config vars: $COMMAND_START_KDE, $COMMAND_START_GNOME,
-#			  $COMMAND_START_CDE, $COMMAND_XTERM, $USER_X_STARTUP_SCRIPT,
-#			  $DEFAULT_X_SESSION
-
-node_find_application()
-{
-	NODE_STARTX=""
-
-	case $1 in
-		unix-kde)
-			NODE_STARTX=$COMMAND_START_KDE
-		;;
-		unix-gnome)
-			NODE_STARTX=$COMMAND_START_GNOME
-		;;
-		unix-cde)
-			NODE_STARTX=$COMMAND_START_CDE
-		;;
-		unix-application)
-			[ "$application" = "xterm" ] && application="$COMMAND_XTERM"
-			NODE_STARTX=$application
-		;;
-		unix-default)
-			if [ -x "$HOME/$USER_X_STARTUP_SCRIPT" ]; then
-				NODE_STARTX="$HOME/$USER_X_STARTUP_SCRIPT"
-			elif which "$DEFAULT_X_SESSION" >/dev/null 2>&1 ; then
-				NODE_STARTX="$DEFAULT_X_SESSION"
-			fi
-		;;
-	esac
-
-	echo "$NODE_STARTX"
-}
-
-#
-# node_start_applications
-#
-#	Used local vars: $type, $application, $sess_id, $mediahelper,
-#		         $virtualdesktop, $rootless, $display
-#
-#	Used config vars: <several>
-#
-
-node_start_applications()
-{
-	# close input and output file descriptors
-	exec 0<&-
-	exec 1>&-
-	exec 2>&-
-
-	#
-	# Prepare application startup
-	#
-	
-	. /etc/profile
-	[ -f ~/.bash_profile ] && . ~/.bash_profile
-
-	mkdir -p "$USER_FAKE_HOME/.nx/C-$sess_id/pids/"
-
-	#
-	# Which application do we start?
-	#
-
-	NODE_APPLICATION=$(node_find_application "$type")
-	
-	# For rdesktop/VNC, there is no application to start
-	[ -n "$NODE_APPLICATION" ] || return
-
-	#
-	# Check if we want to use a mediahelper
-	#
-
-	if [ "$mediahelper" = "esd" ]
-	then
-		# Set Espeaker variable
-		let ESPEAKER=$display+7000
-		export ESPEAKER="127.0.0.1:$ESPEAKER"
-		
-		# Do not spawn new ESD daemons
-		export ESD_NO_SPAWN="yes"
-			
-		# Check for config file directive
-		if [ "$ENABLE_ESD_PRELOAD" = "1" -a -x "$(find_app $ESD_BIN_PRELOAD)" ]
-		then
-			NODE_APPLICATION="$ESD_BIN_PRELOAD $NODE_APPLICATION"
-			echo "Info: NXNODE - Using $ESD_BIN_PRELOAD wrapper script." >> "$USER_FAKE_HOME/.nx/C-$sess_id/session"
-		fi
-	elif [ "$mediahelper" = "artsd" ]
-	then
-		# Overwrite users mcoprc
-		echo -n "GlobalComm=Arts::X11GlobalComm" > $HOME/.mcoprc
-		if [ "$ENABLE_ARTSD_PRELOAD" = "1" -a -x "$(find_app $ARTSD_BIN_PRELOAD)" ]
-		then
-			NODE_APPLICATION="$ARTSD_BIN_PRELOAD $NODE_APPLICATION"
-			echo "Info: NXNODE - Using $ARTSD_BIN_PRELOAD wrapper script." >> "$USER_FAKE_HOME/.nx/C-$sess_id/session"
-		fi
-	fi
-
-	[ "$cups" = "1" -a "$ENABLE_CUPS_SERVER_EXPORT" = "1" ] && export CUPS_SERVER="$USER_FAKE_HOME/.nx/C-$sess_id/cups/cups.sock"
-
-	#
-	# Do we need to PRELOAD any libraries?
-	#	
-
-	[ "$virtualdesktop" = "0" -a "$rootless" != "1" ] && export LD_PRELOAD="$APPLICATION_LIBRARY_PRELOAD:$LD_PRELOAD"
-
-	#
-	# Should we start a window manager?
-	#
-	
-	if [ "$virtualdesktop" = "1" -a "$type" = "unix-application" -a "$DEFAULT_X_WM" != "" -a -x "$(find_app $DEFAULT_X_WM)" ]
-	then
-		DISPLAY=unix:$display $DEFAULT_X_WM >>"$USER_FAKE_HOME/.nx/C-$sess_id/session" 2>&1 &
-		NODE_WM_PID=$!
-	fi
-
-	#
-	# Startup the application
-	#
-	
-	DISPLAY=unix:$display $NODE_APPLICATION >>"$USER_FAKE_HOME/.nx/C-$sess_id/session" 2>&1 &
-	NODE_APP_PID=$!
-	
-	mkdir -p "$USER_FAKE_HOME/.nx/C-$sess_id/pids/"
-	echo "$NODE_APP_PID" >"$USER_FAKE_HOME/.nx/C-$sess_id/pids/applications"
-	wait $NODE_APP_PID
-
-	#
-	# Kill or wait for the started window manager
-	#	
-	
-	if [ -n "$NODE_WM_PID" ]
-	then
-		# kill the WM after application is finished?
-		[ "$KILL_DEFAULT_X_WM" = "1" ] && kill $NODE_WM_PID 2>/dev/null
-		# or just wait until it finishes?
-		[ "$KILL_DEFAULT_X_WM" = "1" ] || wait $NODE_WM_PID
-	fi
-	rm -f "$USER_FAKE_HOME/.nx/C-$sess_id/pids/applications"
-
-	# Do not terminate agent in case of rootless agent mode.
-	# The agent times out after a while by itself anyway.
-	
-	[ "$virtualdesktop" = "1" -o "$rootless" != "1" ] && node_terminate_agent "$sess_id"
-}
-
-#
-# node_persistent_session
-#
-#	Is the user allowed to run a persistent session?
-#
-
-node_agent_persistent_session()
-{
-	P="-nopersistent"
-	OLD_IFS=$IFS
-	IFS=","
-	[ "$ENABLE_PERSISTENT_SESSION" = "all" ] && P="-persistent"
-	[ "$ENABLE_PERSISTENT_SESSION" = "all" ] || for USERNAME in $ENABLE_PERSISTENT_SESSION; do
-		[ "${USERNAME:0:1}" != "@" ] && [ "$USER" = "$USERNAME" ] && P="-persistent" && break ;
-		[ "${USERNAME:0:1}" = "@" ] && [ -z $(groups "$USER" | egrep "^${USERNAME:1}:") ] && P="-persistent" && break ;
-	done
-	for USERNAME in $DISABLE_PERSISTENT_SESSION; do
-		[ "${USERNAME:0:1}" != "@" ] && [ "$USER" = "$USERNAME" ] && P="-nopersistent" && break ;
-		[ "${USERNAME:0:1}" = "@" ] && [ -z $(groups "$USER" | egrep "^${USERNAME:1}:") ] && P="-nopersistent" && break ;
-	done
-	IFS=$OLD_IFS
-	echo "$P"
-}
-
-#
-# node_start_agent
-#
-
-node_start_agent()
-{
-	# Ok, now we do some wicked fd magic.
-	#
-	# first part:
-	#	
-	# nxagent's fd #2 -> fd #3
-	
-	# second part:
-	#
-	# fd #1 -> #4
-	# fd #3 -> #1
-	# tee | node_start_monitor
-
-	# third part
-	# fd #4 -> #1
-
-	# => all output of nxagent goes to tee | node_start_monitor, while
-	#    leaving all other output flow through like normally.
-	
-	# preparations
-	exec 3>&2
-	exec 4>&1
-
-	{
-	
-	{
-
-	#
-	# Setup environment
-	#
-
-	export DISPLAY="nx/nx,options=$USER_FAKE_HOME/.nx/C-$sess_id/options:$display"
-	export XAUTHORITY="$USER_FAKE_HOME/.nx/C-$sess_id/authority"
-	export HOME="$USER_FAKE_HOME"
-
-	#
-	# Setup optional parameters for nxagent
-	#
-
-	# keyboard
-	
-	K=""
-	# backwards compatibility
-	[ -n "$keyboard" ] && K="-keyboard $keyboard"
-	[ -n "$kbtype" ] && K="-kbtype $kbtype"
-
-	# backingstore
-	
-	B=""
-	if [ -n "$backingstore" -a "$ENABLE_2_0_0_BACKEND" != "1" ]
-	then
-		[ "$backingstore" != 1 ] && B="-bs $backingstore"
-		[ "$backingstore" = 1 ] && B="+bs"
-	fi
-
-	# geometry
-	
-	G=""
-	[ -n "$geometry" ] && G="-geometry $geometry"
-
-	# type of session
-	
-	R="-D"
-	[ "$rootless" = "1" ] && R="-R"
-
-	# Setup fullscreen parameters
-	
-	vncfullscreen=""
-	[ "$geometry" = "fullscreen" -a "$type" = "vnc" ] && vncfullscreen="-fullscreen" && G=""
-	
-	[ "$geometry" = "fullscreen" -a "$type" = "windows" ] && G="-geometry `echo $screeninfo | cut -d"x" -f1,2`"
-
-	#
-	# Start the wanted nxagent
-	#
-
-	if [ "$type" = "windows" ]
-	then
-		# nxdesktop session (Windows RDP)
-
-		[ "$SET_LD_LIBRARY_PATH" = "1" ] && export LD_LIBRARY_PATH="$AGENT_LIBRARY_PATH:$LD_LIBRARY_PATH"
-		# Setup optional parameters
-		
-		U=""
-		P=""
-		D=""
-		[ -n "$agent_user" ] && U="-u $agent_user"
-		[ -n "$agent_password" ] && P="-p -"
-		[ -n "$agent_domain" ] && D="-d $agent_domain"
-
-		# Start the agent
-		
-		echo "$agent_password" | $PATH_BIN/nxdesktop -name "NX - $user@$SERVER_NAME:$display - $session (GPL Edition)" -option "$USER_FAKE_HOME/.nx/C-$sess_id/options" $K $G $U $P $D $agent_server $AGENT_EXTRA_OPTIONS_RDP 2>&3 &
-
-	elif [ "$type" = "vnc" ]
-	then
-		# nxviewer session (VNC RFP)
-		
-		[ "$SET_LD_LIBRARY_PATH" = "1" ] && export LD_LIBRARY_PATH="$AGENT_LIBRARY_PATH:$LD_LIBRARY_PATH"
-		# Setup password
-		
-		mkdir -p "$USER_FAKE_HOME/.nx/C-$sess_id/scripts/"
-		echo "$agent_password" | $PATH_BIN/nxpasswd "$USER_FAKE_HOME/.nx/C-$sess_id/scripts/.passwd" doit
-		
-		# Start the agent
-		
-		$PATH_BIN/nxviewer -encodings tight hextile copyrect raw -passwd $USER_FAKE_HOME/.nx/C-$sess_id/scripts/.passwd -name "NX - $user@$SERVER_NAME:$display - $session (GPL Edition)" -option "$USER_FAKE_HOME/.nx/C-$sess_id/options" $vncfullscreen $G $K $agent_server $AGENT_EXTRA_OPTIONS_RFB 2>&3 &
-
-	elif [ "$R" = "-R" -a "$rootless" != "1" ]
-	then
-		# nxproxy single application mode session
-		[ "$SET_LD_LIBRARY_PATH" = "1" ] && export LD_LIBRARY_PATH="$PROXY_LIBRARY_PATH:$LD_LIBRARY_PATH"
-		$PATH_BIN/nxproxy -C :$display $PROXY_EXTRA_OPTIONS 2>&3 &
-	else
-		# nxagent session (X11)
-		[ "$SET_LD_LIBRARY_PATH" = "1" ] && export LD_LIBRARY_PATH="$AGENT_LIBRARY_PATH:$LD_LIBRARY_PATH"
-		
-		# Setup optional parameters
-
-		P=$(node_agent_persistent_session)
-		FP=""
-		[ -n "$AGENT_FONT_SERVER" ] && FP="-fp $AGENT_FONT_SERVER"
-		
-		# Start the agent
-		
-		PATH="$PATH_BIN:$PATH" $PATH_BIN/nxagent $P $R -name "NX - $user@$SERVER_NAME:$display - $session (GPL Edition)" -option "$USER_FAKE_HOME/.nx/C-$sess_id/options" $K $G $B $FP $AGENT_EXTRA_OPTIONS_X :$display 2>&3 &
-	fi
-	
-	#
-	# Wait for the agent
-	#
-	
-	NODE_AGENT_PID=$!
-	mkdir -p "$USER_FAKE_HOME/.nx/C-$sess_id/pids/"
-	echo "$NODE_AGENT_PID" >"$USER_FAKE_HOME/.nx/C-$sess_id/pids/agent"
-	wait $NODE_AGENT_PID
-
-	NODE_AGENT_EXIT_STATUS=$?
-	NODE_FAILED=""
-	if [ $NODE_AGENT_EXIT_STATUS -ne 0 ]
-	then
-		echo "NX> 1004 Error: NX Agent exited with exit status 1. To troubleshoot set SESSION_LOG_CLEAN=0 in node.conf and investigate \"$USER_FAKE_HOME/.nx/F-C-$sess_id/session\". You might also want to try: ssh -X myserver; $PATH_BIN/nxnode --agent to test the basic functionality. Session log follows:"
-		cat "$USER_FAKE_HOME/.nx/C-$sess_id/session" 1>&2
-		NODE_FAILED="failed"
-	fi
-	echo "NX> 1006 Session status: closed"
-	
-	#
-	# Cleanup session information
-	#	
-	
-	rm -f "$USER_FAKE_HOME/.nx/C-$sess_id/pids/agent"
-	node_terminate_session "$sess_id" "$NODE_FAILED"
-	
-	# remove possible leftovers of nxagent
-	rm -f /tmp/.X$display-lock
-	rm -f /tmp/.X11-unix/X$display
-	} 3>&1 1>&4 | tee "$USER_FAKE_HOME/.nx/C-$sess_id/session" | node_start_monitor; } 4>&1
-}
-
-#
-# node_cupsd_stop
-#
-#	Used local vars: $sess_id
-#
-
-node_cupsd_stop()
-{
-	#
-	# Cleanup userspace cups daemon	
-	#
-	
-	[ -e "$USER_FAKE_HOME/.nx/C-$sess_id/pids/cupsd" ] || return
-	
-	NODE_CUPSD_PID=$(cat "$USER_FAKE_HOME/.nx/C-$sess_id/pids/cupsd")
-	
-	# Check for a running userspace cupsd, look if its still active 
-	# and kill it if so
-	( [ -n "$NODE_CUPSD_PID" ] && kill -0 $NODE_CUPSD_PID && kill $NODE_CUPSD_PID && sleep 2 && kill -0 $NODE_CUPSD_PID && kill -9 $NODE_CUPSD_PID ) 2>/dev/null
-	
-	# delete pid file
-	rm -f "$USER_FAKE_HOME/.nx/C-$sess_id/pids/cupsd"
-	
-	# remove all printers
-	echo >"$USER_FAKE_HOME/.nx/C-$sess_id/cups/printers.conf"
-}
-
-#
-# node_cupsd_setup
-#
-#	Used local vars: $sess_id, $display
-#
-
-node_cupsd_setup()
-{
-	let NODE_CUPSD_PORT=$display+9000 # offset 9000 for userspace cupsd's
-	export NODE_CUPSD_PORT
-	
-	export NODE_CUPSD_SOCKET="$USER_FAKE_HOME/.nx/C-$sess_id/cups/cups.sock"
-	
-	mkdir -p "$USER_FAKE_HOME/.nx/C-$sess_id/pids/"
-	[ -e "$USER_FAKE_HOME/.nx/C-$sess_id/pids/cupsd" ] && return
-	touch "$USER_FAKE_HOME/.nx/C-$sess_id/pids/cupsd"
-	
-	mkdir -p "$USER_FAKE_HOME/.nx/C-$sess_id/cups/spool/tmp" "$USER_FAKE_HOME/.nx/C-$sess_id/cups/spool/certs" "$USER_FAKE_HOME/.nx/C-$sess_id/cups/ppd" "$USER_FAKE_HOME/.nx/C-$sess_id/cups/cache"
-
-cat <<EOF > $USER_FAKE_HOME/.nx/C-$sess_id/cups/cupsd.conf
-AccessLog /dev/null
-ErrorLog error_log
-PageLog page_log
-LogLevel info
-TempDir $USER_FAKE_HOME/.nx/C-$sess_id/cups/spool/tmp
-RequestRoot $USER_FAKE_HOME/.nx/C-$sess_id/cups/spool
-ServerRoot $USER_FAKE_HOME/.nx/C-$sess_id/cups/
-StateDir $USER_FAKE_HOME/.nx/C-$sess_id/cups/
-CacheDir $USER_FAKE_HOME/.nx/C-$sess_id/cups/cache
-
-Listen $NODE_CUPSD_SOCKET
-Browsing Off
-ServerName localhost
-PidFile $USER_FAKE_HOME/.nx/C-$sess_id/pids/cupsd
-
-<Location />
-Order Deny,Allow
-Deny From All
-Allow from 127.0.0.1
-</Location>
-
-# Allow everything for anonymous, because we are protected through UNIX socket
-<Policy default>
-  <Limit All>
-    AuthType None
-    Order deny,allow
-  </Limit>
-</Policy>
-EOF
-
-	touch "$USER_FAKE_HOME/.nx/C-$sess_id/cups/printers.conf" "$USER_FAKE_HOME/.nx/C-$sess_id/cups/classes.conf"
-
-	# copy mime.* files
-	cp -af "$CUPS_ETC"/mime.* "$USER_FAKE_HOME/.nx/C-$sess_id/cups/"
-
-	# start cupsd
-	$COMMAND_CUPSD -c "$USER_FAKE_HOME/.nx/C-$sess_id/cups/cupsd.conf" &>/dev/null </dev/null
-
-	# setup KDE
-	if [ "$ENABLE_KDE_CUPS" = "1" -a -e "$KDE_PRINTRC" ]
-	then
-		if egrep -q "^Host=" "$KDE_PRINTRC"
-		then
-			[ "$ENABLE_KDE_CUPS_DYNAMIC" = "1" ] && perl -pi -e 's,^Host=.*,Host[\$ie]=\$\('"$PATH_BIN/nxcups-gethost"'),g' "$KDE_PRINTRC"
-			[ "$ENABLE_KDE_CUPS_DYNAMIC" != "1" ] && perl -pi -e 's,^Host=.*,Host='"$NODE_CUPSD_SOCKET"',g' "$KDE_PRINTRC"
-		else
-			echo "[CUPS]" >> "$KDE_PRINTRC"
-			[ "$ENABLE_KDE_CUPS_DYNAMIC" = "1" ] && echo "Host[\$ie]=\$($PATH_BIN/nxcups-gethost)" >> "$KDE_PRINTRC"
-			[ "$ENABLE_KDE_CUPS_DYNAMIC" != "1" ] && echo "Host=$NODE_CUPSD_SOCKET" >> "$KDE_PRINTRC"
-		fi
-	fi
-}
-
-#
-# node_cupsd_reload
-#
-#	Used local vars: $sess_id
-#
-
-node_cupsd_reload()
-{
-	[ -e "$USER_FAKE_HOME/.nx/C-$sess_id/pids/cupsd" ] || return
-	NODE_CUPSD_PID=$(cat "$USER_FAKE_HOME/.nx/C-$sess_id/pids/cupsd")
-	[ -n "$NODE_CUPSD_PID" ] && kill -0 $NODE_CUPSD_PID && kill -HUP $NODE_CUPSD_PID
-}
-
-node_cupsd_get_socket()
-{
-	node_cupsd_setup
-	echo $NODE_CUPSD_SOCKET
-}
-
-node_umount_smb()
-{
-	[ -e "$USER_FAKE_HOME/.nx/C-$sess_id/scripts/mpoint" ] || return
-	cat "$USER_FAKE_HOME/.nx/C-$sess_id/scripts/mpoint" | while read mpoint
-	do
-		$COMMAND_SMBUMOUNT "$mpoint" >/dev/null 2>/dev/null
-	done
-}
-
-node_stop_services()
-{
-	node_umount_smb
-	node_cupsd_stop
-}
-
-node_emergency_exit()
-{
-	# umount shares & stop printers
-	node_stop_services
-
-	# kill the session
-	node_terminate_session "$sess_id" "failed"
-
-	echo "NX> 1004 Error: Emergency exit due to kill signal."
-}
-
-#
-# Monitoring the nxagent: Its also kind of a "state-machine" 
-#                         as it has to keep track of different 
-#                         connection states and react differently.
-#
-
-node_start_monitor_2_0_0()
-{
-	NODE_TAIL_PID=""
-	NODE_SUSPEND_STATUS="$2"
-
-	while read line 
-	do
-		#
-		# Catch tail pid
-		#
-		
-		if stringinstring "Info: tail -f running with pid" "$line"
-		then
-			NODE_TAIL_PID=$(echo $line | cut -d"'" -f2)
-			echo "$NODE_TAIL_PID" >"$USER_FAKE_HOME/.nx/C-$sess_id/pids/tail"
-		fi
-
-		#
-		# Catch NXAGENT SMB Port (sometimes the port differs from what we got from nxserver)
-		#
-		
-		if stringinstring "Info: Listening for SMB connections on port" "$line"
-		then
-			SMBMOUNT_PORT=$(echo $line | cut -d"'" -f2)
-			echo "$SMBMOUNT_PORT" >"$USER_FAKE_HOME/.nx/C-$sess_id/scripts/mport"
-		fi
-
-		#
-		# Session messages
-		#
-
-		if stringinstring "Session: Starting session at" "$line"
-		then
-			echo "NX> 1009 Session status: starting"
-		fi
-		
-		if stringinstring "Session: Suspending session at" "$line"
-		then
-			echo "NX> 1009 Session status: suspending"
-		fi
-		
-		if stringinstring "Session: Terminating session at" "$line"
-		then
-			echo "NX> 1009 Session status: terminating"
-		fi
-		
-		if stringinstring "Session: Resuming session at" "$line"
-		then
-			echo "NX> 1009 Session status: resuming"
-		fi
-
-
-		#
-		# Session suspend
-		#
-
-		if stringinstring "Session: Session suspended at" "$line"
-		then
-			echo "NX> 1005 Session status: suspended"
-			# umount shares & stop printers
-
-			if [ "$NODE_SUSPEND_STATUS" = "Running" ]
-			then
-				node_suspend_session "$sess_id"
-				NODE_SUSPEND_STATUS=""
-			else
-				node_stop_services
-			fi
-		fi
-
-		#
-		# Watchdog termination
-		#
-
-		if stringinstring "Info: Watchdog running with pid" "$line"
-		then
-			NODE_WATCHDOG_PID=$(echo $line | cut -d"'" -f2)
-		fi
-
-		if stringinstring "Info: Waiting the watchdog process to complete." "$line"
-		then
-			# Kill the watchdog
-			kill $NODE_WATCHDOG_PID 2>/dev/null
-		fi
-		
-		#
-		# Session is running
-		#
-		
-		if stringinstring "Info: Waiting for connection from" "$line"
-		then
-			echo "NX> 710 Session status: running"
-			echo "NX> 1002 Commit"
-			echo "NX> 1006 Session status: running"
-		fi
-
-		#
-		# Reconnection success!
-		#
-		
-		if stringinstring "Session: Session resumed at" "$line"
-		then
-			echo "NX> 718 Session restore succeded"
-			if [ "$1" = "restore" ]
-			then
-				kill $NODE_TAIL_PID
-				break
-			fi
-		fi
-
-		#
-		# Reconnection failure
-		#
-		
-		if stringinstring "Session: Display failure detected at" "$line"
-		then
-			echo "NX> 596 Error: Session $1 failed. Reason was: $line"
-			if [ "$1" = "restore" ]
-			then
-				kill $NODE_TAIL_PID
-				break
-			fi
-		fi
-	done
-	
-	trap "" EXIT
-	
-	[ "$1" = "restore" ] ||	node_stop_services
-	# close all open file descriptors
-	exec 0<&-
-	exec 1>&-
-	exec 2>&-
-	exit 0
-}
-
-node_start_monitor_1_5_0()
-{
-	NODE_RUNNING=0
-	NODE_TAIL_PID=""
-	NODE_SUSPEND_STATUS="$2"
-
-	while read line 
-	do
-		#
-		# Catch tail pid
-		#
-		
-		if stringinstring "Info: tail -f running with pid" "$line"
-		then
-			NODE_TAIL_PID=$(echo $line | cut -d"'" -f2)
-			echo "$NODE_TAIL_PID" >"$USER_FAKE_HOME/.nx/C-$sess_id/pids/tail"
-		fi
-
-		#
-		# Session suspend
-		#
-
-		if stringinstring "Info: Session suspended." "$line"
-		then
-			echo "NX> 1005 Session status: suspended"
-			# umount shares & stop printers
-
-			if [ "$NODE_SUSPEND_STATUS" = "Running" ]
-			then
-				node_suspend_session "$sess_id"
-				NODE_SUSPEND_STATUS=""
-			else
-				node_stop_services
-			fi
-		fi
-
-		#
-		# Proxy termination
-		#
-
-		if stringinstring "Info: Waiting for a further signal to complete." "$line"
-		then
-			# Kill the proxy
-			kill -HUP $NODE_PROXY_PID 2>/dev/null
-		fi
-		
-		#
-		# Session end
-		#
-		
-		if stringinstring "Info: End of session requested by " "$line" && [ "$RECONNECT" = "0" ] && ! stringinstring "'SIGHUP'" "$line"
-		then
-			echo "NX> 1009 Session status: terminating"
-			kill -HUP $NODE_PROXY_PID 2>/dev/null
-		fi
-		
-		#
-		# Session is running
-		#
-		
-		if stringinstring "Info: Waiting for connection from" "$line"
-		then
-			echo "NX> 710 Session status: running"
-			echo "NX> 1002 Commit"
-			echo "NX> 1006 Session status: running"
-		fi
-
-		#
-		# Status = Running - Do _not_ fail anymore.
-		#
-
-		if stringinstring "Info: Connection with remote proxy established." "$line"
-		then
-			NODE_RUNNING=1
-		fi
-	
-		#
-		# Catch proxy pid
-		#
-		
-		if stringinstring "Info: Proxy running in server mode with pid" "$line"
-		then
-			NODE_PROXY_PID=$(echo $line | cut -d"'" -f2)
-		fi
-		
-		#
-		# Reconnection success!
-		#
-		
-		if stringinstring "Info: Reconnection succeded." "$line"
-		then
-			echo "NX> 718 Session restore succeded"
-			if [ "$1" = "restore" ]
-			then
-				kill $NODE_TAIL_PID
-				break
-			fi
-		fi
-
-		#
-		# Reconnection failure
-		#
-		
-		if stringinstring "Info: Reconnection failed:" "$line"
-		then
-			echo "NX> 1005 Session status: suspended"
-			echo "NX> 596 Error: Session restore failed. Reason was: $line"
-			if [ "$1" = "restore" ]
-			then
-				kill $NODE_TAIL_PID
-				break
-			fi
-		fi
-	done
-	
-	trap "" EXIT
-
-	[ "$1" = "restore" ] ||	node_stop_services
-	# close all open file descriptors
-	exec 0<&-
-	exec 1>&-
-	exec 2>&-
-	exit 0
-}
-
-#
-# node_start_monitor <start|restore> <Running|Suspended>
-#
-
-node_start_monitor()
-{
-	[ "$ENABLE_2_0_0_BACKEND" = "1" ] && node_start_monitor_2_0_0 "$@"
-	[ "$ENABLE_2_0_0_BACKEND" = "1" ] || node_start_monitor_1_5_0 "$@"
-}
-
-#
-# -----------------------------------------------------------------------------
-# startsession - Start a new session.
-# -----------------------------------------------------------------------------
-#
-
-startsession()
-{
-
-	# user=knoppix&userip=192.168.1.66&uniqueid=6A8269CC467264EAEF6349D062689755&display=1000&session=lappi%5ffull&type=unix%2dkde&cache=8M&images=32M&cookie=84765070afee043cf83f85d21130145f&link=lan&render=1&backingstore=when_requested&imagecompressionmethod=0&geometry=fullscreen&keyboard=fr&media=0&samba=1&agent_server=&agent_user=&agent_password=
-
-	user=$(getparam user)
-	userip=$(getparam userip)
-	uniqueid=$(getparam uniqueid)
-	display=$(getparam display)
-	session=$(getparam session)
-	type=$(getparam type | sed 's/%2d/-/g')
-	application=$(getparam application)
-	cache=$(getparam cache)
-	images=$(getparam images)
-	cookie=$(getparam cookie)
-	link=$(getparam link)
-	virtualdesktop=$(getparam virtualdesktop)
-	render=$(getparam render)
-	backingstore=$(getparam backingstore)
-	imagecompressionmethod=$(getparam imagecompressionmethod)
-	imagecompressionlevel=$(getparam imagecompressionlevel)
-	geometry=$(getparam geometry)
-	keyboard=$(getparam keyboard)
-	kbtype=$(getparam kbtype)
-	media=$(getparam media)
-	mediahelper=$(getparam mediahelper)
-	sync=$(getparam sync)
-	samba=$(getparam samba)
-	cups=$(getparam cups)
-	agent_server=$(getparam agent_server | sed 's/%3A/:/g')
-	agent_user=$(getparam agent_user)
-	agent_password=$(getparam agent_password)
-	agent_domain=$(getparam agent_domain)
-	screeninfo=$(getparam screeninfo)
-	nodelay=$(getparam nodelay)
-	[ "$PROXY_TCP_NODELAY" = "0" ] && nodelay=0
-
-	# 1.5.0 options
-	rdpcolors=$(getparam rdpcolors)
-	rdpcache=$(getparam rdpcache)
-	http=$(getparam http)
-	
-	# nxclient > 1.5.0-106 variables
-	resize=$(getparam resize)
-	keybd=$(getparam keybd)
-	kbload=$(getparam kbload)
-	keymap=$(getparam keymap)
-
-	rootless=0
-	# Its still the clients decision
-	[ "$ENABLE_ROOTLESS_MODE" = "1" ] &&  rootless=$(getparam rootless)
-
-	# Rootless fix from 2x nxserver 1.5.0
-	realtype=$type
-	[ "$type" = "unix-application" -o "$type" = "unix-default" ] && realtype="unix-desktop"
-	
-	# FreeNX specific variables
-	clientproto=$(getparam clientproto)
-	status=$(getparam status)
-	host=$(getparam host)
-
-	fullscreen=$(getparam fullscreen)
-	[ "$geometry" = "fullscreen" ] && fullscreen="1"
-
-	[ "$EXPORT_USERIP" = "1" ] && export NXUSERIP="$userip"
-
-	ssl_tunnel=$(getparam encryption)
-	[ -z "$ssl_tunnel" ] && ssl_tunnel=0
-	
-	if [ "$ssl_tunnel" = "1" ]
-	then
-		# we need to use the IP of the "calling" server now
-		userip=$(echo $SSH_CLIENT $SSH2_CLIENT | cut -d" " -f1 | sed 's/::ffff://g')
-
-		# TODO: This logic is broken ... ;-)
-		[ -z "$userip" ] && userip="127.0.0.1"
-		[ -z "$userip" -a "$host" != "127.0.0.1" ] && userip="*"
-	fi
-	
-	# ok, lets make the session dir first:
-	
-	sess_id="$SERVER_NAME-$display-$uniqueid"
-	[ "$EXPORT_SESSIONID" = "1" ] && export NXSESSIONID="$sess_id"
-	
-	OLD_UMASK=$(umask)
-	umask 0022
-	mkdir -p $USER_FAKE_HOME
-	umask 0077
-	mkdir -p $USER_FAKE_HOME/.nx/C-$sess_id
-	umask $OLD_UMASK
-	
-	# cache=8M,images=32M,pack=nopack,link=lan,type=unix-kde,cleanup=0,accept=192.168.1.66,cookie=E38A94A77F975443AF04EC911881B120,id=Knoppix-1000-6A8269CC467264EAEF6349D062689755,samba=1,render=1:1000
-	
-	PACK=""
-	[ -z "$imagecompressionlevel" ] && imagecompressionlevel="9"
-	
-	[ "$imagecompressionmethod" = "0" ] && PACK="pack=nopack,"
-	[ "$imagecompressionmethod" = "1" ] && PACK="pack=16m-jpeg-$imagecompressionlevel,"
-	[ "$imagecompressionmethod" = "2" ] && PACK="pack=16m-png-9,"
-	
-	proxy_cookie=$(echo $[$RANDOM*$RANDOM] | $COMMAND_MD5SUM | cut -d" " -f1)
-
-	# all newer clients support fake cookie authentication
-	if [ "$clientproto" != "1.4.0" ]
-	then
-		# enable fake cookie authentication
-		cookie=$proxy_cookie
-	fi
-
-	# write options file
-	[ -z "$samba" ] && samba=0
-	[ -z "$media" ] && media=0
-	[ -z "$nodelay" ] && nodelay=1
-
-	CACHE="cache=$cache,"
-	[ -z "$cache" ] && CACHE=""
-	IMAGES="images=$images,"
-	[ -z "$images" ] && IMAGES=""
-
-	ACCEPT="accept=$userip,"
-	[ "$userip" = "*" ] && ACCEPT=""
-
-	OLD_UMASK=$(umask)
-	umask 0077
-
-cat << EOF > $USER_FAKE_HOME/.nx/C-$sess_id/options
-${kbtype:+kbtype=$kbtype,}${kbload:+kbload=$kbload,}${keymap:+keymap=$keymap,}${resize:+resize=$resize,}${CACHE}${IMAGES}${PACK}link=$link,nodelay=$nodelay,type=$realtype,cleanup=0,${ACCEPT}cookie=$proxy_cookie,id=$sess_id,samba=$samba,media=$media${sync:+,sync=$sync}${cups:+,cups=$cups}${keybd:+,keybd=$keybd}${http:+,http=$http}${rdpcolors:+,rdpcolors=$rdpcolors}${rdpcache:+,rdpcache=$rdpcache}${fullscreen:+,fullscreen=1}:$display
-EOF
-	umask $OLD_UMASK
-#samba=$samba,
-	#cache=$cache,images=$images,pack=nopack,link=$link,type=$type,cleanup=0,accept=$userip,cookie=$proxy_cookie,id=$sess_id
-#samba=$samba,media=$media,render=$render:$display
-
-	# write xauth script file
-
-$COMMAND_XAUTH >/dev/null 2>&1 <<EOF
-add localhost:$display MIT-MAGIC-COOKIE-1 $cookie
-add unix:$display MIT-MAGIC-COOKIE-1 $cookie
-exit
-EOF
-
-$COMMAND_XAUTH -f "$USER_FAKE_HOME/.nx/C-$sess_id/authority" >/dev/null 2>&1 <<EOF
-add localhost:$display MIT-MAGIC-COOKIE-1 $cookie
-add unix:$display MIT-MAGIC-COOKIE-1 $cookie
-exit
-EOF
-
-	mkdir -m700 $USER_FAKE_HOME/.nx/C-$sess_id/scripts/ 2>/dev/null || chmod 700 $USER_FAKE_HOME/.nx/C-$sess_id/scripts/
-
-cat << EOF >$USER_FAKE_HOME/.nx/C-$sess_id/scripts/authority
-remove localhost:$display
-remove unix:$display
-exit
-EOF
-
-if [ "$1" = "restore" ]
-then
-	echo > $USER_FAKE_HOME/.nx/C-$sess_id/session
-	sh -c 'echo "Info: tail -f running with pid '\'\$$\''."; exec tail -n1 -f '$USER_FAKE_HOME'/.nx/C-'$sess_id'/session' | node_start_monitor "$1" "$status" &
-
-	MONITOR_PID=$!
-	export MONITOR_PID
-
-	mkdir -p $USER_FAKE_HOME/.nx/C-$sess_id/pids/
-	echo "$MONITOR_PID" > $USER_FAKE_HOME/.nx/C-$sess_id/pids/monitor
-
-	node_suspend_session $sess_id || { echo "Info: Reconnection failed: NX Agent process could not be found." >>"$USER_FAKE_HOME/.nx/C-$sess_id/session"; node_fail_restore_session $sess_id; }
-else
-	node_start_agent &
-	node_start_applications &
-fi
-
-if which "$NODE_AUTOSTART" >/dev/null 2>&1
-then
-	sess_id="$SERVER_NAME-$display-$uniqueid"
-	# go into background immediately
-	NXSESSIONID="$sess_id" DISPLAY=unix:$display "$NODE_AUTOSTART" "$1" >/dev/null 2>&1 &
-	# dont't wait for this child!
-	disown $!
-fi
-	
-cat << EOF
-NX> 700 Session id: $sess_id
-NX> 705 Session display: $display
-NX> 703 Session type: $type
-NX> 701 Proxy cookie: $proxy_cookie
-NX> 702 Proxy IP: $userip
-NX> 706 Agent cookie: $cookie
-NX> 704 Session cache: $type
-NX> 707 SSL tunneling: $ssl_tunnel
-EOF
-
-# collection ...
-
-# NX> 1004 Error:
-#Session 'Knoppix-1000-40EFB9F64FA55C64C41C72CA39EBD720' has failed after reaching usable state. Session directory '/home/knoppix/.nx/F-C-Knoppix-1000-40EFB9F64FA55C64C41C72CA39EBD720' will be not deleted to allow for further investigation.
-
-if [ -n "$MONITOR_PID" ]
-then
-	wait "$MONITOR_PID"
-	rm -f "$USER_FAKE_HOME/.nx/C-$sess_id/pids/monitor"
-	rm -f "$USER_FAKE_HOME/.nx/C-$sess_id/pids/tail"
-fi
-wait # for all children
-}
-
-#
-# -----------------------------------------------------------------------------
-# cmd_node functions - changes lots of small variables
-# -----------------------------------------------------------------------------
-#
-
-cmd_node_terminate()
-{
-	sessionid=$(getparam_sessionid)
-	echo "NX> 716 Terminating session $sessionid on user request."
-	display=$(cd $USER_FAKE_HOME/.nx/; echo C-$SERVER_NAME-*-$sessionid | rev |cut -d"-" -f2 |rev)
-	node_terminate_session "$SERVER_NAME-$display-$sessionid"
-}
-
-cmd_node_suspend()
-{
-	sessionid=$(getparam_sessionid)
-	echo "NX> 716 Suspending session $sessionid on user request."
-	display=$(cd $USER_FAKE_HOME/.nx/; echo C-$SERVER_NAME-*-$sessionid | rev | cut -d"-" -f2 |rev)
-	node_suspend_session "$SERVER_NAME-$display-$sessionid"
-}
-
-cmd_node_smbmount()
-{
-	sessionid=$(getparam_sessionid)
-	port=$(getparam port)
-	username=$(getparam username)
-	password=$(getparam password)
-	share=$(getparam share)
-	computername=$(getparam computername)
-	dir=$(getparam dir | sed 's|$(SHARES)|MyShares|g')
-	# rdir=$(getparam dir | sed 's|$(SHARES)/||g')
-	display=$(cd $USER_FAKE_HOME/.nx/; echo C-$SERVER_NAME-*-$sessionid | rev|cut -d"-" -f2| rev)
-	mkdir -p "$HOME/$dir"
-	# wait up to 30 sec until nxagent has opened the listener port for samba connections
-	for (( i=30; $i; --i ))
-	do
-		[ -f "$USER_FAKE_HOME/.nx/C-$SERVER_NAME-$display-$sessionid/scripts/mport" ] && break
-		sleep 1
-	done
-	# sometimes the samba port we get from nxserver is not the right one, so let's get it from nxagent
-	port=$(cat "$USER_FAKE_HOME/.nx/C-$SERVER_NAME-$display-$sessionid/scripts/mport")
-	error=$(PASSWD="$password" "$COMMAND_SMBMOUNT" "//$computername/$share" "$HOME/$dir" -o username="$username,ip=127.0.0.1,port=$port" 2>&1)
-	if [ $? -eq 0 ]
-	then
-		$PATH_BIN/nxclient -dialog ok -caption "NXServer Message" -message "Info: Share: '//$computername/$share' mounted on: '$HOME/$dir'" -noautokill -display :$display &
-		echo "$HOME/$dir" >> "$USER_FAKE_HOME/.nx/C-$SERVER_NAME-$display-$sessionid/scripts/mpoint"
-	else
-		$PATH_BIN/nxclient -dialog ok -caption "NXServer Message" -message "Info: Share: '//$computername/$share' failed to mount: $error" -noautokill -display :$display &
-	fi
-}
-
-cmd_node_addprinter()
-{
-	sessionid=$(getparam_sessionid)
-	type=$(getparam type)
-	port=$(getparam port)
-	username=$(getparam username)
-	password=$(getparam password)
-	share=$(getparam share)
-	printer=$(getparam printer)
-	computername=$(getparam computername)
-	public=$(getparam public)
-	model=$(getparam model)
-	defaultPrinter=$(getparam defaultPrinter)
-	display=$(cd $USER_FAKE_HOME/.nx/; echo C-$SERVER_NAME-*-$sessionid | rev | cut -d"-" -f2 | rev)
-	sess_id="$SERVER_NAME-$display-$sessionid"
-	
-	# this will also setup the userspace cupsd
-	export CUPS_SERVER=$(node_cupsd_get_socket)
-	
-	if [ "$type" = "smb" ]
-	then
-		DEVICE_URI="smb://$username:$password at 127.0.0.1:$port/$share"
-		NAME="$share"
-		ENABLE_CUPS_SEAMLESS="0"
-	else
-		DEVICE_URI="nxipp://$username:$password at 127.0.0.1:$port/printers/$printer"
-		NAME="$printer"
-	fi
-	export PATH_BIN
-
-	if [ "$ENABLE_CUPS_SEAMLESS" != "1" ]
-	then
-		MODEL=$($PATH_BIN/nxclient -printer "$NAME" -noautokill -display :$display)
-		[ -z "$MODEL" -o "$MODEL" = "cancel: aborted" ] && return
-	else
-		sleep $CUPS_SEAMLESS_DELAY
-		MODEL="download_cached"
-	fi
-	
-	PUBLIC="-u allow:$USER"
-	[ "$public" == "1" ] && PUBLIC=""
-
-	if [ "$MODEL" = "download_new" -o "$MODEL" = "download_cached" ]
-	then
-		mkdir -p "$USER_FAKE_HOME/.nx/config/ppd/"
-		if [ "$MODEL" = "download_new" -o ! -r "$USER_FAKE_HOME/.nx/config/ppd/$printer.ppd" ]
-		then
-			curl --digest -o "$USER_FAKE_HOME/.nx/config/ppd/$printer.ppd" "http://$username:$password at 127.0.0.1:$port/ppd/${printer}_nxdl.ppd" >>$USER_FAKE_HOME/.nx/C-$sess_id/cups/curl.log 2>&1
-		RC=$?
-		[ $RC -eq 0 -a "$ENABLE_CUPS_SEAMLESS" != "1" ] && $PATH_BIN/nxclient --message "Download successful." -noautokill -display :$display
-		[ $RC -ne 0 -a "$ENABLE_CUPS_SEAMLESS" != "1" ] && $PATH_BIN/nxclient --message "Download failed. Log is: $USER_FAKE_HOME/.nx/C-$sess_id/cups/curl.log" -noautokill -display :$display
-		fi
-		MODEL="$USER_FAKE_HOME/.nx/config/ppd/$printer.ppd"
-	fi
-	
-	if [ ! -r "$MODEL" ]
-	then
-		# Foomatic and co
-		/usr/sbin/lpadmin -p "$NAME" -E -v "$DEVICE_URI" -m "$MODEL" $PUBLIC
-	else
-		/usr/sbin/lpadmin -p "$NAME" -E -v "$DEVICE_URI" -P "$MODEL" $PUBLIC
-	fi
-
-	[ "$defaultPrinter" = "1" ] && /usr/sbin/lpadmin -d "$NAME"
-}
-
-nxnode_func()
-{
-
-case "$1" in 
-	--startsession)
-		startsession
-	;;
-	--resumesession)
-		startsession "restore"
-	;;
-	--terminate)
-		cmd_node_terminate
-	;;
-	--suspend)
-		cmd_node_suspend
-	;;
-	--smbmount)
-		cmd_node_smbmount &>/dev/null </dev/null &
-	;;
-	--addprinter)
-		cmd_node_addprinter &>/dev/null </dev/null &
-	;;
-	--check)
-		echo "NX> 716 finished"
-	;;
-	--agent)
-		echo "NX> 716 Starting NX Agent ..."
-		shift
-		[ "$SET_LD_LIBRARY_PATH" = "1" ] && export LD_LIBRARY_PATH="$AGENT_LIBRARY_PATH:$LD_LIBRARY_PATH"
-		PATH="$PATH:$PATH_BIN" $PATH_BIN/nxagent -name "NX Agent Test - Args: $@" $@
-		echo "NX> 716 NX Agent exited with status: $?"
-	;;
-	--setkey)
-		mkdir -m 700 -p $HOME/.ssh
-		if ! grep -q "$(cat $NX_ETC_DIR/users.id_dsa.pub)" $HOME/.ssh/$SSH_AUTHORIZED_KEYS 2>/dev/null
-		then
-			cat $NX_ETC_DIR/users.id_dsa.pub >> $HOME/.ssh/$SSH_AUTHORIZED_KEYS
-			chmod 600 $HOME/.ssh/$SSH_AUTHORIZED_KEYS
-			echo "NX> 716 Public key added to: $HOME/.ssh/$SSH_AUTHORIZED_KEYS"
-		else
-			echo "NX> 716 Public key is already present in: $HOME/.ssh/$SSH_AUTHORIZED_KEYS"
-		fi
-	;;
-	*)
-		echo "NX> 500 Error: Command not found"
-	;;
-esac
-
-}
-
-
-if [ "$1" = "--slave" ]
-then
-	# New slave mode accepts more than 1 command at a time
-	echo "NX> 716 Slave mode started successfully."
-	
-	while read CMD
-	do
-		set -- "$CMD"
-		if [ "$1" != "--check" -a "$1" != "--setkey" -a "$1" != "--agent" ]
-		then 
-			read CMDLINE
-
-			CMDLINE="a=b&$CMDLINE"
-		fi
-		
-		if [ "$1" = "--startsession" -o "$1" = "--resumesession" ]
-		then
-			export SLAVE_PID=$$
-			( echo $CMDLINE | "$0" "$CMD"; kill $SLAVE_PID ) &
-		else
-			( echo $CMDLINE | "$0" "$CMD" ) &
-		fi
-
-	done
-else
-	nxnode_func "$@"
-fi
-
-echo "NX> 1001 Bye."

Copied: freenx-server/tags/FreeNX-0.7.1/nxnode (from rev 403, freenx-server/trunk/nxnode)

Deleted: freenx-server/tags/FreeNX-0.7.1/nxprint
===================================================================
--- freenx-server/trunk/nxprint	2007-05-29 15:27:07 UTC (rev 334)
+++ freenx-server/tags/FreeNX-0.7.1/nxprint	2007-10-14 22:25:14 UTC (rev 405)
@@ -1,67 +0,0 @@
-#!/bin/bash
-#
-# nxprint - Prints a list of available drivers or printers
-# 
-# Copyright (c) 2005 by Fabian Franz <freenx at fabian-franz.de>
-#
-# License: GPL, version 2
-#
-# SVN: $Id$
-#
-
-HELP="no"
-DRIVERS="no"
-PRINTERS="no"
-
-while [ "$1" ]
-do
-        case "$1" in
-                --help) HELP="yes"; shift ;;
-                --drivers|-d) DRIVERS="yes"; shift ;;
-                --printers|-l) PRINTERS="yes"; shift ;;
-                --) shift ; break ;;
-                *) echo "Invalid flag $1" ; HELP="yes"; shift ; break ;;
-        esac
-done
-
-[ "$DRIVERS" = "no" -a "$PRINTERS" = "no" ] && HELP="yes"
-
-if [ "$HELP" = "yes" ]
-then
-        echo "nxprint - Prints a list of available drivers or printers"
-	echo ""
-        echo "Syntax: nxprint --help"
-        echo "        nxprint --drivers"
-        echo "        nxprint --printers"
-        echo
-        echo "  --drivers                prints a list of available CUPS drivers"
-        echo "  --printers               prints a list of available CUPS printers"
-        exit 0
-fi
-
-if [ "$DRIVERS" = "yes" ]
-then
-	echo "driver|Raw|Raw Queue|raw"
-	echo "driver|Download (CUPS)|Download from CUPS server (cached)|download_cached"
-	echo "driver|Download (CUPS)|Download from CUPS server (redownload)|download_new"
-	{ 
-        cd /usr/share/ppd/
-        awk -F '"' '/\*Manufacturer:/ { a[FILENAME]=$2 }
-                    /\*NickName:/ { b[FILENAME]=$2 } 
-                    END { 
-                       for (i in a) 
-                          print "driver|" (a[i]=="ESP"?substr(b[i],0,index(b[i]," ")-1):a[i]) "|"b[i]"|"i"|en"
-                    }' $(find -name "*.ppd")
-
-	if [ "$ENABLE_FOOMATIC" = "1" ]
-	then
-		[ -z "$COMMAND_FOOMATIC" ] && COMMAND_FOOMATIC="foomatic-ppdfile" 
-		$COMMAND_FOOMATIC list | awk -F'"' '{ A=""; if ($4 == "HP") { B=substr($6,index($6," ")+1); A=" "substr(B,0,index(B," ")); } printf("driver|%s%s|%s|%s|%s\n",$4,A,$6,$2,substr($3,2)) } '
-	fi
-	} | sort
-fi
-
-if [ "$PRINTERS" = "yes" ]
-then
-	lpstat -p | awk '{ print $1 "|" $2 }'
-fi

Copied: freenx-server/tags/FreeNX-0.7.1/nxprint (from rev 360, freenx-server/trunk/nxprint)

Deleted: freenx-server/tags/FreeNX-0.7.1/nxserver
===================================================================
--- freenx-server/trunk/nxserver	2007-05-29 15:27:07 UTC (rev 334)
+++ freenx-server/tags/FreeNX-0.7.1/nxserver	2007-10-14 22:25:14 UTC (rev 405)
@@ -1,1746 +0,0 @@
-#!/bin/bash
-
-# Free implementation of nxserver components
-#
-# To use nxserver add the user "nx" 
-# and use nxserver as default shell.
-#
-# Also make sure that hostkey based authentification works.
-# 
-# Copyright (c) 2004 by Fabian Franz <FreeNX at fabian-franz.de>.
-#
-# License: GNU GPL, version 2
-#
-# SVN: $Id$
-#
-
-# Read the config file
-. $(PATH=$(cd $(dirname $0) && pwd):$PATH which nxloadconfig) --
-
-# following two functions are Copyright by Klaus Knopper
-
-stringinstring(){
-case "$2" in *$1*) return 0;; esac
-return 1
-}
-
-# Reread boot command line; echo last parameter's argument or return false.
-getparam(){
-stringinstring "&$1=" "$CMDLINE" || return 1
-echo "$CMDLINE" |  tr "&" "\n" | egrep "^"$1"=" | awk -F= '{ VAL=$2 } END { print VAL }'
-return 0
-}
-
-
-############### PACKAGE passdb.bm #######################
-#
-# Library of passdb functions (outsource)
-#
-
-# Policy: Variable and function names _must_ start with passdb_ / PASSDB_
-
-# Needed global vars: $NX_ETC_DIR, $PATH_BIN
-
-# Needed nonstd functions: md5sum
-
-
-passdb_get_crypt_pass()
-{
-	echo "$@" | $COMMAND_MD5SUM | cut -d" " -f1
-}
-
-passdb_get_pass()
-{
-	PASSDB_CHUSER="$1"
-	PASSDB_PASS=$(egrep "^$PASSDB_CHUSER:" $NX_ETC_DIR/passwords 2>/dev/null | cut -d":" -f2)
-	if [ "$ENABLE_PASSDB_AUTHENTICATION" = "1" ]
-	then
-		egrep -q "^$PASSDB_CHUSER:" $NX_ETC_DIR/passwords 2>/dev/null && echo $PASSDB_PASS
-		egrep -q "^$PASSDB_CHUSER:" $NX_ETC_DIR/passwords 2>/dev/null || echo "NOT_VALID"
-	else
-		echo "NOT_VALID"
-	fi
-}
-
-passdb_chpass()
-{
-	PASSDB_CHUSER="$1"
-	PASSDB_ENC_PASS="$2"
-	cp -f $NX_ETC_DIR/passwords $NX_ETC_DIR/passwords.orig
-	perl -pi -e "s/$PASSDB_CHUSER:.*/$PASSDB_CHUSER:$PASSDB_ENC_PASS/g" $NX_ETC_DIR/passwords
-}
-
-passdb_user_exists()
-{
-	PASSDB_CHUSER="$1"
-	egrep -q "^$PASSDB_CHUSER:" $NX_ETC_DIR/passwords 2>/dev/null
-}
-
-
-passdb_remove_user()
-{
-	PASSDB_CHUSER="$1"
-	cp -f $NX_ETC_DIR/passwords $NX_ETC_DIR/passwords.orig
-	perl -pi -e "s/$PASSDB_CHUSER:.*\n//g" $NX_ETC_DIR/passwords
-}
-
-passdb_add_user()
-{
-	PASSDB_CHUSER="$1"
-	cp -f $NX_ETC_DIR/passwords $NX_ETC_DIR/passwords.orig
-	echo "$PASSDB_CHUSER:*" >> $NX_ETC_DIR/passwords
-	# deactivated to avoid problems with comm-server
-	su - $PASSDB_CHUSER -c "$PATH_BIN/nxnode --setkey"
-}
-
-passdb_list_user()
-{
-	cat $NX_ETC_DIR/passwords | cut -d":" -f1
-}
-
-#
-# End of passdb Library
-#
-
-############### PACKAGE session.bm #######################
-#
-# Library of session management functions
-#
-
-# Needed global vars: $NX_SESS_DIR
-
-session_list()
-{
-	cat $NX_SESS_DIR/running/sessionId"{$1}"
-}
-
-# Find all running session-filenames 
-
-session_find_all()
-{
-	for i in $NX_SESS_DIR/running/*
-	do
-		[ -f $i ] || break
-		echo $i
-	done
-}
-
-# Find all running sessions of a id
-session_find_id()
-{
-	[ -f $NX_SESS_DIR/running/sessionId"{$1}" ] && echo $NX_SESS_DIR/running/sessionId"{$1}"
-}
-
-# finds out if a session belongs to a user
-
-session_find_id_user()
-{
-	[ -f $NX_SESS_DIR/running/sessionId"{$1}" ] && egrep -q "^userName=$2$" $NX_SESS_DIR/running/sessionId"{$1}" && return 0
-	return 1
-}
-
-# Find all running sessions of a user
-session_find_user()
-{
-	for i in $NX_SESS_DIR/running/*
-	do
-		[ -f $i ] || break
-		egrep -q "^userName=$1$" $i && echo $i
-	done
-}
-
-# Find all running sessions of a display
-session_find_display()
-{	
-	for i in $NX_SESS_DIR/running/*
-	do
-		[ -f $i ] || break
-		egrep -q "^display=$1$" $i && echo $i
-	done
-}
-
-# session_get_cmdline <session filename>
-
-session_get_cmdline()
-{
-	echo "a=b" | cat - $1 | tr '\n' '&'
-}
-
-# session_get <uniqueid>
-
-session_get()
-{
-	session_get_cmdline $NX_SESS_DIR/running/sessionId"{$1}"
-}
-
-
-# Get the first session, which can be resumed
-
-session_get_user_suspended()
-{
-	for i in $NX_SESS_DIR/running/*
-	do
-		[ -f $i ] || break
-		if egrep -q "^userName=$1$" $i && egrep -q "^status=$2$" $i
-		then
-			CMDLINE=$(session_get_cmdline $i)
-			echo "$(getparam sessionId)"
-			break
-		fi
-	done
-}
-
-# Count all sessions of a user
-# and save it in SESSION_COUNT and SESSION_COUNT_USER
-
-session_count_user()
-{
-	SESSION_COUNT=0
-	SESSION_COUNT_USER=0
-
-	for i in $NX_SESS_DIR/running/*
-	do
-		[ -f $i ] || break
-		let SESSION_COUNT=$SESSION_COUNT+1
-		egrep -q "^userName=$1$" $i && let SESSION_COUNT_USER=$SESSION_COUNT_USER+1
-	done
-}
-
-# List all sessions of a user
-
-session_list_user_suspended()
-{
-	SESSION_COUNT=0
-	SESSION_COUNT_USER=0
-
-	TMPFILE=$(mktemp /tmp/nxserver_tmp.XXXXXXXXX)
-	echo "NX> 127 Sessions list of user '$1' for reconnect:" > $TMPFILE
-	echo >> $TMPFILE
-	if [ -z "$4" ]
-	then
-		
-		echo "Display Type             Session ID                       Options  Depth Screensize     Available Session Name" >> $TMPFILE
-		echo "------- ---------------- -------------------------------- -------- ----- -------------- --------- ----------------------" >> $TMPFILE
-	else
-		echo "Display Type             Session ID                       Options  Depth Screen         Status      Session Name" >> $TMPFILE
-		echo "------- ---------------- -------------------------------- -------- ----- -------------- ----------- ------------------------------" >> $TMPFILE
-	fi
-	for i in $NX_SESS_DIR/running/*
-	do
-		[ -f $i ] || break
-		let SESSION_COUNT=$SESSION_COUNT+1
-		if egrep -q "^userName=$1$" $i && egrep -q "^status=$2$" $i #&& grep -q "screeninfo=$3" $i
-		then
-			CMDLINE=$(session_get_cmdline $i)
-			depth=$(getparam screeninfo | cut -d "x" -f3 | cut -d "+" -f1 )
-			geom=$(getparam screeninfo | cut -d "x" -f1,2) 
-			render=$(getparam screeninfo | cut -d "+" -f2 )
-			available="N/A"
-			udepth=$(echo $3 | cut -d "x" -f3 | cut -d "+" -f1 )
-			urender=$(echo $3 | cut -d "+" -f2 )
-
-			mode="D"
-			[ "$(getparam sessionRootlessMode)" = "1" ] && mode="-"
-			
-			options="-"
-			stringinstring "fullscreen" "$3" && options="F"
-			[ "$(getparam geometry)" = "fullscreen" ] || options="-"
-			[ "$urender" = "render" ] && options="${options}R${mode}--PSA"
-			[ "$urender" = "render" ] || options="${options}-${mode}--PSA"
-			[ "$udepth" = "$depth" -a "$urender" = "$render" ] && available=$(getparam status)
-			# FIXME: HACK !!! to keep compatibility with old snapshot version (Knoppix 3.6 based for example)
-			if [ -z "$4" -a "$available" != "N/A" ] 
-			then
-				available="Yes"
-			fi
-			printf "%-7s %-16s %32s %8s %5s %-14s %-11s %s\n" "$(getparam display)" "$(getparam type)" "$(getparam sessionId)" "$options" "$depth" "$geom" "$available" "$(getparam sessionName)" >> $TMPFILE
-		fi
-		egrep -q "^userName=$1$" $i && let SESSION_COUNT_USER=$SESSION_COUNT_USER+1
-	done
-	echo "" >> $TMPFILE
-	echo "" >> $TMPFILE
-	cat $TMPFILE
-	rm -f $TMPFILE
-	if [ "$SESSION_COUNT" -ge "$SESSION_LIMIT" -o "$SESSION_COUNT_USER" -ge "$SESSION_USER_LIMIT" ]
-	then
-		echo "NX> 147 Server capacity: reached for user: $1"
-	else
-		echo "NX> 148 Server capacity: not reached for user: $1"
-	fi
-}
-
-session_list_user()
-{
-	echo "NX> 127 Sessions list of user '$1'"
-	echo
-	echo "Display Username        Remote IP       Session ID"
-	echo "------- --------------- --------------- --------------------------------"
-	for i in $NX_SESS_DIR/running/*
-	do
-		[ -f $i ] || break
-		if egrep -q "^userName=$1$" $i
-		then
-			CMDLINE=$(session_get_cmdline $i)
-			echo -e "$(getparam display)\t$(getparam userName)\t$(getparam foreignAddress)\t$(getparam sessionId)"
-		fi
-	done
-}
-
-session_history()
-{
-	userName=$1
-	sessionId=$2
-	echo "NX> 127 Session list:"
-	echo
-	echo "Display Username        Remote IP       Session ID                       Date                Status"
-	echo "------- --------------- --------------- -------------------------------- ------------------- -----------"
-	for j in $(ls --time-style +%s -la "$NX_SESS_DIR"/{closed,failed,running} | awk '/sessionId/ { print $6 " " $7 }' | sort -n | cut -d" " -f2)
-	do
-		if [ -n "$sessionId" ]
-		then
-			[ "$j" = "sessionId{$sessionId}" ] || continue
-		fi
-		i="$NX_SESS_DIR"/*/"$j"
-		[ -f $i ] || break
-		CMDLINE=$(session_get_cmdline $i)
-		if [ -n "$userName" ]
-		then
-			[ "$userName" = "$(getparam userName)" ] || continue
-		fi
-		echo -e "$(getparam display)\t$(getparam userName)\t$(getparam foreignAddress)\t$(getparam sessionId)\t$(ls --time-style="+%F %X" -l $i | awk '/sessionId/ { print $6 " " $7 }')\t$(getparam status)"
-	done
-}
-
-# remove all sessions older than $SESSION_HISTORY seconds in failed/closed.
-
-session_cleanup()
-{
-	[ "$SESSION_HISTORY" -gt "-1" ] || return
-	let SESSION_HISTORY_MINUTES=$SESSION_HISTORY/60
-	find $NX_SESS_DIR/closed/ $NX_SESS_DIR/failed/ -type f -mmin +"$SESSION_HISTORY_MINUTES" -exec rm -f '{}' ';'
-}
-
-session_list_all()
-{
-	echo "NX> 127 Sessions list:"
-	echo
-	echo "Display Username        Remote IP       Session ID"
-	echo "------- --------------- --------------- --------------------------------"
-	for i in $NX_SESS_DIR/running/*
-	do
-		[ -f $i ] || break
-		CMDLINE=$(session_get_cmdline $i)
-		echo -e "$(getparam display)\t$(getparam userName)\t$(getparam foreignAddress)\t$(getparam sessionId)"
-	done
-}
-
-
-# session_add <session_id> <options>
-
-session_add()
-{
-	id=$1
-	shift
-	echo "$@" | tr '&' '\n' > $NX_SESS_DIR/running/sessionId'{'$id'}'
-}
-
-# session_change <session_id> <parameter> <new_value>
-
-session_change()
-{
-	[ -f $NX_SESS_DIR/running/sessionId'{'$1'}' ] && perl -pi -e "s/$2=.*/$2=$3/" $NX_SESS_DIR/running/sessionId'{'$1'}'
-}
-
-# session_id <new status>
-
-session_status()
-{
-	session_change "$1" "status" "$2"
-}
-
-# session_running <session_id>
-# return: true if running, false if not
-
-session_running()
-{
-	test -f $NX_SESS_DIR/running/sessionId'{'$1'}'
-}
-
-# session_close <session_id> <end-time>
-
-session_close()
-{
-	perl -pi -e "s/startTime=\(.*\)/startTime=\1\nendTime=$(date +%s)/" $NX_SESS_DIR/running/sessionId'{'$1'}'
-	session_status $1 "Finished"
-	[ "$SESSION_HISTORY" = "0" ] && rm -f $NX_SESS_DIR/running/sessionId'{'$1'}'
-	[ "$SESSION_HISTORY" = "0" ] || mv -f $NX_SESS_DIR/running/sessionId'{'$1'}' $NX_SESS_DIR/closed/sessionId'{'$1'}'
-}
-
-session_fail()
-{
-	perl -pi -e "s/startTime=\(.*\)/startTime=\1\nendTime=$(date +%s)/" $NX_SESS_DIR/running/sessionId'{'$1'}'
-	session_status $1 "Failed"
-	[ "$SESSION_HISTORY" = "0" ] && rm -f $NX_SESS_DIR/running/sessionId'{'$1'}'
-	[ "$SESSION_HISTORY" = "0" ] || mv -f $NX_SESS_DIR/running/sessionId'{'$1'}' $NX_SESS_DIR/failed/sessionId'{'$1'}'
-}
-
-session_suspend()
-{
-	session_status $1 "Suspended"
-	session_change $1 foreignAddress "-"
-}
-
-#
-# end of library
-#
-
-
-#
-# Main nxserver <-> nxclient communication module
-#
-
-if [ $USER = "nxfree" -o "$USER" = "nx" -o "$ENABLE_USERMODE_AUTHENTICATION" = "1" ]
-then
-
-setup_usermode_auth()
-{
-
-	[ $USER = "nxfree" -o "$USER" = "nx" ] && ENABLE_USERMODE_AUTHENTICATION="0"
-
-	if [ "$ENABLE_USERMODE_AUTHENTICATION" = "1" ]
-	then
-		export NX_SESS_DIR="$USER_FAKE_HOME/.nx/db/"
-		export NX_LOGFILE="$USER_FAKE_HOME/.nx/temp/nxserver.log"
-		mkdir -p $NX_SESS_DIR/{closed,running,failed}
-	fi
-}
-
-setup_usermode_auth
-
-# Loglevels:
-# 1: Errors
-# 2: Warnings
-# 3: Important information
-# 4: Server - Client communication
-# 5: Information
-# 6: Debugging information
-# 7: stderror-channel of some applications
-
-log()
-{
-	[ "$NX_LOG_LEVEL" -ge "$1" -a -w "$NX_LOGFILE" ] && shift && echo "$@" >> "$NX_LOGFILE"
-}
-
-# Log in a way that is secure for passwords / cookies / ...
-
-echo_secure()
-{
-	echo "$@ " | perl -pi -e 's/--cookie=".+?"/--cookie="******"/g; s/--agent_password=".+?"/agent_password="******"/g; s/--password=".+?"/password="******"/g; s/cookie=.+?&/cookie=******&/g; s/agent_password=.+?&/agent_password=******&/g; s/password=.+?&/password=******&/g;'
-}
-
-log_secure()
-{
-	if [ "$NX_LOG_SECURE" = "0" ]
-	then
-		log "$@"
-	else
-		[ "$NX_LOG_LEVEL" -ge "$1" -a -w "$NX_LOGFILE" ] && shift && echo_secure "$@" >> "$NX_LOGFILE"
-	fi
-}
-
-log_tee()
-{
-	[ "$NX_LOG_LEVEL" -ge "4" -a -w "$NX_LOGFILE" ] && exec tee -a "$NX_LOGFILE"
-	[ "$NX_LOG_LEVEL" -ge "4" -a -w "$NX_LOGFILE" ] || exec cat -
-}
-
-log_error()
-{
-	[ "$NX_LOG_LEVEL" -ge "7" -a -w "$NX_LOGFILE" ] && exec tee -a "$NX_LOGFILE"
-	[ "$NX_LOG_LEVEL" -ge "7" -a -w "$NX_LOGFILE" ] || exec cat - 
-}
-
-echo_x()
-{
-	log "4" "$@"
-	echo "$@"
-}
-
-
-#
-# needed for slave mode
-#
-
-nxnode_login_stop_slave()
-{
-	if [ -n "$NXNODE_LOGIN_SLAVE" ]
-	then
-		kill "$NXNODE_LOGIN_SLAVE"
-		sleep 2
-		kill -0 "$NXNODE_LOGIN_SLAVE" && kill -9 "$NXNODE_LOGIN_SLAVE"
-	fi
-}
-
-nxnode_login()
-{
-	PASS="$1"
-	shift
-
-	if [ "$NXNODE_LOGIN_SLAVE_ENABLED" != "1" ]
-	then
-		NXNODE_TOSEND="$NXNODE_TOSEND" echo $PASS | $PATH_BIN/nxnode-login "$@"
-	else
-		if [ -z "$NXNODE_LOGIN_SLAVE" ]
-		then
-			# Send password
-			echo "$PASS" >&4 
-
-			# Connect to NXNODE
-			
-			$PATH_BIN/nxnode-login "$1" "$2" "$3" "$4" "$5" "--slave" <&3 >&3 2>&3 &
-			NXNODE_LOGIN_SLAVE="$!"
-			disown $!
-
-			trap nxnode_login_stop_slave EXIT
-			
-			while read line <&4
-			do
-				log 6 "$line"
-				case "$line" in
-					"NX> 716 Slave mode started successfully.")
-						break
-					;;
-				esac
-			done
-
-			# TODO: KILL the slave node at end of session
-		fi
-		
-		#send CMD to nxnode
-		
-		echo "$6" >&4
-		[ -n "$NXNODE_TOSEND" ] && echo "$NXNODE_TOSEND" >&4
-
-		NXNODE_RETURN="1"
-
-		if [ -z "$NXNODE_READER" ]
-		then
-			while read line <&4
-			do
-				echo "$line"
-				case "$line" in
-					"NX> 716"*) 
-						NXNODE_RETURN="0"
-					;;
-					"NX> 1001"*)
-						break
-					;;
-				esac
-			done
-		fi
-		test "$NXNODE_RETURN" = "0"
-	fi
-}
-
-nxnode_login_register_reader()
-{
-	# Register a reader
-	NXNODE_READER="1"
-}
-
-#ENABLE_NXNODE_SLAVE_MODE="1"
-
-# Start!
-[ "$NX_LOG_LEVEL" -ge "1" ] && touch "$NX_LOGFILE" >/dev/null 2>&1
-log 3 "-- NX SERVER START: $@ - ORIG_COMMAND=$SSH_ORIGINAL_COMMAND"
-
-if [ "$ENABLE_SERVER_FORWARD" = "1" -a -n "$SERVER_FORWARD_HOST" ]
-then
-	log 3 "Info: Forwarding connection to $SERVER_FORWARD_HOST with secret key $SERVER_FORWARD_KEY."
-	$COMMAND_SSH -i "$SERVER_FORWARD_KEY" "-p$SERVER_FORWARD_PORT" "nx@$SERVER_FORWARD_HOST" "host=$SERVER_NAME"
-	exit 0
-fi
-
-# Get the hostname out of SSH_ORIGINAL_COMMAND
-PREFERRED_HOST=$(echo $SSH_ORIGINAL_COMMAND | tr '&' '\n' | grep "^host=" | cut -d'=' -f2)
-
-# forward the connection to commercial NoMachine server?
-if [ "$ENABLE_NOMACHINE_FORWARD_PORT" = "1" -a "$NOMACHINE_FORWARD_PORT" = "$(echo $SSH_CLIENT $SSH2_CLIENT| cut -d' ' -f3)" -a -n "$NOMACHINE_SERVER" ]
-then
-	log 3 "Info: Detected SSH destination port $NOMACHINE_FORWARD_PORT. Forwarding connection to commercial NoMachine server."
-	exec $NOMACHINE_SERVER
-	log 1 "Error: Forwarding to NoMachine Server $NOMACHINE_SERVER failed. Using FreeNX server instead."
-fi
-
-#
-# nxnode slave mode preparations
-#
-
-NXNODE_LOGIN_SLAVE_ENABLED="0"
-NXNODE_LOGIN_SLAVE=""
-
-if [ "$ENABLE_NXNODE_SLAVE_MODE" = "1" -a "$NXSERVER_HELPER_ACTIVE" != "1" ]
-then
-	export SSH_ORIGINAL_COMMAND
-	export NXSERVER_HELPER_ACTIVE="1"
-	exec $PATH_BIN/nxserver-helper "$0"
-	log 1 "Error: Execution of $PATH_BIN/nxserver-helper failed. Disabling slave mode of nxnode."
-fi
-
-if [ "$ENABLE_NXNODE_SLAVE_MODE" = "1" -a "$NXSERVER_HELPER_ACTIVE" = "1" ]
-then
-	log 3 "Info: Using fds #3 and #4 for communication with nxnode."
-	NXNODE_LOGIN_SLAVE_ENABLED="1"
-fi
-
-echo_x "HELLO NXSERVER - Version $NX_VERSION $NX_LICENSE"
-
-# Login stage
-while true
-do
-	echo_x -n "NX> 105 "
-	read CMD
-	# FIXME?
-	[ "$CMD" = "" ] && CMD="quit"
-	echo_x "$CMD"
-	
-	case "$CMD" in 
-		quit|QUIT)
-			echo_x "Quit"
-			echo_x "NX> 999 Bye"
-			exit 0
-		;;
-		exit|EXIT)
-			echo_x "Exit"
-			echo_x "NX> 999 Bye"
-			exit 0
-		;;
-		bye|BYE)
-			echo_x "Bye"
-			echo_x "NX> 999 Bye"
-			exit 0
-		;;
-		hello*|HELLO*)
-			PROTO=$(echo $CMD | sed 's/.*Version \(.*\)/\1/g')
-			echo_x "NX> 134 Accepted protocol: $PROTO"
-			if [ "$PROTO" = "1.3.0" -o "$PROTO" = "1.3.2" ]
-			then
-				[ "$ENABLE_AUTORECONNECT_BEFORE_140" = "1" ] && ENABLE_AUTORECONNECT="1"
-			fi
-		;;
-		"set auth_mode*"|"SET AUTH_MODE*")
-			if [ "$CMD" = "set auth_mode password" -o "$CMD" = "SET AUTH_MODE PASSWORD" ]
-			then
-				echo_x "Set auth_mode: password"
-			else
-				echo_x "NX> 500 ERROR: unknown auth mode ''"
-			fi
-		;;
-		login|LOGIN)
-			LOGIN_SUCCESS="0"
-			
-			echo_x -n "NX> 101 User: "
-			read USER
-			echo_x $USER
-			
-			echo_x -n "NX> 102 Password: "
-			read -s PASS
-			echo_x ""
-			log 6 -n "Info: Auth method: "
-			
-			# USER already logged in?
-			if [ "$ENABLE_USERMODE_AUTHENTICATION" = "1" ]
-			then
-				LOGIN_SUCCESS="1"
-				LOGIN_METHOD="USERMODE"
-				USER=$(whoami)
-			fi
-
-			# PASSDB based auth
-			if [ "$ENABLE_PASSDB_AUTHENTICATION" = "1" -a "$LOGIN_SUCCESS" = "0" ]
-			then
-				log 6 -n "passdb "
-				if [ $(passdb_get_crypt_pass "$PASS") = $(passdb_get_pass "$USER") ]
-				then
-					LOGIN_SUCCESS="1"
-					LOGIN_METHOD="PASSDB"
-				fi
-			fi
-
-			# SSH based auth
-			if [ "$ENABLE_SSH_AUTHENTICATION" = "1" -a "$LOGIN_SUCCESS" = "0" ]
-			then
-				log 6 -n "ssh "
-				export COMMAND_SSH			
-				nxnode_login "$PASS" -- ssh "$USER" "$SSHD_PORT" "$PATH_BIN/nxnode" --check 2>&1 >/dev/null
-				if [ $? -eq 0 ]
-				then
-					LOGIN_SUCCESS="1"
-					LOGIN_METHOD="SSH"
-				fi
-			fi
-			
-			# SU based auth
-			if [ "$ENABLE_SU_AUTHENTICATION" = "1" -a "$LOGIN_SUCCESS" = "0" ]
-			then
-				log 6 -n "su "
-				nxnode_login "$PASS" -- su "$USER" "" "$PATH_BIN/nxnode" --check 2>&1 >/dev/null
-				if [ $? -eq 0 ]
-				then
-					LOGIN_SUCCESS="1"
-					LOGIN_METHOD="SU"
-				fi
-			fi
-			
-			# Check if user in passdb
-			if [ "$ENABLE_USER_DB" = "1" ]
-			then
-				log 6 "userdb check"
-				passdb_user_exists "$USER" || LOGIN_SUCCESS="0"
-			fi
-			log 6 ""
-
-			if [ "$LOGIN_SUCCESS" = "1" ]
-			then
-				# Reread the config files (so that $USER.node.conf get sourced)
-				. $(PATH=$(cd $(dirname $0) && pwd):$PATH which nxloadconfig) --userconf
-				setup_usermode_auth
-
-				echo_x "NX> 103 Welcome to: $SERVER_NAME user: $USER"
-				break
-			else
-				echo_x "NX> 404 ERROR: wrong password or login"
-				echo_x "NX> 999 Bye"
-				exit 1
-			fi
-		;;
-	esac
-done
-
-# remove old session infos from history
-session_cleanup
-
-#
-# call it with: server_get_params $CMD # no ""!
-#
-
-server_get_params()
-{
-	SERVER_PARAMS=$(echo "$@" | sed "s/^$1/\"/g; s/\" --/\&/g; s/\"//g; s/%20/ /g")
-	if [ "$SERVER_PARAMS" = "" ]
-	then
-		echo_x -n "NX> 106 Parameters: "
-		read SERVER_PARAMS2
-		SERVER_PARAMS=$(echo $SERVER_PARAMS2 | sed 's/%2B/+/g; s/%20/ /g')
-		echo_x
-	fi
-}
-
-nxnode_start()
-{
-	:
-	#CMD="$1"
-	#shift
-	#echo "$@" | $PATH_BIN/nxnode "$CMD"
-}
-
-#NX> 1002 Commit
-#NX> 1006 Session status: running
-
-server_nxnode_start()
-{
-	CMD="$1"
-	USER="$2"
-	shift
-	shift
-
-	# Find NODE_HOSTNAME
-	
-	NODE_HOSTNAME=""
-	CMDLINE="$@"
-	uniqueid=$(getparam uniqueid)
-	[ -z "$uniqueid" ] && uniqueid=$(getparam sessionid)
-	[ -z "$uniqueid" ] && uniqueid=$(getparam session_id)
-	CMDLINE=$(session_get "$uniqueid")
-	
-	NODE_HOSTNAME="$(getparam host)"
-	[ -z "$NODE_HOSTNAME" ] && NODE_HOSTNAME="127.0.0.1"
-	export NODE_HOSTNAME
-	
-	# Use nxnode-login?
-	if [ "$LOGIN_METHOD" = "SSH" ]
-	then
-	    export COMMAND_SSH
-	    NXNODE_TOSEND="$@" nxnode_login "$PASS" -- ssh "$USER" "$SSHD_PORT" "$PATH_BIN/nxnode" "$CMD" 2>&1 | log_tee
-	elif [ "$LOGIN_METHOD" = "SU" ]
-	then
-	    NXNODE_TOSEND="$@" nxnode_login "$PASS" -- su "$USER" "" "$PATH_BIN/nxnode" "$CMD" 2>&1 | log_tee
-	elif [ "$LOGIN_METHOD" = "USERMODE" ]
-	then
-	    echo "$@" | $PATH_BIN/nxnode "$CMD" 2>&1 | log_tee
-	else
-	    echo "$@" | $COMMAND_SSH -l "$USER" "$NODE_HOSTNAME" -p $SSHD_PORT -x -2 -i $NX_ETC_DIR/users.id_dsa -o 'PubkeyAuthentication yes' -o 'RSAAuthentication yes' -o 'RhostsAuthentication no' -o 'PasswordAuthentication no' -o 'RhostsRSAAuthentication no' -o 'StrictHostKeyChecking no' $PATH_BIN/nxnode "$CMD" | log_tee
-	fi
-}
-
-server_add_usession()
-{
-	[ "$ENABLE_USESSION" = "1" ] || return
-	
-	$COMMAND_SESSREG -l ":$SESS_DISPLAY" -h "$USERIP" -a $USER 2>&1 | log_error
-}
-
-server_remove_usession()
-{
-	[ "$ENABLE_USESSION" = "1" ] || return
-	$COMMAND_SESSREG -l ":$SESS_DISPLAY" -h "$USERIP" -d $USER 2>&1 | log_error
-}
-
-server_nxnode_echo()
-{
-	log 6 "server_nxnode_echo: $@"
-	[ "$SERVER_CHANNEL" = "1" ] && echo "$@"
-	[ "$SERVER_CHANNEL" = "2" ] && echo "$@" >&2
-}
-
-server_nxnode_exit_func()
-{
-	log 1 "Info: Emergency-Shutting down due to kill signal ..."
-	
-	session_fail $uniqueid
-	
-	server_remove_usession
-
-	# remove lock file
-	[ -e "/tmp/.nX$SESS_DISPLAY-lock" ] && rm -f /tmp/.nX$SESS_DISPLAY-lock
-
-	# Kill possible slave node
-	nxnode_login_stop_slave
-}
-
-server_nxnode_start_wait()
-{
-	if [ "$1" = "--startsession" ]
-	then
-	
-	server_add_usession
-
-	# We need to stop sending things when a SIGPIPE arrives
-	trap "SERVER_CHANNEL=0" SIGPIPE
-	
-	trap server_nxnode_exit_func EXIT
-	
-	SERVER_CHANNEL=1
-	KILL_WAIT_PID=1
-	server_nxnode_start "$@" | while read CMD
-	do
-		case "$CMD" in 
-			"NX> 1006"*|"NX> 1005"*|"NX> 1009"*)
-				case "$CMD" in 
-					*running*)
-						[ "$KILL_WAIT_PID" = "1" ] && kill $SERVER_WAIT_PID
-						KILL_WAIT_PID=0
-						log 6 session_status $uniqueid "Running"
-						session_status $uniqueid "Running"
-						[ "$SERVER_CHANNEL" = "1" ] && SERVER_CHANNEL=2
-					;;
-					*closed*)
-						log 6 session_close $uniqueid
-						session_close $uniqueid
-					;;
-					*suspended*)
-						[ "$KILL_WAIT_PID" = "1" ] && kill $SERVER_WAIT_PID
-						KILL_WAIT_PID=0
-						log 6 session_suspend $uniqueid
-						session_suspend $uniqueid
-					;;
-					*suspending*)
-						log 6 session_status $uniqueid "Suspending"
-						session_status $uniqueid "Suspending"
-						# we need to stop sending to client as it will have already
-						# closed his side of the channel and this will lead to not 
-						# closed sessions.
-						SERVER_CHANNEL=0
-					;;
-					*terminating*)
-						log 6 session_status $uniqueid "Terminating"
-						session_status $uniqueid "Terminating"
-						# we need to stop sending to client as it will have already
-						# closed his side of the channel and this will lead to not 
-						# closed sessions.
-						SERVER_CHANNEL=0
-				esac
-			;;
-			"NX> 1004"*)
-				[ "$KILL_WAIT_PID" = "1" ] && kill $SERVER_WAIT_PID
-				KILL_WAIT_PID=0
-				session_fail $uniqueid
-				server_nxnode_echo "NX> 596 Session startup failed."
-				log 4 "NX> 596 Session startup failed."
-			;;
-		esac
-
-		case $CMD in
-			"NX> "*)
-				server_nxnode_echo $CMD
-			;;
-		esac
-	done
-
-	trap - EXIT
-	trap - SIGPIPE
-	
-	# Close it in case the session is still running
-	session_running $uniqueid && session_close $uniqueid
-	
-	server_remove_usession
-
-	# remove lock file
-	[ -e "/tmp/.nX$SESS_DISPLAY-lock" ] && rm -f /tmp/.nX$SESS_DISPLAY-lock
-
-	nxnode_login_stop_slave
-
-	else # $1 = restore
-	
-	KILL_WAIT_PID=1
-	SERVER_CHANNEL=1
-	server_nxnode_start "$@" | while read CMD
-	do
-		case "$CMD" in 
-			"NX> 1006"*|"NX> 1005"*|"NX> 1009"*)
-				case "$CMD" in 
-					*running*)
-						[ "$KILL_WAIT_PID" = "1" ] && kill $SERVER_WAIT_PID
-						KILL_WAIT_PID=0
-						SERVER_CHANNEL=2
-					;;
-				esac
-			;;
-			"NX> 1004"*)
-				[ "$KILL_WAIT_PID" = "1" ] && kill $SERVER_WAIT_PID
-				KILL_WAIT_PID=0
-				
-				# This fail is correct here as somehow the 
-				# monitor process might have died and we don't 
-				# want the session to be resumed again.
-				
-				session_fail $uniqueid
-				
-				server_nxnode_echo "NX> 596 Session startup failed."
-				log 4 "NX> 596 Session startup failed."
-				break;
-			;;
-		esac
-	
-		case $CMD in
-			"NX> "*)
-				server_nxnode_echo $CMD
-			;;
-		esac
-	done
-	
-	nxnode_login_stop_slave
-	
-	fi # $1 = start
-}
-
-server_check_session_count()
-{
-	session_count_user "$USER"
-	
-	if [ "$SESSION_COUNT" -ge "$SESSION_LIMIT" ]
-	then
-		echo_x "NX> 599 Reached the maximum number of concurrent sessions on this server."
-		echo_x "NX> 500 ERROR: Last operation failed."
-		return 1
-	fi
-	
-	if [ "$SESSION_COUNT_USER" -ge "$SESSION_USER_LIMIT" ]
-	then
-		echo_x "NX> 599 Server capacity: reached for user: $USER"
-		echo_x "NX> 500 ERROR: Last operation failed."
-		return 1
-	fi
-
-	return 0
-}
-
-server_loadbalance_random()
-{
-	# Pick one based on "random" algorithm
-	SERVER_LB_HOSTS=( $LOAD_BALANCE_SERVERS )
-	SERVER_LB_NR_OF_HOSTS=${#SERVER_LB_HOSTS[@]}
-	let SERVER_LB_NR=(RANDOM % SERVER_LB_NR_OF_HOSTS)
-	SERVER_LB_HOST=${SERVER_LB_HOSTS[$SERVER_LB_NR]}
-	echo $SERVER_LB_HOST
-}
-
-# run in subshell!
-
-server_loadbalance_round_robin()
-{
-	SERVER_LB_HOSTS=( $LOAD_BALANCE_SERVERS )
-	SERVER_LB_NR_OF_HOSTS=${#SERVER_LB_HOSTS[@]}
-	
-	# Atomic incrementation:
-
-	# Enter critical section
-	# - Create .lock file
-	
-	SERVER_LB_LOCKFILE=$(mktemp "$NX_SESS_DIR/round-robin.lock.XXXXXXXXX")
-
-	trap "rm -f $SERVER_LB_LOCKFILE" EXIT
-	
-	i=0
-	while [ $i -lt 200 ]
-	do
-		# ln is an atomic operation
-		ln $SERVER_LB_LOCKFILE "$NX_SESS_DIR/round-robin.lock" && break
-		LANG=C sleep 0.01
-		let i=i+1
-	done
-
-	if [ $i -ge 200 ]
-	then
-		log 1 "Load-Balancing: Round-Robin failed to gain lock file in 200 tries. Falling back to random."
-		server_loadbalance_random
-		return
-	fi
-	
-	trap "rm -f $SERVER_LB_LOCKFILE $NX_SESS_DIR/round-robin.lock" EXIT
-
-	# Lock held
-
-	SERVER_LB_NR=$(cat $NX_SESS_DIR/round-robin 2>/dev/null)
-	let SERVER_LB_NR=(SERVER_LB_NR+1) % SERVER_LB_NR_OF_HOSTS
-	echo $SERVER_LB_NR >$NX_SESS_DIR/round-robin
-
-	# Exit critical section
-	rm -f "$SERVER_LB_LOCKFILE $NX_SESS_DIR/round-robin.lock"
-
-	trap - EXIT
-
-	SERVER_LB_HOST=${SERVER_LB_HOSTS[$SERVER_LB_NR]}
-	echo $SERVER_LB_HOST
-}
-
-server_loadbalance_load()
-{
-	SERVER_LB_MAX=0
-	SERVER_LB_HOST=""
-	
-	for i in $LOAD_BALANCE_SERVERS
-	do
-		SERVER_LB_LOAD=$($NX_DIR/bin/nxcheckload $i)
-		[ -z "$SERVER_LB_LOAD" ] && continue
-		
-		if [ $SERVER_LB_LOAD -gt $SERVER_LB_MAX ]
-		then
-			SERVER_LB_MAX=$SERVER_LB_LOAD
-			SERVER_LB_HOST=$i
-		fi
-	done
-	echo $SERVER_LB_HOST
-}
-
-server_loadbalance()
-{
-	SERVER_HOST="127.0.0.1"
-	if [ -n "$LOAD_BALANCE_SERVERS" ]
-	then
-		SERVER_HOST=""
-		if [ -n "$PREFERRED_HOST" -a "$ENABLE_LOAD_BALANCE_PREFERENCE" = "1" ]
-		then
-			stringinstring " $PREFERRED_HOST " " $LOAD_BALANCE_SERVERS " && SERVER_HOST="$PREFERRED_HOST"
-		fi
-		
-		# Fallback if still empty
-		if [ -z "$SERVER_HOST" ]
-		then
-			case "$LOAD_BALANCE_ALGORITHM" in
-				random)
-					SERVER_HOST=$(server_loadbalance_random)
-				;;
-				round-robin)
-					SERVER_HOST=$(server_loadbalance_round_robin)
-				;;
-				load)
-					SERVER_HOST=$(server_loadbalance_load)
-				;;
-			esac
-		fi
-		
-		[ -z "$SERVER_HOST" ] && SERVER_HOST="127.0.0.1"
-		[ -n "$SERVER_HOST" ] && log 5 "Info: Load-Balancing (if possible) to $SERVER_HOST ..."
-	fi
-	echo "$SERVER_HOST"
-}	
-
-server_startrestore_session()
-{
-	ACTION="$1"
-	
-	server_get_params $CMD
-	PARAMS=$SERVER_PARAMS
-	PARAMS="$PARAMS&clientproto=$PROTO"
-	CMDLINE=$PARAMS
-	echo_x
-	
-	# If we can't get the userip and SSHD_CHECK_IP is set to 1
-	# we bail out.
-	if [ -z "$SSH_CLIENT" -a -z "$SSH2_CLIENT" ]
-	then 
-		if [ "$SSHD_CHECK_IP" = "1" ]
-		then
-			echo_x "NX> 596 Session startup failed. (Missing SSH_CLIENT environment variable)"
-			return 1
-		else
-			log 2 "Warning: Failed to determine the client IP."
-			log 2 "Warning: The SSH_CLIENT or SSH2_CLIENT variable was not provided by SSHD."
-			log 2 "Warning: Please set SSHD_CHECK_IP=1 if you want to refuse the connection."
-		fi
-	fi
-	
-	export ENCRYPTION=$(getparam encryption)
-	
-	if [ "$ENABLE_FORCE_ENCRYPTION" = "1" -a "$ENCRYPTION" != "1" ]
-	then
-			echo_x "NX> 596 Unencrypted sessions are not allowed."
-			return 1
-	fi
-
-	# check if there is a suspended session, which we could resume
-	if [ "$ENABLE_AUTORECONNECT" = "1" -a "$ACTION" = "start" ]
-	then
-		restore=$(session_get_user_suspended "$USER" "Suspended")
-		if [ -n "$restore" ]
-		then
-			PARAMS="$PARAMS&restore=$restore"
-			CMDLINE=$PARAMS
-			ACTION="resume"
-		fi
-	fi
-
-	# as only $SSH_CLIENT or $SSH2_CLIENT will be set, this should work
-	USERIP=$(echo $SSH_CLIENT $SSH2_CLIENT | cut -d" " -f1 | sed 's/::ffff://g')
-	[ -z "$USERIP" ] && USERIP="*"
-	if [ "$ACTION" = "start" ]
-	then
-		server_check_session_count || return 1
-		
-		# start nxnode
-		SESS_DISPLAY=$DISPLAY_BASE
-		let SESS_DISPLAY_LIMIT=$DISPLAY_BASE+$DISPLAY_LIMIT
-	
-		# stupid but working algo ...
-			
-		# TODO: need to check for _all_ offset and ports :-/
-			
-		while true
-		do
-			while [ -e /tmp/.X$SESS_DISPLAY-lock -o -e "/tmp/.nX$SESS_DISPLAY-lock" ]
-			do
-				let SESS_DISPLAY=$SESS_DISPLAY+1
-			done
-
-			# Check if there is already an agent running on that display
-			let AGENT_DISPLAY=$SESS_DISPLAY+6000
-			if $COMMAND_NETCAT -z 127.0.0.1 $AGENT_DISPLAY 2>/dev/null
-			then
-				log 2 "Warning: Stray nxagent without .X$SESS_DISPLAY-lock found on port $AGENT_DISPLAY."
-				let SESS_DISPLAY=$SESS_DISPLAY+1
-				continue
-			fi
-			
-
-			SESS_LOCKFILE=$(mktemp "/tmp/.nX$SESS_DISPLAY-lock.XXXXXXXXX")
-			# ln is an atomic operation
-			ln "$SESS_LOCKFILE" "/tmp/.nX$SESS_DISPLAY-lock" 2>/dev/null && break
-		done
-
-		rm -f "$SESS_LOCKFILE"
-		
-		if [ "$SESS_DISPLAY" -gt "$SESS_DISPLAY_LIMIT" ]
-		then
-			echo_x "NX> 596 Error: Display limit exceeded. Please remove some files from /tmp/.X*-lock."
-			rm -f "/tmp/.nX$SESS_DISPLAY-lock"
-			return
-		fi
-	
-		uniqueid=$(echo $[$RANDOM*$RANDOM] | $COMMAND_MD5SUM | cut -d" " -f1 | tr "[a-z]" "[A-Z]")
-
-		# Possibly do loadbalancing
-		
-		SERVER_HOST=$(server_loadbalance)
-		
-		FULL_PARAMS="$PARAMS&user=$USER&userip=$USERIP&uniqueid=$uniqueid&display=$SESS_DISPLAY&host=$SERVER_HOST"
-		log_secure "6" "$FULL_PARAMS"
-
-		# now update the session listing
-		sessionRootlessMode=0
-		[ "$(getparam rootless)" = "1" ] && sessionRootlessMode=1
-		CMDLINE="a=b&$FULL_PARAMS"
-		session_add $uniqueid "sessionName=$(getparam session)&display=$(getparam display)&status=Running&startTime=$(date +%s)&foreignAddress=$(getparam userip)&sessionRootlessMode=$sessionRootlessMode&type=$(getparam type)&sessionId=$uniqueid&creationTime=$(date +%s)&userName=$USER&serverPid=$SERVER_PID&screeninfo=$(getparam screeninfo)&geometry=$(getparam geometry)&host=$SERVER_HOST"
-	else
-		uniqueid=$(getparam restore)
-		[ -z "$uniqueid" ] && uniqueid=$(getparam id) # 1.4.0-5 compatibility
-		session_change "$uniqueid" "foreignAddress" "$USERIP"
-
-		CMDLINE=$(session_get "$uniqueid")
-		FULL_PARAMS="$PARAMS&user=$USER&userip=$(getparam foreignAddress)&uniqueid=$uniqueid&display=$(getparam display)&status=$(getparam status)"
-		SESS_DISPLAY=$(getparam display)
-		SERVER_HOST=$(getparam host)
-		[ -z "$SERVER_HOST" ] && SERVER_HOST="127.0.0.1"
-	fi
-
-	# now start the node
-	sleep $AGENT_STARTUP_TIMEOUT &
-	SERVER_WAIT_PID=$!
-	( server_nxnode_start_wait --"$ACTION"session $USER "$FULL_PARAMS" ) &
-	SERVER_PID=$!
-	disown $SERVER_PID
-	
-	wait $SERVER_WAIT_PID
-	
-	if [ $? -eq 0 ]
-	then
-		# Something went wrong ...
-		[ "$ACTION" = "start" ] && session_fail $uniqueid
-		echo_x "NX> 1004 Error: Session did not start."
-		echo_x "NX> 596 Session $ACTION failed."
-		echo_x "NX> 999 Bye"
-		# FIXME: Send node signal to terminate
-		exit 1
-	fi
-	
-	# We have now an active reader
-	nxnode_login_register_reader
-}
-
-# Session stage
-while true
-do
-	echo_x -n "NX> 105 "
-	unset CMD
-	read CMD 2>/dev/null
-	# FIXME?
-	[ "$CMD" = "" ] && CMD="quit"
-	
-	# Logging 
-	case "$CMD" in
-		startsession*|restoresession*|addmount*|addprinter*)
-			echo_secure "$CMD"
-			log_secure "4" "$CMD"
-		;;
-		*)
-			echo "$CMD"
-			log "4" "$CMD"
-		;;
-	esac
-	
-	case "$CMD" in 
-		quit|QUIT)
-			echo_x "Quit"
-			echo_x "NX> 999 Bye"
-			exit 0
-		;;
-		exit|EXIT)
-			echo_x "Exit"
-			echo_x "NX> 999 Bye"
-			exit 0
-		;;
-		bye|BYE)
-			echo_x "Bye" 1>&2
-			echo_x "NX> 999 Bye" 1>&2
-			if [ "$ENCRYPTION" = "1" ] 
-			then 
-				let PROXY_DISPLAY=$SESS_DISPLAY+4000
-				exec $COMMAND_NETCAT $SERVER_HOST $PROXY_DISPLAY
-			else
-				echo_x "NX> 1001 Bye."
-			fi
-		;;
-		startsession*)
-			server_startrestore_session "start"
-		;;
-		list*)
-			server_get_params $CMD
-			PARAMS=$SERVER_PARAMS
-			CMDLINE=$PARAMS
-			
-			status=$(getparam status)
-
-			if [ "$status" = "Suspended" -a -n "$(getparam screeninfo)" ]
-			then
-				session_list_user_suspended "$USER" "Suspended" "$(getparam screeninfo)" "$(getparam type)" | log_tee
-			elif [ "$status" = "Suspended,Running" -o "$status" = "Suspended" ] # since 1.4.0-5
-			then
-				# disabled due to problems with 1.4.0-5 client
-				#session_list_user_suspended "$USER" 'Suspended$|^status=Running$' "$(getparam geometry)" "$(getparam type)" | log_tee
-				session_list_user_suspended "$USER" 'Suspended' "$(getparam geometry)" "$(getparam type)" | log_tee
-			elif [ "$status" = "suspended,running" -o "$status" = "suspended" ] # since 1.5.0
-			then
-				status=$(echo $status | sed 's/,/$|^status=/g; s/suspended/Suspended/g; s/running/Running/g')
-				session_list_user_suspended "$USER" "$status" "$(getparam geometry)" "$(getparam type)" | log_tee
-			else
-				session_list_user "$USER" | log_tee
-			fi
-		;;
-		suspend*)
-			server_get_params $CMD
-			PARAMS=$SERVER_PARAMS
-			CMDLINE=$PARAMS
-			if session_find_id_user "$(getparam sessionid)" "$USER"
-			then
-				server_nxnode_start --suspend "$USER" "$PARAMS"
-			fi
-		;;
-		terminate*)
-			server_get_params $CMD
-			PARAMS=$SERVER_PARAMS
-			CMDLINE=$PARAMS
-			if session_find_id_user "$(getparam sessionid)" "$USER"
-			then
-				server_nxnode_start --terminate "$USER" "$PARAMS"
-			fi
-		;;
-		restoresession*)
-			server_startrestore_session "resume"
-		;;
-		passwd)
-			echo_x "NX> 113 Changing password of user '$USER'"
-			echo_x -n "NX> 102 Current password:"
-			read -s PASS
-			ENC_PASS=$(passdb_get_crypt_pass "$PASS")
-			REAL_PASS=$(passdb_get_pass "$USER")
-			echo_x
-			if [ "$ENC_PASS" = "$REAL_PASS" ]
-			then
-				echo_x -n "NX> 102 Password:"
-				read -s NEW_PASS1
-				
-				if [ ${#NEW_PASS1} -lt 5 ]
-				then
-					echo_x "NX> 500 ERROR: incorrect password format, password must be long at least five characters"
-					continue
-				fi
-
-				echo_x
-				echo_x -n "NX> 102 Confirm password:"
-				read -s NEW_PASS1
-				echo_x
-				if [ "$NEW_PASS1" = "$NEW_PASS2" ]
-				then
-					ENC_PASS=$(passdb_get_crypt_pass "$NEW_PASS1")
-					passdb_chpass "$USER" "$ENC_PASS"
-					echo_x "NX> 114 Password of user '$USER' changed"
-				else
-					echo_x "NX> 537 ERROR: passwords do not match"
-				fi
-			else
-				echo_x "NX> 500 ERROR: current password doesn't match"
-			fi
-		;;
-		addmount*)
-			server_get_params $CMD
-			PARAMS=$SERVER_PARAMS
-			# TODO: This redirection is crap here.
-			server_nxnode_start --smbmount "$USER" "$PARAMS" >/dev/null 2>&1 | log_error >/dev/null
-			echo_x "NX> 719 SMB filesystem: running"
-		;;
-		addprinter*)
-			server_get_params $CMD
-			PARAMS=$SERVER_PARAMS
-			# TODO: This redirecion is crap here.
-			server_nxnode_start --addprinter "$USER" "$PARAMS" >/dev/null 2>&1 | log_error >/dev/null
-			echo_x "NX> 719 CUPS printer: running"
-		;;
-		*)
-			# disabled for 1.4.0-5 snapshot client
-			#echo_x "NX> 503 Error: undefined command: '$CMD'"
-		;;
-	esac
-done
-
-fi
-
-#
-# End of Main nxserver <--> nxclient communication module
-#
-
-################### PACKAGE cmd.bm ############################
-
-#
-# library functions for nxserver-commandline cmds
-#
-
-# Policy: All functions and variables need to start with CMD_ / cmd_
-
-# Needed global vars: $NX_VERSION, $NX_LICENSE, $NX_ETC_DIR, $PATH_BIN, $NX_HOME_DIR, $SSH_AUTHORIZED_KEYS
-
-# Needed package: passdb
-
-cmd_usage()
-{
-	echo "NXSERVER - Version $NX_VERSION $NX_LICENSE" 1>&2
-	echo "Usage: nxserver <option>" 1>&2
-
-	if [ "$1" = "root" ]
-	then
-		echo "--adduser <user>: Add a new user" 1>&2
-		echo "--passwd <user>: Change password of <user>" 1>&2
-		echo "--deluser <user>: Remove a user from nx" 1>&2
-		echo "--listuser: List enabled users" 1>&2
-		echo "" 1>&2
-		echo "--start: Start the nx server" 1>&2
-		echo "--stop: Stop the nx server" 1>&2
-		echo "--status: Show status of nx server" 1>&2
-		echo "--restart: Restart the nx server. (start,stop)" 1>&2
-		echo "" 1>&2
-		echo "--list [ user | sessionid ]: List running sessions of user or sessionid " 1>&2
-		echo "--history [ user | sessionid | clear ]: Show history [ of user | sessionid ] or clear the history" 1>&2
-		echo "--terminate <user | :display | sessionid>: Terminate the session pointed to by" 1>&2
-		echo "       sessionid or display, or all sessions of the specified user." 1>&2
-		echo "       Use * for all sessions." 1>&2
-		echo "--force-terminate: Like terminate, but removes also session info." 1>&2
-		echo "--suspend <user | :display | sessionid>: Suspend the session pointed to by" 1>&2
-		echo "       sessionid or display, or all sessions of the specified user." 1>&2
-		echo "       Use * for all sessions." 1>&2
-		echo "--cleanup: Terminates all running sessions. Useful after power-outage."
-		echo "" 1>&2
-		echo "--broadcast <message>: Send a message to all users" 1>&2
-		echo "--send <user | :display | sessionid> <message>: Send a message to the specified user or sessionid" 1>&2
-	else
-		echo "--passwd: Change password" 1>&2
-	fi
-	exit 1
-}
-
-
-cmd_abort()
-{
-	echo "NX> 500" "$@" 1>&2
-	echo "NX> 999 Bye" 1>&2
-	exit 1
-}
-
-cmd_user_passwd()
-{
-	echo "NX> 100 NXSERVER - Version $NX_VERSION $NX_LICENSE"
-	echo "Sorry: Password changing for user is _not_ implemented, yet."
-	echo "Please login to NX-Server to change password"
-	echo "or ask your local system administrator."
-	#echo "NX> 113 Changing password of user '$USER'"
-	#echo "Old password:"
-	#read -s OLDPASS
-	#echo "New password:"
-	#read -s NEWPASS1
-	#echo "Repeat:"
-	#read -s NEWPASS2
-
-}
-
-cmd_passwd()
-{
-	CMD_CHUSER=$2
-	egrep -q "^$CMD_CHUSER:" $NX_ETC_DIR/passwords || cmd_abort "Error: User $CMD_CHUSER not found in database."
-	echo -n "New password: "
-	read -s CMD_NEWPASS
-	echo
-	CMD_ENC_PASS=$(passdb_get_crypt_pass "$CMD_NEWPASS")
-	passdb_chpass "$CMD_CHUSER" "$CMD_ENC_PASS"
-	echo "Password changed."
-}
-
-cmd_adduser()
-{
-	CMD_CHUSER=$2
-	
-	[ ${#CMD_CHUSER} -ge 32 ] && cmd_abort "Error: User $CMD_CHUSER must be shorter than 32 characters."
-	egrep -q "^$CMD_CHUSER:" $NX_ETC_DIR/passwords && cmd_abort "Error: User $CMD_CHUSER already in database."
-	getent passwd "$CMD_CHUSER" >/dev/null || cmd_abort "Error: User $CMD_CHUSER not existing on local system. Can't add."
-	passdb_add_user "$CMD_CHUSER"
-}
-
-cmd_deluser()
-{
-	CMD_CHUSER=$2
-	egrep -q "^$CMD_CHUSER:" $NX_ETC_DIR/passwords || cmd_abort "Error: User $CMD_CHUSER not found in database."
-	passdb_remove_user "$CMD_CHUSER"
-}
-
-cmd_listuser()
-{
-	echo "NX> 146 NX users list"
-	echo
-	echo "Username"
-	echo "---------------"
-	echo
-	passdb_list_user
-	echo
-}
-
-cmd_start()
-{
-	
-	[ -f $NX_HOME_DIR/.ssh/$SSH_AUTHORIZED_KEYS ] && cmd_abort "ERROR: Service already running"
-	mv $NX_HOME_DIR/.ssh/$SSH_AUTHORIZED_KEYS.disabled $NX_HOME_DIR/.ssh/$SSH_AUTHORIZED_KEYS
-	echo "NX> 122 Service started"
-}
-
-cmd_stop()
-{
-	[ -f $NX_HOME_DIR/.ssh/$SSH_AUTHORIZED_KEYS ] || cmd_abort "Service was already stopped"
-	mv $NX_HOME_DIR/.ssh/$SSH_AUTHORIZED_KEYS $NX_HOME_DIR/.ssh/$SSH_AUTHORIZED_KEYS.disabled
-	echo "NX> 123 Service stopped"
-}
-
-cmd_status()
-{
-	[ -f $NX_HOME_DIR/.ssh/$SSH_AUTHORIZED_KEYS ] && echo "NX> 110 NX Server is running"
-	[ -f $NX_HOME_DIR/.ssh/$SSH_AUTHORIZED_KEYS ] || echo "NX> 110 NX Server is stopped"
-}
-
-cmd_restart()
-{
-	cmd_stop
-	cmd_start
-}
-
-cmd_parse_2_params()
-{
-	if [ ${#1} -eq 32 ]
-	then
-		CMD_APARAMS="sessionid=sessionId{$1}"
-	else
-	if [ "$1" != "" ]
-	then
-		#egrep -q "^$1:" $NX_ETC_DIR/passwords || cmd_abort "Error: User $1 not found in database."
-		CMD_APARAMS="user=$1"
-	fi
-	fi
-	echo $CMD_APARAMS
-
-}
-
-cmd_parse_3_params()
-{
-	if [ ${#1} -eq 32 ]
-	then
-		CMD_APARAMS=$(session_find_id $1)
-		[ -n "$CMD_APARAMS" ] || cmd_abort "Error: Session $1 could not be found."
-	elif [ "${1:0:1}" = ":" ]
-	then
-		CMD_APARAMS=$(session_find_display "${1:1}")
-		[ -n "$CMD_APARAMS" ] || cmd_abort "Error: No running sessions found for display $1."
-	elif [ "$1" = "*" ]
-	then
-		CMD_APARAMS=$(session_find_all)
-		[ -n "$CMD_APARAMS" ] || cmd_abort "Error: No running sessions found."
-	elif [ "$1" != "" ]
-	then
-		#egrep -q "^$1:" $NX_ETC_DIR/passwords || cmd_abort "Error: User $1 not found in database."
-		CMD_APARAMS=$(session_find_user "$1")
-		[ -n "$CMD_APARAMS" ] || cmd_abort "Error: No running sessions found for user $1."
-	else
-		cmd_abort "Error: Not enough parameters."
-	fi
-	echo $CMD_APARAMS
-}
-
-cmd_list_suspended()
-{
-	CMD_PARAMS=$(cmd_parse_2_params "$2")
-	[ -n "$2" -a -z "$CMD_PARAMS" ] && exit 1
-	case $CMD_PARAMS in
-		user=*)
-			session_list_user_suspended $2 "Suspended"
-		;;
-	esac
-}
-cmd_list()
-{
-	CMD_PARAMS=$(cmd_parse_2_params "$2")
-	[ -n "$2" -a -z "$CMD_PARAMS" ] && exit 1
-	case $CMD_PARAMS in
-		user=*)
-			session_list_user $2
-		;;
-		sessionid=*)
-			session_list $2
-		;;
-		*)
-			session_list_all
-		;;
-	esac
-}
-
-cmd_history_clear()
-{
-	rm -f $NX_SESS_DIR/closed/*
-	rm -f $NX_SESS_DIR/failed/*
-}
-
-cmd_history()
-{
-	if [ "$2" = "clear" ]
-	then
-		cmd_history_clear
-	fi
-	
-	CMD_PARAMS=$(cmd_parse_2_params "$2")
-	user=""
-	sessid=""
-	case $CMD_PARAMS in
-		user=*)
-			user="$2"
-		;;
-		sessionid=*)
-			sessid="$2"
-		;;
-	esac
-
-	session_history "$user" "$sessid"
-}
-
-cmd_terminate()
-{
-	CMD_PARAMS=$(cmd_parse_3_params "$2")
-	[ -z "$CMD_PARAMS" ] && exit 1
-	for i in $CMD_PARAMS;
-	do
-			CMDLINE=$(session_get_cmdline $i)
-			cmd_sessionid=$(getparam sessionId)
-			cmd_user=$(getparam userName)
-			cmd_type=$(getparam type)
-			cmd_status=$(getparam status)
-
-			# is it a "good" session?
-			case "$1" in 
-			--suspend)
-				if [ "$cmd_status" = "Running" ] && stringinstring "unix-" "$cmd_type"
-				then
-					echo "sessionid=$cmd_sessionid" | su - "$cmd_user" -c "$PATH_BIN/nxnode --suspend"
-				fi
-			;;
-			--terminate)
-				echo "sessionid=$cmd_sessionid" | su - "$cmd_user" -c "$PATH_BIN/nxnode --terminate"
-			;;
-			--force-terminate)
-				echo "sessionid=$cmd_sessionid" | su - "$cmd_user" -c "$PATH_BIN/nxnode --terminate"
-				session_close $cmd_sessionid
-			;;
-			esac
-	done
-
-}
-
-cmd_send()
-{
-	if [ "$1" = "--broadcast" ]
-	then
-	  CMD_PARAMS=$(session_find_all)
-	  [ -z "$CMD_PARAMS" ] && cmd_abort "Error: No running session could be found."
-	else
-	  CMD_PARAMS=$(cmd_parse_3_params "$2")
-	  [ -z "$CMD_PARAMS" ] && exit 1
-	  shift
-	fi
-	shift
-	for i in $CMD_PARAMS;
-	do
-			CMDLINE=$(session_get_cmdline $i)
-			cmd_display=$(getparam display)
-			cmd_user=$(getparam userName)
-			cmd_type=$(getparam type)
-			cmd_status=$(getparam status)
-
-			# is it a "good" session?
-			if [ "$cmd_status" = "Running" ] && stringinstring "unix-" "$cmd_type"
-			then
-				su - "$cmd_user" -c "$PATH_BIN/nxclient --dialog ok --caption \"NX Administrator Message\" --message \"$@\" --noautokill -display \":$cmd_display\"" &
-				disown $!
-			fi
-	done
-	#nxnode_start --send "$CMD_PARAMS"
-}
-
-#
-# user mode available functions
-#
-
-if [ $UID -ne 0 ]
-then
-	[ "$1" = "--agent" ] && exec $PATH_BIN/nxnode "$@"
-	[ "$1" != "--passwd" ] && cmd_usage
-	cmd_user_passwd
-	exit 0
-fi
-
-#
-# root mode available functions
-#
-
-[ $# -lt 1 ] && cmd_usage "root"
-[ "$1" = "--help" ] && cmd_usage "root"
-
-if [ "$1" = "--version" ]
-then
-  echo "NXSERVER - Version $NX_VERSION $NX_LICENSE"
-  exit 0
-fi
-
-CMD=$1
-
-echo "NX> 100 NXSERVER - Version $NX_VERSION $NX_LICENSE"
-
-case $CMD in
-	# 
-	# User functions ...
-	# 
-	--passwd)
-		cmd_passwd "$@"
-	;;
-	--adduser|--useradd)
-		cmd_adduser "$@"
-	;;
-	--deluser|--userdel)
-		cmd_deluser "$@"
-	;;
-	--listuser|--userlist)
-		cmd_listuser
-	;;
-	--start)
-		cmd_start
-	;;
-	--stop)
-		cmd_stop
-	;;
-	--status)
-		cmd_status
-	;;
-	--restart)
-		cmd_restart
-	;;
-	--list)
-		cmd_list "$@"
-	;;
-	--list-suspended)
-		cmd_list_suspended "$@"
-	;;
-	--history)
-		cmd_history "$@"
-	;;
-	--terminate|--suspend|--force-terminate)
-		cmd_terminate "$@"
-	;;
-	--cleanup)
-		cmd_terminate "--force-terminate" "*"
-	;;
-	--send|--broadcast)
-		cmd_send "$@"
-	;;
-	*)
-		cmd_abort "Error: Function $CMD not implemented yet."
-esac
-echo "NX> 999 Bye"

Copied: freenx-server/tags/FreeNX-0.7.1/nxserver (from rev 398, freenx-server/trunk/nxserver)

Deleted: freenx-server/tags/FreeNX-0.7.1/nxserver-helper/nxserver-helper.c
===================================================================
--- freenx-server/trunk/nxserver-helper/nxserver-helper.c	2007-05-29 15:27:07 UTC (rev 334)
+++ freenx-server/tags/FreeNX-0.7.1/nxserver-helper/nxserver-helper.c	2007-10-14 22:25:14 UTC (rev 405)
@@ -1,20 +0,0 @@
-/*
- * Copyright (c) 2006 by Fabian Franz.
- *
- * License: GPL, v2
- *
- * SVN: $Id$
- *
- */
-
-#include <sys/types.h>
-#include <sys/socket.h>
-
-int main(int argc, char* argv[])
-{
-	int fds[2];
-
-	socketpair(AF_UNIX, SOCK_STREAM, 0, fds);
-	argv++;
-	execv(argv[0], argv);
-}

Copied: freenx-server/tags/FreeNX-0.7.1/nxserver-helper/nxserver-helper.c (from rev 370, freenx-server/trunk/nxserver-helper/nxserver-helper.c)

Deleted: freenx-server/tags/FreeNX-0.7.1/nxsetup
===================================================================
--- freenx-server/trunk/nxsetup	2007-05-29 15:27:07 UTC (rev 334)
+++ freenx-server/tags/FreeNX-0.7.1/nxsetup	2007-10-14 22:25:14 UTC (rev 405)
@@ -1,527 +0,0 @@
-#!/bin/bash
-
-# Coypright (c) 2004-2005 by Fabian Franz <freenx at fabian-franz.de>.
-#                    2005 by Jon Severinsson <jonno at users.berlios.de>.
-#
-# License: GNU GPL, version 2
-#
-# SVN: $Id$ 
-#
-
-HELP="no"
-INSTALL="no"
-SETUP_NOMACHINE_KEY="no"
-SETUP_UID=""
-SETUP_GID=""
-LOCAL_USER_OPTION=""
-# luseradd / luserdel are only available on RedHat
-[ -f /etc/redhat-release ] && LOCAL_USER_OPTION="yes"
-SETUP_LOCAL_USER="no"
-CLEAN="no"
-UNINSTALL="no"
-PURGE="no"
-SETUP_SSH2_KEY="no"
-BUILD_KNOWN_HOSTS="yes"
-AUTOMATIC="no"
-IGNORE_ERRORS="no"
-
-while [ "$1" ]
-do
-	case "$1" in
-		--help) HELP="yes"; shift ;;
-		--install) INSTALL="yes"; shift ;;
-		--ignore-errors) IGNORE_ERRORS="yes"; shift;;
-		--setup-nomachine-key) SETUP_NOMACHINE_KEY="yes"; shift ;;
-		--ssh2) SETUP_SSH2_KEY="yes"; shift;;
-		--dont-build-known-hosts) BUILD_KNOWN_HOSTS="no"; shift;;
-		--uid) SETUP_UID=$2; shift 2 ;;
-		--gid) SETUP_GID=$2; shift 2 ;;
-		--localuser) SETUP_LOCAL_USER="yes"; shift;;
-		--clean) CLEAN="yes"; shift ;;
-		--uninstall) UNINSTALL="yes"; shift ;;
-		--purge) PURGE="yes"; shift ;;
-		--auto) AUTOMATIC="yes"; shift ;;
-		--) shift ; break ;;
-		*) echo "Invalid flag $1" ; HELP="yes"; shift ; break ;;
-	esac
-done
-
-#Check for invalid combinations:
-[ "$SETUP_LOCAL_USER" = "yes" -a -z "$LOCAL_USER_OPTION" ] && HELP="yes"
-[ "$INSTALL" = "yes" -a "$UNINSTALL" = "yes" ] && HELP="yes"
-[ "$INSTALL" = "yes" -a "$CLEAN" = "no" -a "$PURGE" = "yes" ] && HELP="yes"
-[ "$UNINSTALL" = "yes" ] && [ "$SETUP_NOMACHINE_KEY" = "yes" -o -n "$SETUP_UID" -o "$CLEAN" = "yes" ] && HELP="yes"
-[ "$UNINSTALL" = "yes" -a "$CLEAN" = "yes" ] && HELP="yes"
-[ "$SETUP_SSH2_KEY" = "yes" -a "$SETUP_NOMACHINE_KEY" = "no" ] && HELP="yes"
-
-if [ "$INSTALL" = "no" -a "$UNINSTALL" = "no" -a "$AUTOMATIC" = "no" -a "$HELP" = "no" ]
-then
-	echo "------> You did select no action."
-	echo "        FreeNX guesses that you want to _install_ the server."
-	echo "        Type \"y\" to abort the installation at this point in time."
-	echo "        \"N\" is the default and continues installation."
-	echo "        Use \"${0} --help\" to get more detailed help hints."
-	echo ""
-	echo -n " Do you want to abort now? [y/N] "
-	read -n 1 CHOICE
-	echo
-	[ "$CHOICE" = "y" ] || INSTALL="yes"
-fi
-
-[ "$INSTALL" = "no" -a "$UNINSTALL" = "no" ] && HELP="yes"
-
-if [ "$HELP" = "yes" ]
-then
-	echo "nxsetup - Setup the FreeNX server."
-	echo "Syntax: nxsetup --help"
-	echo "        nxsetup --install [--setup-nomachine-key] [--uid <nummber>] [--clean [--purge]]"
-	echo "        nxsetup --uninstall [--purge]"
-	echo
-	echo "  --help                 Display this help message."
-	echo "  --install              Install necessary files and add the special user \"nx\"."
-	echo "  --ignore-errors        Check for false configuration, but don't complain."
-	echo "  --setup-nomachine-key  Allow login with the key shipped with the NoMachine"
-	echo "                         client. This is fairly secure, and it simplifies the "
-	echo "                         configuration of clients. (Using a custom key pair."
-	echo "                         increases security even more, but complicates the"
-	echo "                         configuration of clients.)"
-	echo "                         Use this option at your own risk."
-	echo "  --ssh2                 Create additionally commercial pubkey-support; beware:"
-	echo "                         own _commercial_ ssh2-key is not supported!"
-	echo "  --uid <number>         Give the uid <number> to the user \"nx\"."
-	echo "  --gid <number>         Give the gid <number> to the user \"nx\"."
-	[ -n "$LOCAL_USER_OPTION" ] && \
-	echo "  --localuser            The special user \"nx\" will be created locally using"
-	echo "                         \"luseradd\", for use in NIS and NISplus environments."
-	echo "  --clean                Perform an uninstallation prior to installation."
-	echo "  --uninstall            Remove log and session files, as well as the special"
-	echo "                         user \"nx\"."
-	echo "  --purge                Remove extra configuration files and ssh keys when"
-	echo "                         performing a \"--uninstall\"."
-	echo "                         Note that node.conf will always be saved."
-	exit 0
-fi
-#Undocumented
-#
-#    --dont-build-known-hosts		For system without /etc/ssh/ssh_host_key.rsa.pub and anyway
-#					expect should handle nx-users known-hosts keys so why borther
-#					in nxsetup?
-
-if [ $UID -ne 0 ]
-then
-	echo "You need to be root to use this program." 
-	exit 1
-fi
-
-if [ "$INSTALL" = "yes" -a "$AUTOMATIC" = "no" -a "$SETUP_NOMACHINE_KEY" = "no" ]
-then
-	echo "------> It is recommended that you use the NoMachine key for"
-	echo "        easier setup. If you answer \"y\", FreeNX creates a custom"
-	echo "        KeyPair and expects you to setup your clients manually. "
-	echo "        \"N\" is default and uses the NoMachine key for installation."
-	echo ""
-	echo -n " Do you want to use your own custom KeyPair? [y/N] "
-	read -n 1 CHOICE
-	[ "$CHOICE" = "y" ] || SETUP_NOMACHINE_KEY="yes"
-fi
-
-
-# Read the config file
-. $(PATH=$(cd $(dirname $0) && pwd):$PATH which nxloadconfig) --
-
-nx_user_exists()
-{
-	if [ "$SETUP_LOCAL_USER" = "yes" ]
-	then
-		egrep "^nx:" /etc/passwd >/dev/null
-	else
-		getent passwd nx >/dev/null
-	fi
-}	
-nx_group_exists()
-{
-	# useradd/adduser need a valid group to add the user to
-	if [ "$SETUP_LOCAL_USER" = "yes" ]
-	then
-		egrep "^nx:" /etc/group >/dev/null
-	else
-		getent group nx >/dev/null
-	fi
-}	
-
-# Tries to add a system user
-useradd_nx()
-{
-	# In any case create the basedir of the HOME directory before, 
-	# because useradd will fail to make more than one directory
-	mkdir -p $(dirname "$NX_HOME_DIR")
-
-	# Is it a debian?
-	if [ -f /etc/debian_version -a -z "$SETUP_UID" ]
-	then
-		USERADD_OPTIONS="--ingroup nx --system --home $NX_HOME_DIR --shell $PATH_BIN/nxserver"
-		[ -n "$SETUP_GID" ] && GROUPADD_OPTIONS="--gid $SETUP_GID"
-
-		# adduser needs a valid group to add the user to
-		! nx_group_exists && addgroup --system --quiet $GROUPADD_OPTIONS nx
-		adduser $USERADD_OPTIONS nx
-		
-	# no, its a "normal" useradd
-	else
-		USERADD_OPTIONS="-g nx -d $NX_HOME_DIR -s $PATH_BIN/nxserver"
-		[ -n "$SETUP_GID" ] && GROUPADD_OPTIONS="-g $SETUP_GID"
-
-		# uid specified?
-		if [ -n "$SETUP_UID" ]
-		then
-			USERADD_OPTIONS="-u $SETUP_UID $USERADD_OPTIONS"
-		
-		# Is it a SuSE?
-		elif [ -f /etc/SuSE-release ]
-		then
-			USERADD_OPTIONS="-r $USERADD_OPTIONS"
-		fi
-		
-		if [ "$SETUP_LOCAL_USER" = "yes" ]
-		then
-			! nx_group_exists && lgroupadd $GROUPADD_OPTIONS nx 
-			luseradd $USERADD_OPTIONS nx
-		else
-			! nx_group_exists && groupadd $GROUPADD_OPTIONS nx
-			useradd $USERADD_OPTIONS nx
-		fi
-
-		
-	fi
-
-	# the nx user account might be locked, so unlock it.
-	passwd -u nx
-}
-
-install_nx()
-{
-	set -e
-	
-	if [ "$(pidof sshd 2>/dev/null)" = "" ]
-	then 
-		echo -n "Starting ssh service ..."
-		# Generate Host keys if they are not available, yet
-		[ -e /etc/ssh/ssh_host_rsa_key ] || $COMMAND_SSH_KEYGEN -q -t rsa -f /etc/ssh/ssh_host_rsa_key -C '' -N ''
-		[ -e /etc/ssh/ssh_host_dsa_key ] || $COMMAND_SSH_KEYGEN -q -t dsa -f /etc/ssh/ssh_host_dsa_key -C '' -N ''
-		[ -x /etc/init.d/sshd ] && /etc/init.d/sshd start
-		[ -x /etc/init.d/ssh ] && /etc/init.d/ssh start
-		echo "done"
-	fi
-	
-	echo -n "Setting up $NX_ETC_DIR ..."
-	mkdir -p $NX_ETC_DIR
-	touch $NX_ETC_DIR/passwords $NX_ETC_DIR/passwords.orig
-	chmod 600 $NX_ETC_DIR/passwords $NX_ETC_DIR/passwords.orig
-	echo "done"
-	
-	if [ ! -f $NX_ETC_DIR/users.id_dsa ]
-	then
-		$COMMAND_SSH_KEYGEN -f $NX_ETC_DIR/users.id_dsa -t dsa -N ""
-	fi
-	
-	echo -n "Setting up $NX_SESS_DIR ..."
-	mkdir -p $NX_SESS_DIR/closed $NX_SESS_DIR/running $NX_SESS_DIR/failed
-	chmod 700 $NX_SESS_DIR/*
-	echo "done"
-	
-	echo -n "Setting up $NX_LOGFILE ..."
-	mkdir -p $(dirname "$NX_LOGFILE")
-	touch "$NX_LOGFILE"
-	chmod 600 "$NX_LOGFILE"
-	echo "done"
-	
-	if ! nx_user_exists
-	then
-		echo -n "Setting up special user \"nx\" ..."
-		useradd_nx
-		echo "done"
-	fi
-	
-	if [ "$ENABLE_NOMACHINE_FORWARD_PORT" = "1" -a -x "$NOMACHINE_SERVER" ]
-	then
-		echo -n "Setting up NoMachine forwarding ..."
-		usermod -s "$PATH_BIN/nxserver" -d "$NOMACHINE_NX_HOME_DIR" nx
-		echo "done"
-	fi
-	
-	echo -n "Setting up known_hosts and $SSH_AUTHORIZED_KEYS ..."
-	
-	SETUP_NX_KEY="no"
-	
-	mkdir -p $NX_HOME_DIR/.ssh
-	chmod 700 $NX_HOME_DIR/ $NX_HOME_DIR/.ssh
-	
-	if [ ! -f $NX_HOME_DIR/.ssh/$SSH_AUTHORIZED_KEYS -o "$SETUP_NOMACHINE_KEY" = "yes" ]
-	then
-		SETUP_NX_KEY="yes"
-		if [ "$SETUP_NOMACHINE_KEY" = "yes" ]
-		then
-			cat << EOF >$NX_HOME_DIR/.ssh/$SSH_AUTHORIZED_KEYS
-no-port-forwarding,no-agent-forwarding,command="$PATH_BIN/nxserver" ssh-dss AAAAB3NzaC1kc3MAAACBAJe/0DNBePG9dYLWq7cJ0SqyRf1iiZN/IbzrmBvgPTZnBa5FT/0Lcj39sRYt1paAlhchwUmwwIiSZaON5JnJOZ6jKkjWIuJ9MdTGfdvtY1aLwDMpxUVoGwEaKWOyin02IPWYSkDQb6cceuG9NfPulS9iuytdx0zIzqvGqfvudtufAAAAFQCwosRXR2QA8OSgFWSO6+kGrRJKiwAAAIEAjgvVNAYWSrnFD+cghyJbyx60AAjKtxZ0r/Pn9k94Qt2rvQoMnGgt/zU0v/y4hzg+g3JNEmO1PdHh/wDPVOxlZ6Hb5F4IQnENaAZ9uTZiFGqhBO1c8Wwjiq/MFZy3jZaidarLJvVs8EeT4mZcWxwm7nIVD4lRU2wQ2lj4aTPcepMAAACANlgcCuA4wrC+3Cic9CFkqiwO/Rn1vk8dvGuEQqFJ6f6LVfPfRTfaQU7TGVLk2CzY4dasrwxJ1f6FsT8DHTNGnxELPKRuLstGrFY/PR7KeafeFZDf+fJ3mbX5nxrld3wi5titTnX+8s4IKv29HJguPvOK/SI7cjzA+SqNfD7qEo8= root at nettuno
-EOF
-			chmod 600 $NX_HOME_DIR/.ssh/$SSH_AUTHORIZED_KEYS
-			cat << EOF >$NX_HOME_DIR/.ssh/client.id_dsa.key
------BEGIN DSA PRIVATE KEY-----
-MIIBuwIBAAKBgQCXv9AzQXjxvXWC1qu3CdEqskX9YomTfyG865gb4D02ZwWuRU/9
-C3I9/bEWLdaWgJYXIcFJsMCIkmWjjeSZyTmeoypI1iLifTHUxn3b7WNWi8AzKcVF
-aBsBGiljsop9NiD1mEpA0G+nHHrhvTXz7pUvYrsrXcdMyM6rxqn77nbbnwIVALCi
-xFdHZADw5KAVZI7r6QatEkqLAoGBAI4L1TQGFkq5xQ/nIIciW8setAAIyrcWdK/z
-5/ZPeELdq70KDJxoLf81NL/8uIc4PoNyTRJjtT3R4f8Az1TsZWeh2+ReCEJxDWgG
-fbk2YhRqoQTtXPFsI4qvzBWct42WonWqyyb1bPBHk+JmXFscJu5yFQ+JUVNsENpY
-+Gkz3HqTAoGANlgcCuA4wrC+3Cic9CFkqiwO/Rn1vk8dvGuEQqFJ6f6LVfPfRTfa
-QU7TGVLk2CzY4dasrwxJ1f6FsT8DHTNGnxELPKRuLstGrFY/PR7KeafeFZDf+fJ3
-mbX5nxrld3wi5titTnX+8s4IKv29HJguPvOK/SI7cjzA+SqNfD7qEo8CFDIm1xRf
-8xAPsSKs6yZ6j1FNklfu
------END DSA PRIVATE KEY-----
-EOF
-			chmod 600 $NX_HOME_DIR/.ssh/client.id_dsa.key
-		else
-			# generate a new key, backup the old and copy it to $SSH_AUTHORIZED_KEYS
-			$PATH_BIN/nxkeygen
-		fi
-	fi
-
-	# commercial ssh2-server uses other authentification-files
-	# as they are more or less static, I don't integrated these variable
-	# in node.conf, you have to change them here, if you like
-	SSH2_AUTHORIZATION="authorization"
-	SSH2_PUBKEY="nx_user.id.pub"
-	SSH2_HOME_DIR="$NX_HOME_DIR/.ssh2"
-	if [ ! -f "${SSH2_HOME_DIR}/$SSH2_PUBKEY" -a "$SETUP_SSH2_KEY" = "yes" -a "$SETUP_NOMACHINE_KEY" = "yes" ]
-	then
-		mkdir -p $SSH2_HOME_DIR
-		chmod 700 $SSH2_HOME_DIR
-		
-		cat >  ${SSH2_HOME_DIR}/$SSH2_PUBKEY <<EOF
----- BEGIN SSH2 PUBLIC KEY ----
-Comment: "1024-bit DSA, converted from OpenSSH by root at localhost"
-AAAAB3NzaC1kc3MAAACBAJe/0DNBePG9dYLWq7cJ0SqyRf1iiZN/IbzrmBvgPTZnBa5FT/
-0Lcj39sRYt1paAlhchwUmwwIiSZaON5JnJOZ6jKkjWIuJ9MdTGfdvtY1aLwDMpxUVoGwEa
-KWOyin02IPWYSkDQb6cceuG9NfPulS9iuytdx0zIzqvGqfvudtufAAAAFQCwosRXR2QA8O
-SgFWSO6+kGrRJKiwAAAIEAjgvVNAYWSrnFD+cghyJbyx60AAjKtxZ0r/Pn9k94Qt2rvQoM
-nGgt/zU0v/y4hzg+g3JNEmO1PdHh/wDPVOxlZ6Hb5F4IQnENaAZ9uTZiFGqhBO1c8Wwjiq
-/MFZy3jZaidarLJvVs8EeT4mZcWxwm7nIVD4lRU2wQ2lj4aTPcepMAAACANlgcCuA4wrC+
-3Cic9CFkqiwO/Rn1vk8dvGuEQqFJ6f6LVfPfRTfaQU7TGVLk2CzY4dasrwxJ1f6FsT8DHT
-NGnxELPKRuLstGrFY/PR7KeafeFZDf+fJ3mbX5nxrld3wi5titTnX+8s4IKv29HJguPvOK
-/SI7cjzA+SqNfD7qEo8=
----- END SSH2 PUBLIC KEY ----
-EOF
-		echo "Key $SSH2_PUBKEY" >> ${SSH2_HOME_DIR}/$SSH2_AUTHORIZATION
-		echo "Options no-port-forwarding,no-agent-forwarding,command=\"$PATH_BIN/nxserver\"" >> ${SSH2_HOME_DIR}/$SSH2_AUTHORIZATION
-		chmod 600 ${SSH2_HOME_DIR}/$SSH2_AUTHORIZATION ${SSH2_HOME_DIR}/$SSH2_PUBKEY
-	fi
-	
-	if [ ! -f $NX_HOME_DIR/.ssh/known_hosts -a "$BUILD_KNOWN_HOSTS" = "yes" ]
-	then
-		echo -n "127.0.0.1 " > $NX_HOME_DIR/.ssh/known_hosts
-		cat /etc/ssh/ssh_host_rsa_key.pub >> $NX_HOME_DIR/.ssh/known_hosts
-	fi
-	
-	echo "done"
-	
-	echo -n "Setting up permissions ..."
-	chown -R nx:root $NX_SESS_DIR
-	chown -R nx:root $NX_ETC_DIR
-	chown -R nx:root $NX_HOME_DIR
-	chown nx:root "$NX_LOGFILE"
-
-	echo "done"
-
-	if [ -d "$CUPS_BACKEND" ]
-	then
-		echo -n "Setting up cups nxipp backend ..."
-		cp -af "$CUPS_BACKEND/ipp" "$CUPS_IPP_BACKEND"
-		chmod 755 "$CUPS_IPP_BACKEND"
-		echo "done"
-	fi
-}
-
-test_nx()
-{
-	echo ""
-	echo "----> Testing your nxserver configuration ..."
-	[ "$IGNORE_ERRORS" = "yes" ] && NO_ERRORS="--ignore-errors"
-	. $(PATH=$(cd $(dirname $0) && pwd):$PATH which nxloadconfig) --check $NO_ERRORS
-	echo "<---- done"
-	echo ""
-	echo "----> Testing your nxserver connection ..."
-	
-	CONNECTION=""
-	while read -t 3 line
-	do
-		echo $line
-		
-		case "$line" in
-			*"HELLO NXSERVER - Version $NX_VERSION"*)
-				CONNECTION="yes"
-			;;
-			*"HELLO NXSERVER - Version"*)
-				echo "Warning: Version mismatch. Expected $NX_VERSION got: $line."
-				CONNECTION="yes"
-			;;
-			*"NX> 999 Bye"*)
-				break;
-			;;
-		esac
-
-	done < <(NODE_PUBLICKEY="$NX_HOME_DIR/.ssh/client.id_dsa.key" $PATH_BIN/nxnode-login test-nx nx "$SSHD_PORT" nxserver --check)
-
-	if [ -z "$CONNECTION" ]
-	then
-		echo "Fatal error: Could not connect to NX Server."
-		echo 
-		echo "Please check your ssh setup:"
-		echo ""
-		echo "The following are _examples_ of what you might need to check."
-		echo ""
-		echo "	- Make sure \"nx\" is one of the AllowUsers in sshd_config."
-		echo "    (or that the line is outcommented/not there)"
-		echo "	- Make sure your sshd allows public key authentication."
-		echo "	- Make sure your sshd is really running on port $SSHD_PORT."
-		echo "	- Make sure your sshd_config AuthorizedKeysFile in sshd_config is set to $SSH_AUTHORIZED_KEYS."
-		echo "    (this should be a filename not a pathname+filename)"
-		exit 1
-	fi
-	echo "<--- done"
-	echo ""
-}
-
-uninstall_nx() 
-{
-	if nx_user_exists
-	then
-		echo -n "Removing special user \"nx\" ..."
-		
-		if [ "$SETUP_LOCAL_USER" = "yes" ]
-		then
-			luserdel nx
-		else
-			userdel nx
-		fi
-			
-		echo "done"
-	fi
-	
-	if [ -e "$NX_SESS_DIR" ]
-	then
-		echo -n "Removing session database ..."
-		rm -f -r $NX_SESS_DIR/closed $NX_SESS_DIR/running $NX_SESS_DIR/failed 2>/dev/null
-		rmdir -p $NX_SESS_DIR 2>/dev/null
-		echo "done"
-	fi
-	
-	if [ -e "$NX_LOGFILE" ] 
-	then
-		echo -n "Removing logfile ..."
-		rm -f "$NX_LOGFILE" 2>/dev/null
-		rmdir -p $(dirname "$NX_LOGFILE") 2>/dev/null
-		echo "done"
-	fi
-	
-	if [ "$PURGE" = "yes" -a -e "$NX_HOME_DIR" ]
-	then
-		echo -n "Removing home directory of special user \"nx\" ..."
-		rm -f -r "$NX_HOME_DIR" 2>/dev/null
-		rmdir -p $(dirname "$NX_HOME_DIR") 2>/dev/null
-		echo "done"
-	fi
-	
-	if [ "$PURGE" = "yes" -a -e "$NX_ETC_DIR" ]
-	then
-		echo -n "Removing configuration files ..."
-		rm -f "$NX_ETC_DIR/passwords" "$NX_ETC_DIR/passwords.orig" "$NX_ETC_DIR/users.id_dsa" "$NX_ETC_DIR/users.id_dsa.pub" 2>/dev/null
-		for i in `ls $NX_ETC_DIR/*.node.conf 2>/dev/null` ;
-		do
-			rm -f "$i" 2>/dev/null;
-		done
-		echo "done"
-	fi
-}
-
-if [ "$INSTALL" = "yes" ]
-then
-	#Perform cleanup?
-	[ "$CLEAN" = "yes" ] && uninstall_nx
-	
-	install_nx
-
-	[ "$AUTOMATIC" = "no" ] && test_nx
-	
-	echo "Ok, nxserver is ready."
-	echo 
-	if [ "$ENABLE_SSH_AUTHENTICATION" = "1" -o "$ENABLE_SU_AUTHENTICATION" = "1" ]
-	then
-		echo "PAM authentication enabled:"
-		if [ "$ENABLE_USER_DB" = "1" ]
-		then
-			echo "  Users will be able to login with their normal passwords,"
-			echo "  but they have to be registered in the NX database to do so."
-			echo "  To add new users to the NX user database do:"
-			echo "    nxserver --adduser <username>"
-		else
-			echo "  All users will be able to login with their normal passwords."
-		fi
-		echo
-		if [ "$ENABLE_SSH_AUTHENTICATION" = "1" -a "$ENABLE_SU_AUTHENTICATION" = "1" ]
-		then
-			echo "  Both SSH and SU authentication is enabled."
-			echo "  This does work, but is redundant."
-			echo "  Please check if this is really what you intended."
-		elif [ "$ENABLE_SSH_AUTHENTICATION" = "1" ]
-		then
-			echo "  PAM authentication will be done through SSH."
-			echo "  Please ensure that SSHD on localhost accepts password authentication."
-		else
-			echo "  PAM authentication will be done through SU."
-			echo "  Please ensure that the user "nx" is a member of the wheel group."
-		fi
-	else
-		echo "PAM authentication disabled."
-		echo "  Only users in the NX user database will be able to log in."
-		echo
-		echo "  To add new users to the NX user database do:"
-		echo "    nxserver --adduser <username>"
-		echo "  Afterwards change the password with:"
-		echo "    nxserver --passwd <username>"
-	fi
-	echo
-	echo "  You can change this behaviour in the $NX_ETC_DIR/node.conf file."
-	
-	if [ "$SETUP_NOMACHINE_KEY" = "no" -a "$SETUP_NX_KEY" = "yes" ]
-	then
-		echo
-		echo "Warning: Clients will not be able to login to this server with the standard key."
-		echo "         Please replace /usr/NX/share/client.id_dsa.key on all clients you want"
-		echo "         to use with $NX_HOME_DIR/.ssh/client.id_dsa.key"
-		echo "         and protect it accordingly."
-		echo ""
-		echo "         Since 1.5.0 you need to import the correct key via the GUI."
-		echo
-		echo "         If you really want to use the NoMachine key please remove"
-		echo "         '$NX_HOME_DIR/.ssh/$SSH_AUTHORIZED_KEYS'"
-		echo "         and then run this script with the --setup-nomachine-key parameter."
-	fi
-	
-	echo "Have Fun!"
-elif [ "$UNINSTALL" = "yes" ]
-then
-	uninstall_nx
-	
-	echo "Ok, nxserver is uninstalled"
-	echo 
-	if [ "$PURGE" = "yes" ]
-	then
-		echo "To complete the uninstallation process, remove the FreeNX scripts in $PATH_BIN"
-		echo "and the $NX_ETC_DIR/node.conf configuration file."
-	else
-		echo "To complete the uninstallation process, remove the FreeNX scripts in $PATH_BIN"
-		echo
-		echo "Configuration files and ssh keys are saved in case you would like to reinstall"
-		echo "freenx at a later time. To remove them, please run 'nxsetup --uninstall --purge'"
-	fi
-fi

Copied: freenx-server/tags/FreeNX-0.7.1/nxsetup (from rev 355, freenx-server/trunk/nxsetup)

Copied: freenx-server/tags/FreeNX-0.7.1/nxviewer_helper (from rev 398, freenx-server/trunk/nxviewer_helper)



