From gwright at mail.berlios.de  Thu Aug  3 17:17:51 2006
From: gwright at mail.berlios.de (gwright at BerliOS)
Date: Thu, 3 Aug 2006 17:17:51 +0200
Subject: [Freenx-cvs] r243 - in nxclientlib: . test
Message-ID: <200608031517.k73FHpiN006328@sheep.berlios.de>

Author: gwright
Date: 2006-08-03 17:17:51 +0200 (Thu, 03 Aug 2006)
New Revision: 243

Modified:
   nxclientlib/nxclientlib.cpp
   nxclientlib/nxclientlib.h
   nxclientlib/nxsession.cpp
   nxclientlib/nxsession.h
   nxclientlib/test/main.cpp
Log:
New cookie generating code using /dev/urandom


Modified: nxclientlib/nxclientlib.cpp
===================================================================
--- nxclientlib/nxclientlib.cpp	2006-08-02 17:54:14 UTC (rev 242)
+++ nxclientlib/nxclientlib.cpp	2006-08-03 15:17:51 UTC (rev 243)
@@ -25,6 +25,7 @@
 NXClientLib::NXClientLib(QObject *parent) : QObject(parent)
 {
 	connect(&session, SIGNAL(authenticated()), this, SLOT(doneAuth()));
+	connect(&session, SIGNAL(loginFailed()), this, SLOT(failedLogin()));
 }
 
 NXClientLib::~NXClientLib()
@@ -51,7 +52,7 @@
 	
 	if (encryption == true) {
 		arguments << "-B";
-		// session.sessionData.encryption = true;
+		session.sessionData.encryption = true;
 	}
 	
 	connect(&nxsshProcess, SIGNAL(started()), this, SLOT(processStarted()));
@@ -97,6 +98,12 @@
 	writeCallback(message);
 }
 
+void NXClientLib::failedLogin()
+{
+	writeCallback(tr("Username or password incorrect"));
+	nxsshProcess.terminate();
+}
+
 void NXClientLib::processParseStdout()
 {
 	QString message = nxsshProcess.readAllStandardOutput().data();

Modified: nxclientlib/nxclientlib.h
===================================================================
--- nxclientlib/nxclientlib.h	2006-08-02 17:54:14 UTC (rev 242)
+++ nxclientlib/nxclientlib.h	2006-08-03 15:17:51 UTC (rev 243)
@@ -49,8 +49,7 @@
 
 		void setCallback(NXCallback *cb) { callback = cb; };
 
-		void setXRes(int x) { session.setXRes(x); };
-		void setYRes(int y) { session.setYRes(y); };
+		void setResolution(int x, int y) { session.setResolution(x, y); };
 		void setDepth(int depth) { session.setDepth(depth); };
 		void setRender(bool render) { session.setRender(render); };
 		void allowSSHConnect(bool auth);
@@ -64,6 +63,7 @@
 		void processParseStderr();
 
 		void doneAuth();
+		void failedLogin();
 	private:
 		QProcess nxsshProcess;
 		QTemporaryFile *keyFile;

Modified: nxclientlib/nxsession.cpp
===================================================================
--- nxclientlib/nxsession.cpp	2006-08-02 17:54:14 UTC (rev 242)
+++ nxclientlib/nxsession.cpp	2006-08-03 15:17:51 UTC (rev 243)
@@ -41,6 +41,7 @@
 
 NXSession::NXSession()
 {
+	devurand_fd = -1;
 	stage = 0;
 	sessionSet = false;
 }
@@ -102,6 +103,8 @@
 				case 103:
 					stage++;
 					break;
+				case 404:
+					emit loginFailed();
 				}
 			break;
 		case LIST_SESSIONS:
@@ -137,7 +140,7 @@
 					"\" --type=\"" + sessionData.sessionType +
 					"\" --cache=\"" + sessionData.cache +
 					"M\" --images=\"" + sessionData.images +
-					"M\" --cookie=\"" + sessionData.sessionCookie +
+					"M\" --cookie=\"" + generateCookie() +
 					"\" --link=\"" + sessionData.linkType +
 					"\" --kbtype=\"" + sessionData.kbtype +
 					"\" --nodelay=\"1\" --encryption=\"" + encryption +
@@ -152,7 +155,7 @@
 					"\" --type=\"" + sessionData.sessionType +
 					"\" --cache=\"" + sessionData.cache +
 					"M\" --images=\"" + sessionData.images +
-					"M\" --cookie=\"" + sessionData.sessionCookie +
+					"M\" --cookie=\"" + generateCookie() +
 					"\" --link=\"" + sessionData.linkType +
 					"\" --render=\"" + render +
 					"\" --encryption=\"" + encryption +
@@ -241,43 +244,30 @@
 	stage++;
 }
 
-void NXSession::setUsername(QString user)
-{
-	nxUsername = user;
-}
 
-void NXSession::setPassword(QString pass)
+QString NXSession::generateCookie()
 {
-	nxPassword = pass;
-}
+	unsigned long long int int1, int2;
+	QString cookie;
+	
+	devurand_fd = open("/dev/urandom", O_RDONLY);
 
-void NXSession::reset()
-{
-	stage = 0;
-}
+	fillRand((unsigned char*)&int1, sizeof(int1));
+	fillRand((unsigned char*)&int2, sizeof(int2));
+	cookie = QString("%1%2").arg(int1, 0, 16).arg(int2, 0, 16);
 
-void NXSession::setXRes(int x)
-{
-	xRes.setNum(x);
+	return cookie;
 }
 
-void NXSession::setYRes(int y)
-{
-	yRes.setNum(y);
-}
+void NXSession::fillRand(unsigned char *buf, size_t nbytes) {
+	ssize_t r;
+	unsigned char *where = buf;
 
-void NXSession::setDepth(int d)
-{
-	depth.setNum(d);
+	while (nbytes) {
+		while ((r = read(devurand_fd, where, nbytes)) == -1)
+		where  += r;
+		nbytes -= r;
+	}
 }
 
-void NXSession::setRender(bool isRender)
-{
-	if (isRender)
-		renderSet = "render";
-}
 
-void NXSession::setContinue(bool allow)
-{
-		doSSH = allow;
-}

Modified: nxclientlib/nxsession.h
===================================================================
--- nxclientlib/nxsession.h	2006-08-02 17:54:14 UTC (rev 242)
+++ nxclientlib/nxsession.h	2006-08-03 15:17:51 UTC (rev 243)
@@ -24,12 +24,14 @@
 #include <QString>
 #include <QStringList>
 
+#include <fcntl.h>
+#include <unistd.h>
+
 struct NXSessionData {
 	QString sessionName;
 	QString sessionType;
 	int cache;
 	int images;
-	QString sessionCookie;
 	QString linkType;
 	bool render;
 	bool encryption;
@@ -71,29 +73,34 @@
 		
 		QString parseSSH(QString);
 		int parseResponse(QString);
-		void setUsername(QString);
-		void setPassword(QString);
+		void setUsername(QString user) { nxUsername = user; };
+		void setPassword(QString pass) { nxPassword = pass; };
 		void parseResumeSessions(QStringList);
 
-		void setXRes(int);
-		void setYRes(int);
-		void setDepth(int);
-		void setRender(bool);
-		void setContinue(bool);
+		void setResolution(int x, int y) { xRes.setNum(x); yRes.setNum(y); };
+		void setDepth(int d) { depth.setNum(d); };
+		void setRender(bool isRender) { if (isRender) renderSet = "render"; };
+		void setContinue(bool allow) { doSSH = allow; };
 		void setSession(NXSessionData);
-
+		QString generateCookie();
+		
 		NXSessionData sessionData;
 
 	signals:
 		// Emitted when the initial public key authentication is successful
 		void authenticated();
+		void loginFailed();
 	private:
 		bool doSSH;
 		bool suspendedSessions;
 		bool sessionSet;
 		void reset();
-		
+		void fillRand(unsigned char *, size_t);
+
 		int stage;
+
+		int devurand_fd;
+
 		QString nxUsername;
 		QString nxPassword;
 

Modified: nxclientlib/test/main.cpp
===================================================================
--- nxclientlib/test/main.cpp	2006-08-02 17:54:14 UTC (rev 242)
+++ nxclientlib/test/main.cpp	2006-08-03 15:17:51 UTC (rev 243)
@@ -34,8 +34,7 @@
 	lib.invokeNXSSH("default" ,argv[1], true);
 	lib.setUsername(argv[2]);
 	lib.setPassword(argv[3]);
-	lib.setXRes(640);
-	lib.setYRes(480);
+	lib.setResolution(640,480);
 	lib.setDepth(24);
 	lib.setRender(true);
 	return qApp->exec();



From gwright at mail.berlios.de  Thu Aug  3 20:28:47 2006
From: gwright at mail.berlios.de (gwright at BerliOS)
Date: Thu, 3 Aug 2006 20:28:47 +0200
Subject: [Freenx-cvs] r244 - in nxclientlib: . test
Message-ID: <200608031828.k73ISl1I027532@sheep.berlios.de>

Author: gwright
Date: 2006-08-03 20:28:45 +0200 (Thu, 03 Aug 2006)
New Revision: 244

Modified:
   nxclientlib/nxclientlib.cpp
   nxclientlib/nxclientlib.h
   nxclientlib/nxsession.cpp
   nxclientlib/nxsession.h
   nxclientlib/test/main.cpp
Log:
Finally - it works!


Modified: nxclientlib/nxclientlib.cpp
===================================================================
--- nxclientlib/nxclientlib.cpp	2006-08-03 15:17:51 UTC (rev 243)
+++ nxclientlib/nxclientlib.cpp	2006-08-03 18:28:45 UTC (rev 244)
@@ -17,15 +17,21 @@
 
 #include "nxclientlib.h"
 
+#include <QDir>
+
 #define NXSSH_BIN "nxssh"
+#define NXPROXY_BIN "nxproxy"
 
 // Default NoMachine certificate for FALLBACK
 QByteArray cert("-----BEGIN DSA PRIVATE KEY-----\nMIIBuwIBAAKBgQCXv9AzQXjxvXWC1qu3CdEqskX9YomTfyG865gb4D02ZwWuRU/9\nC3I9/bEWLdaWgJYXIcFJsMCIkmWjjeSZyTmeoypI1iLifTHUxn3b7WNWi8AzKcVF\naBsBGiljsop9NiD1mEpA0G+nHHrhvTXz7pUvYrsrXcdMyM6rxqn77nbbnwIVALCi\nxFdHZADw5KAVZI7r6QatEkqLAoGBAI4L1TQGFkq5xQ/nIIciW8setAAIyrcWdK/z\n5/ZPeELdq70KDJxoLf81NL/8uIc4PoNyTRJjtT3R4f8Az1TsZWeh2+ReCEJxDWgG\nfbk2YhRqoQTtXPFsI4qvzBWct42WonWqyyb1bPBHk+JmXFscJu5yFQ+JUVNsENpY\n+Gkz3HqTAoGANlgcCuA4wrC+3Cic9CFkqiwO/Rn1vk8dvGuEQqFJ6f6LVfPfRTfa\nQU7TGVLk2CzY4dasrwxJ1f6FsT8DHTNGnxELPKRuLstGrFY/PR7KeafeFZDf+fJ3\nmbX5nxrld3wi5titTnX+8s4IKv29HJguPvOK/SI7cjzA+SqNfD7qEo8CFDIm1xRf\n8xAPsSKs6yZ6j1FNklfu\n-----END DSA PRIVATE KEY-----");
 
 NXClientLib::NXClientLib(QObject *parent) : QObject(parent)
 {
+	isFinished = false;
+	
 	connect(&session, SIGNAL(authenticated()), this, SLOT(doneAuth()));
 	connect(&session, SIGNAL(loginFailed()), this, SLOT(failedLogin()));
+	connect(&session, SIGNAL(finished()), this, SLOT(finished()));
 }
 
 NXClientLib::~NXClientLib()
@@ -52,7 +58,7 @@
 	
 	if (encryption == true) {
 		arguments << "-B";
-		session.sessionData.encryption = true;
+		session.setEncryption(true);
 	}
 	
 	connect(&nxsshProcess, SIGNAL(started()), this, SLOT(processStarted()));
@@ -122,7 +128,10 @@
 	QStringList::const_iterator i;
 
 	for (i = messages.constBegin(); i != messages.constEnd(); ++i) {
-		write(session.parseSSH(*i));
+		if (!isFinished)
+			write(session.parseSSH(*i));
+		else
+			write(parseSSH(*i));
 	}
 }
 
@@ -146,7 +155,14 @@
 	QString message = nxsshProcess.readAllStandardError().data();
 	
 	cout << "STDERR: " << message.toStdString();
-	
+
+	if (proxyData.encrypted && isFinished && message.contains("NX> 999 Bye")) {
+		QString returnMessage;
+		returnMessage = "NX> 299 Switching connection to: ";
+		returnMessage += proxyData.proxyIP + ":33057" + " cookie: " + proxyData.cookie + "\n";
+		write(returnMessage);
+	}
+
 	callbackStderr = message.toStdString();
 	callback->stderr(&callbackStderr);
 }
@@ -180,5 +196,50 @@
 
 void NXClientLib::setSession(NXSessionData nxSession)
 {
+	session.setSession(nxSession);
+}
+
+QString NXClientLib::parseSSH(QString message)
+{
+	QString returnMessage = 0;
+	cout << "FOO: "<<message.toStdString() << endl;
+	if (message.contains("NX> 700 Session id: ")) {
+		proxyData.id = message.right(message.length() - 20);
+	} else if (message.contains("NX> 705 Session display: ")) {
+		proxyData.display = message.right(message.length() - 24).toInt();
+	} else if (message.contains("NX> 706 Agent cookie: ")) {
+		proxyData.cookie = message.right(message.length() - 22);
+	} else if (message.contains("NX> 702 Proxy IP: ")) {
+		proxyData.proxyIP = message.right(message.length() - 18);
+	} else if (message.contains("NX> 707 SSL tunneling: 1")) {
+		proxyData.encrypted = true;
+	}
+
+	if (message.contains("NX> 710 Session status: running")) {
+		invokeProxy();
+		returnMessage = "bye\n";
+	}
 	
+	return returnMessage;
 }
+
+void NXClientLib::invokeProxy()
+{
+	QFile options;
+	QDir nxdir;
+	
+	nxdir.mkpath(QDir::homePath() + "/.nx/S-" + proxyData.id);
+	options.setFileName(QDir::homePath() + "/.nx/S-" + proxyData.id + "/options");
+
+	QString data;
+	data = "nx,session=session,cookie=" + proxyData.cookie + ",root=" + QDir::homePath() + "/.nx,id=" + proxyData.id + ",listen=33057:" + QString::number(proxyData.display) + "\n";
+	options.open(QIODevice::WriteOnly);
+	options.write(data.toAscii());
+	options.close();
+
+	QStringList arguments;
+	nxproxyProcess.setEnvironment(nxproxyProcess.systemEnvironment());
+
+	arguments << "-S" << "options=" + options.fileName() + ":" + QString::number(proxyData.display);
+	nxproxyProcess.startDetached(NXPROXY_BIN, arguments);
+}

Modified: nxclientlib/nxclientlib.h
===================================================================
--- nxclientlib/nxclientlib.h	2006-08-03 15:17:51 UTC (rev 243)
+++ nxclientlib/nxclientlib.h	2006-08-03 18:28:45 UTC (rev 244)
@@ -28,6 +28,14 @@
 
 using namespace std;
 
+struct ProxyData {
+	QString id;
+	int display;
+	QString cookie;
+	QString proxyIP;
+	bool encrypted;
+};
+
 class NXClientLib : public QObject
 {
 	Q_OBJECT
@@ -55,6 +63,10 @@
 		void allowSSHConnect(bool auth);
 
 		void setSession(NXSessionData);
+
+		void invokeProxy();
+
+		QString parseSSH(QString);
 	public slots:
 		void processStarted();
 		void processError(QProcess::ProcessError);
@@ -64,8 +76,15 @@
 
 		void doneAuth();
 		void failedLogin();
+
+		void finished() { isFinished = true; };
 	private:
+		bool usingHardcodedKey;
+		bool isFinished;
+		
 		QProcess nxsshProcess;
+		QProcess nxproxyProcess;
+		
 		QTemporaryFile *keyFile;
 		
 		NXSession session;
@@ -79,7 +98,7 @@
 		string callbackStdout;
 		string callbackStderr;
 		
-		bool usingHardcodedKey;
+		ProxyData proxyData;
 };
 
 #endif

Modified: nxclientlib/nxsession.cpp
===================================================================
--- nxclientlib/nxsession.cpp	2006-08-03 15:17:51 UTC (rev 243)
+++ nxclientlib/nxsession.cpp	2006-08-03 18:28:45 UTC (rev 244)
@@ -16,7 +16,7 @@
  ***************************************************************************/
  
 // Enumerated type defining the stages through which the client goes when connecting
-enum { HELLO_NXCLIENT, ACKNOWLEDGE, SHELL_MODE, AUTH_MODE, LOGIN, LIST_SESSIONS, PARSESESSIONS, STARTSESSION };
+enum { HELLO_NXCLIENT, ACKNOWLEDGE, SHELL_MODE, AUTH_MODE, LOGIN, LIST_SESSIONS, PARSESESSIONS, STARTSESSION, FINISHED };
 
 /*
 	0 HELLO NXCLIENT
@@ -124,54 +124,55 @@
 			if (response == 105 && sessionSet) {
 				int media = 0;
 				int render = 0;
-				int encryption = 0;
 
 				if (sessionData.media)
 					media = 1;
 				if (sessionData.render)
 					render = 1;
-				if (sessionData.encryption)
-					encryption = 1;
 					
 				if (sessionData.suspended) {
 					// These are the session parameters that NoMachine's client sends for resume
 					returnMessage = "restoresession --id=\"" + sessionData.id +
 					"\" --session=\"" + sessionData.sessionName +
 					"\" --type=\"" + sessionData.sessionType +
-					"\" --cache=\"" + sessionData.cache +
-					"M\" --images=\"" + sessionData.images +
+					"\" --cache=\"" + QString::number(sessionData.cache) +
+					"M\" --images=\"" + QString::number(sessionData.images) +
 					"M\" --cookie=\"" + generateCookie() +
 					"\" --link=\"" + sessionData.linkType +
 					"\" --kbtype=\"" + sessionData.kbtype +
-					"\" --nodelay=\"1\" --encryption=\"" + encryption +
+					"\" --nodelay=\"1\" --encryption=\"" + QString::number(encryption) +
 					"\" --backingstore=\"" + sessionData.backingstore +
 					"\" --geometry=\"" + sessionData.geometry +
 					"\" --media=\"" + sessionData.media +
 					"\" --agent_server=\"" + sessionData.agentServer +
 					"\" --agent_user=\"" + sessionData.agentUser +
 					"\" --agent_password=\"" + sessionData.agentPass + "\"";
+					stage++;
 				} else {
 					returnMessage = "startsession --session=\"" + sessionData.sessionName +
 					"\" --type=\"" + sessionData.sessionType +
-					"\" --cache=\"" + sessionData.cache +
-					"M\" --images=\"" + sessionData.images +
+					"\" --cache=\"" + QString::number(sessionData.cache) +
+					"M\" --images=\"" + QString::number(sessionData.images) +
 					"M\" --cookie=\"" + generateCookie() +
 					"\" --link=\"" + sessionData.linkType +
-					"\" --render=\"" + render +
-					"\" --encryption=\"" + encryption +
+					"\" --render=\"" + QString::number(render) +
+					"\" --encryption=\"" + QString::number(encryption) +
 					"\" --backingstore=\"" + sessionData.backingstore +
-					"\" --imagecompressionmethod=\"" + sessionData.imageCompressionMethod +
+					"\" --imagecompressionmethod=\"" + QString::number(sessionData.imageCompressionMethod) +
 					"\" --geometry=\"" + sessionData.geometry +
+					"\" --screeninfo=\"" + sessionData.screenInfo + 
 					"\" --keyboard=\"" + sessionData.keyboard +
 					"\" --kbtype=\"" + sessionData.kbtype +
-					"\" --media=\"" + media +
+					"\" --media=\"" + QString::number(media) +
 					"\" --agent_server=\"" + sessionData.agentServer +
 					"\" --agent_user=\"" + sessionData.agentUser +
-					"\" --agent_password=\"" + sessionData.agentPass +
-					"\" --screeninfo=\"" + sessionData.screenInfo + "\"";
+					"\" --agent_password=\"" + sessionData.agentPass + "\"";
+					stage++;
 				}
 			}
 			break;
+		case FINISHED:
+			emit finished();
 	}
 
 	if (!returnMessage.isEmpty()) {
@@ -269,5 +270,3 @@
 		nbytes -= r;
 	}
 }
-
-

Modified: nxclientlib/nxsession.h
===================================================================
--- nxclientlib/nxsession.h	2006-08-03 15:17:51 UTC (rev 243)
+++ nxclientlib/nxsession.h	2006-08-03 18:28:45 UTC (rev 244)
@@ -34,7 +34,6 @@
 	int images;
 	QString linkType;
 	bool render;
-	bool encryption;
 	QString backingstore;
 	int imageCompressionMethod;
 	int imageCompressionLevel;
@@ -82,6 +81,8 @@
 		void setRender(bool isRender) { if (isRender) renderSet = "render"; };
 		void setContinue(bool allow) { doSSH = allow; };
 		void setSession(NXSessionData);
+		void setEncryption(bool enc) { encryption = enc; };
+		
 		QString generateCookie();
 		
 		NXSessionData sessionData;
@@ -90,10 +91,13 @@
 		// Emitted when the initial public key authentication is successful
 		void authenticated();
 		void loginFailed();
+		void finished();
 	private:
 		bool doSSH;
 		bool suspendedSessions;
 		bool sessionSet;
+		bool encryption;
+		
 		void reset();
 		void fillRand(unsigned char *, size_t);
 

Modified: nxclientlib/test/main.cpp
===================================================================
--- nxclientlib/test/main.cpp	2006-08-03 15:17:51 UTC (rev 243)
+++ nxclientlib/test/main.cpp	2006-08-03 18:28:45 UTC (rev 244)
@@ -37,5 +37,30 @@
 	lib.setResolution(640,480);
 	lib.setDepth(24);
 	lib.setRender(true);
+
+	NXSessionData session;
+
+	// HARDCODED TEST CASE
+	session.sessionName = "TEST";
+	session.sessionType = "unix-kde";
+	session.cache = 8;
+	session.images = 32;
+	session.linkType = "adsl";
+	session.render = true;
+	session.backingstore = "when_requested";
+	session.imageCompressionMethod = 2;
+	// session.imageCompressionLevel;
+	session.geometry = "800x600+0+0";
+	session.keyboard = "defkeymap";
+	session.kbtype = "pc102/defkeymap";
+	session.media = false;
+	session.agentServer = "";
+	session.agentUser = "";
+	session.agentPass = "";
+	session.screenInfo = "800x600x24+render";
+	session.cups = 0;
+	session.suspended = false;
+
+	lib.setSession(session);
 	return qApp->exec();
 }



From gwright at mail.berlios.de  Thu Aug  3 20:46:01 2006
From: gwright at mail.berlios.de (gwright at BerliOS)
Date: Thu, 3 Aug 2006 20:46:01 +0200
Subject: [Freenx-cvs] r245 - nxclientlib
Message-ID: <200608031846.k73Ik1kC003530@sheep.berlios.de>

Author: gwright
Date: 2006-08-03 20:45:57 +0200 (Thu, 03 Aug 2006)
New Revision: 245

Modified:
   nxclientlib/nxclientlib.cpp
   nxclientlib/nxclientlib.h
Log:
Use TCP port number as specified in http://www.nomachine.com/ar/view.php?ar_id=AR12B00115


Modified: nxclientlib/nxclientlib.cpp
===================================================================
--- nxclientlib/nxclientlib.cpp	2006-08-03 18:28:45 UTC (rev 244)
+++ nxclientlib/nxclientlib.cpp	2006-08-03 18:45:57 UTC (rev 245)
@@ -159,7 +159,7 @@
 	if (proxyData.encrypted && isFinished && message.contains("NX> 999 Bye")) {
 		QString returnMessage;
 		returnMessage = "NX> 299 Switching connection to: ";
-		returnMessage += proxyData.proxyIP + ":33057" + " cookie: " + proxyData.cookie + "\n";
+		returnMessage += proxyData.proxyIP + ":" + QString::number(proxyData.port) + " cookie: " + proxyData.cookie + "\n";
 		write(returnMessage);
 	}
 
@@ -207,6 +207,7 @@
 		proxyData.id = message.right(message.length() - 20);
 	} else if (message.contains("NX> 705 Session display: ")) {
 		proxyData.display = message.right(message.length() - 24).toInt();
+		proxyData.port = proxyData.display + 4000;
 	} else if (message.contains("NX> 706 Agent cookie: ")) {
 		proxyData.cookie = message.right(message.length() - 22);
 	} else if (message.contains("NX> 702 Proxy IP: ")) {
@@ -232,7 +233,11 @@
 	options.setFileName(QDir::homePath() + "/.nx/S-" + proxyData.id + "/options");
 
 	QString data;
-	data = "nx,session=session,cookie=" + proxyData.cookie + ",root=" + QDir::homePath() + "/.nx,id=" + proxyData.id + ",listen=33057:" + QString::number(proxyData.display) + "\n";
+	if (proxyData.encrypted)
+		data = "nx,session=session,cookie=" + proxyData.cookie + ",root=" + QDir::homePath() + "/.nx,id=" + proxyData.id + ",listen=" + QString::number(proxyData.port) + ":" + QString::number(proxyData.display) + "\n";
+	else
+		data = "nx,session=session,cookie=" + proxyData.cookie + ",root=" + QDir::homePath() + "/.nx,id=" + proxyData.id + ":" + QString::number(proxyData.display) + "\n";
+	
 	options.open(QIODevice::WriteOnly);
 	options.write(data.toAscii());
 	options.close();

Modified: nxclientlib/nxclientlib.h
===================================================================
--- nxclientlib/nxclientlib.h	2006-08-03 18:28:45 UTC (rev 244)
+++ nxclientlib/nxclientlib.h	2006-08-03 18:45:57 UTC (rev 245)
@@ -34,6 +34,7 @@
 	QString cookie;
 	QString proxyIP;
 	bool encrypted;
+	int port;
 };
 
 class NXClientLib : public QObject



From gwright at mail.berlios.de  Thu Aug  3 21:26:47 2006
From: gwright at mail.berlios.de (gwright at BerliOS)
Date: Thu, 3 Aug 2006 21:26:47 +0200
Subject: [Freenx-cvs] r246 - nxclientlib
Message-ID: <200608031926.k73JQlX0016747@sheep.berlios.de>

Author: gwright
Date: 2006-08-03 21:26:43 +0200 (Thu, 03 Aug 2006)
New Revision: 246

Modified:
   nxclientlib/nxclientlib.cpp
   nxclientlib/nxclientlib.h
Log:
Remove parent app dependency on Qt, add ability to pass a key, fix unencrypted connections


Modified: nxclientlib/nxclientlib.cpp
===================================================================
--- nxclientlib/nxclientlib.cpp	2006-08-03 18:45:57 UTC (rev 245)
+++ nxclientlib/nxclientlib.cpp	2006-08-03 19:26:43 UTC (rev 246)
@@ -28,7 +28,7 @@
 NXClientLib::NXClientLib(QObject *parent) : QObject(parent)
 {
 	isFinished = false;
-	
+	proxyData.encrypted = false;
 	connect(&session, SIGNAL(authenticated()), this, SLOT(doneAuth()));
 	connect(&session, SIGNAL(loginFailed()), this, SLOT(failedLogin()));
 	connect(&session, SIGNAL(finished()), this, SLOT(finished()));
@@ -38,19 +38,35 @@
 {
 }
 
-void NXClientLib::invokeNXSSH(QString publicKey, QString serverHost, bool encryption)
+void NXClientLib::invokeNXSSH(const char *publicKeyS, const char *serverHostS, bool encryption, const char *key)
 {
+	QString publicKey;
+	QString serverHost;
+
+	publicKey = publicKeyS;
+	serverHost = serverHostS;
+	
 	QStringList arguments;
-
+	proxyData.server = serverHost;
+	QByteArray keyba;
+	keyba = key;
+	
 	if (publicKey == "default") {
 		usingHardcodedKey = true;
+	}
+
+	if (publicKey == "default" || publicKey == "supplied") {
 		cerr << tr("WARNING: Using hardcoded NoMachine public key.").toStdString() << endl;
 		keyFile = new QTemporaryFile;
 		keyFile->open();
 		
 		arguments << "-nx" << "-i" << keyFile->fileName();
-
-		keyFile->write(cert);
+		
+		if (publicKey == "default")
+			keyFile->write(cert);
+		else
+			keyFile->write(keyba);
+			
 		keyFile->close();
 	} else {
 		arguments << "-i" << publicKey;
@@ -59,7 +75,8 @@
 	if (encryption == true) {
 		arguments << "-B";
 		session.setEncryption(true);
-	}
+	} else
+		session.setEncryption(false);
 	
 	connect(&nxsshProcess, SIGNAL(started()), this, SLOT(processStarted()));
 	connect(&nxsshProcess, SIGNAL(error(QProcess::ProcessError)), this, SLOT(processError(QProcess::ProcessError)));
@@ -154,7 +171,7 @@
 {
 	QString message = nxsshProcess.readAllStandardError().data();
 	
-	cout << "STDERR: " << message.toStdString();
+	cerr << message.toStdString();
 
 	if (proxyData.encrypted && isFinished && message.contains("NX> 999 Bye")) {
 		QString returnMessage;
@@ -202,7 +219,7 @@
 QString NXClientLib::parseSSH(QString message)
 {
 	QString returnMessage = 0;
-	cout << "FOO: "<<message.toStdString() << endl;
+	
 	if (message.contains("NX> 700 Session id: ")) {
 		proxyData.id = message.right(message.length() - 20);
 	} else if (message.contains("NX> 705 Session display: ")) {
@@ -236,8 +253,8 @@
 	if (proxyData.encrypted)
 		data = "nx,session=session,cookie=" + proxyData.cookie + ",root=" + QDir::homePath() + "/.nx,id=" + proxyData.id + ",listen=" + QString::number(proxyData.port) + ":" + QString::number(proxyData.display) + "\n";
 	else
-		data = "nx,session=session,cookie=" + proxyData.cookie + ",root=" + QDir::homePath() + "/.nx,id=" + proxyData.id + ":" + QString::number(proxyData.display) + "\n";
-	
+		data = "nx,session=session,cookie=" + proxyData.cookie + ",root=" + QDir::homePath() + "/.nx,id=" + proxyData.id + ",connect=" + proxyData.server + ":" + QString::number(proxyData.display) + "\n";
+
 	options.open(QIODevice::WriteOnly);
 	options.write(data.toAscii());
 	options.close();

Modified: nxclientlib/nxclientlib.h
===================================================================
--- nxclientlib/nxclientlib.h	2006-08-03 18:45:57 UTC (rev 245)
+++ nxclientlib/nxclientlib.h	2006-08-03 19:26:43 UTC (rev 246)
@@ -35,6 +35,7 @@
 	QString proxyIP;
 	bool encrypted;
 	int port;
+	QString server;
 };
 
 class NXClientLib : public QObject
@@ -47,7 +48,7 @@
 		// publicKey is the path to the ssh public key file to authenticate with. Pass "default" to use the default NoMachine key
 		// serverHost is the hostname of the NX server to connect to
 		// encryption is whether to use an encrypted NX session
-		void invokeNXSSH(QString publicKey = "default", QString serverHost = "", bool encryption = true);
+		void invokeNXSSH(const char *publicKey = "default", const char *serverHost = "", bool encryption = true, const char *key = 0);
 
 		// Overloaded to give callback data on write
 		void write(QString);



From gwright at mail.berlios.de  Thu Aug  3 23:40:38 2006
From: gwright at mail.berlios.de (gwright at BerliOS)
Date: Thu, 3 Aug 2006 23:40:38 +0200
Subject: [Freenx-cvs] r247 - in nxclientlib: . qt-test
Message-ID: <200608032140.k73Leci3022413@sheep.berlios.de>

Author: gwright
Date: 2006-08-03 23:40:38 +0200 (Thu, 03 Aug 2006)
New Revision: 247

Added:
   nxclientlib/qt-test/
   nxclientlib/qt-test/main.cpp
   nxclientlib/qt-test/mainwindow.ui
   nxclientlib/qt-test/qt-test.pro
   nxclientlib/qt-test/qtnxcallback.cpp
   nxclientlib/qt-test/qtnxcallback.h
   nxclientlib/qt-test/qtnxwindow.cpp
   nxclientlib/qt-test/qtnxwindow.h
Modified:
   nxclientlib/nxcallback.h
Log:
New qt interface for testing the client library. Very crude.



Modified: nxclientlib/nxcallback.h
===================================================================
--- nxclientlib/nxcallback.h	2006-08-03 19:26:43 UTC (rev 246)
+++ nxclientlib/nxcallback.h	2006-08-03 21:40:38 UTC (rev 247)
@@ -14,6 +14,9 @@
  *   (at your option) any later version.                                   *
  *                                                                         *
  ***************************************************************************/
+ 
+#ifndef _NXCALLBACK_H_
+#define _NXCALLBACK_H_
 
 #include <iostream>
 #include <vector>
@@ -39,3 +42,5 @@
 
 		virtual void resumeSessions(std::vector<NXResumeData> *sessions) = 0;
 };
+
+#endif

Added: nxclientlib/qt-test/main.cpp
===================================================================
--- nxclientlib/qt-test/main.cpp	2006-08-03 19:26:43 UTC (rev 246)
+++ nxclientlib/qt-test/main.cpp	2006-08-03 21:40:38 UTC (rev 247)
@@ -0,0 +1,28 @@
+/***************************************************************************
+                               main.cpp
+                             -------------------
+    begin                : Thursday August 3rd 2006
+    copyright            : (C) 2006 by George Wright
+    email                : gwright at kde.org
+ ***************************************************************************/
+
+/***************************************************************************
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ *                                                                         *
+ ***************************************************************************/
+
+#include "qtnxwindow.h"
+
+int main(int argc, char *argv[])
+{
+	QApplication app(argc, argv);
+	
+	QtNXWindow *mw = new QtNXWindow();
+	mw->show();
+
+	return app.exec();
+}

Added: nxclientlib/qt-test/mainwindow.ui
===================================================================
--- nxclientlib/qt-test/mainwindow.ui	2006-08-03 19:26:43 UTC (rev 246)
+++ nxclientlib/qt-test/mainwindow.ui	2006-08-03 21:40:38 UTC (rev 247)
@@ -0,0 +1,635 @@
+<ui version="4.0" >
+ <author></author>
+ <comment></comment>
+ <exportmacro></exportmacro>
+ <class>MainWindow</class>
+ <widget class="QMainWindow" name="MainWindow" >
+  <property name="geometry" >
+   <rect>
+    <x>0</x>
+    <y>0</y>
+    <width>411</width>
+    <height>697</height>
+   </rect>
+  </property>
+  <property name="windowTitle" >
+   <string>MainWindow</string>
+  </property>
+  <widget class="QWidget" name="centralwidget" >
+   <layout class="QHBoxLayout" >
+    <property name="margin" >
+     <number>9</number>
+    </property>
+    <property name="spacing" >
+     <number>6</number>
+    </property>
+    <item>
+     <layout class="QVBoxLayout" >
+      <property name="margin" >
+       <number>0</number>
+      </property>
+      <property name="spacing" >
+       <number>6</number>
+      </property>
+      <item>
+       <widget class="QLabel" name="label_18" >
+        <property name="text" >
+         <string>&lt;html>&lt;head>&lt;meta name="qrichtext" content="1" />&lt;/head>&lt;body style=" white-space: pre-wrap; font-family:Sans Serif; font-size:9pt; font-weight:400; font-style:normal; text-decoration:none;">&lt;p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">&lt;span style=" font-size:13pt; font-weight:600;">NX Client&lt;/span>&lt;/p>&lt;/body>&lt;/html></string>
+        </property>
+        <property name="alignment" >
+         <set>Qt::AlignCenter</set>
+        </property>
+       </widget>
+      </item>
+      <item>
+       <layout class="QVBoxLayout" >
+        <property name="margin" >
+         <number>0</number>
+        </property>
+        <property name="spacing" >
+         <number>6</number>
+        </property>
+        <item>
+         <layout class="QHBoxLayout" >
+          <property name="margin" >
+           <number>0</number>
+          </property>
+          <property name="spacing" >
+           <number>6</number>
+          </property>
+          <item>
+           <widget class="QLabel" name="label_15" >
+            <property name="text" >
+             <string>Server hostname:</string>
+            </property>
+           </widget>
+          </item>
+          <item>
+           <widget class="QLineEdit" name="server" />
+          </item>
+         </layout>
+        </item>
+        <item>
+         <layout class="QHBoxLayout" >
+          <property name="margin" >
+           <number>0</number>
+          </property>
+          <property name="spacing" >
+           <number>6</number>
+          </property>
+          <item>
+           <widget class="QLabel" name="label_16" >
+            <property name="text" >
+             <string>Username:</string>
+            </property>
+           </widget>
+          </item>
+          <item>
+           <widget class="QLineEdit" name="username" />
+          </item>
+         </layout>
+        </item>
+        <item>
+         <layout class="QHBoxLayout" >
+          <property name="margin" >
+           <number>0</number>
+          </property>
+          <property name="spacing" >
+           <number>6</number>
+          </property>
+          <item>
+           <widget class="QLabel" name="label_17" >
+            <property name="text" >
+             <string>Password:</string>
+            </property>
+           </widget>
+          </item>
+          <item>
+           <widget class="QLineEdit" name="password" >
+            <property name="inputMask" >
+             <string/>
+            </property>
+            <property name="text" >
+             <string/>
+            </property>
+            <property name="echoMode" >
+             <enum>QLineEdit::Password</enum>
+            </property>
+           </widget>
+          </item>
+         </layout>
+        </item>
+        <item>
+         <layout class="QHBoxLayout" >
+          <property name="margin" >
+           <number>0</number>
+          </property>
+          <property name="spacing" >
+           <number>6</number>
+          </property>
+          <item>
+           <widget class="QLabel" name="label_2" >
+            <property name="text" >
+             <string>Session Name:</string>
+            </property>
+           </widget>
+          </item>
+          <item>
+           <widget class="QLineEdit" name="session_name" />
+          </item>
+         </layout>
+        </item>
+        <item>
+         <layout class="QHBoxLayout" >
+          <property name="margin" >
+           <number>0</number>
+          </property>
+          <property name="spacing" >
+           <number>6</number>
+          </property>
+          <item>
+           <widget class="QLabel" name="label_3" >
+            <property name="text" >
+             <string>Session Type:</string>
+            </property>
+           </widget>
+          </item>
+          <item>
+           <widget class="QComboBox" name="session_type" >
+            <item>
+             <property name="text" >
+              <string>unix-kde</string>
+             </property>
+            </item>
+            <item>
+             <property name="text" >
+              <string>unix-gnome</string>
+             </property>
+            </item>
+            <item>
+             <property name="text" >
+              <string>unix-application</string>
+             </property>
+            </item>
+            <item>
+             <property name="text" >
+              <string>windows</string>
+             </property>
+            </item>
+            <item>
+             <property name="text" >
+              <string>vnc</string>
+             </property>
+            </item>
+           </widget>
+          </item>
+         </layout>
+        </item>
+        <item>
+         <layout class="QHBoxLayout" >
+          <property name="margin" >
+           <number>0</number>
+          </property>
+          <property name="spacing" >
+           <number>6</number>
+          </property>
+          <item>
+           <widget class="QLabel" name="label_4" >
+            <property name="text" >
+             <string>Memory cache size:</string>
+            </property>
+           </widget>
+          </item>
+          <item>
+           <widget class="QComboBox" name="cache" >
+            <item>
+             <property name="text" >
+              <string>0</string>
+             </property>
+            </item>
+            <item>
+             <property name="text" >
+              <string>1</string>
+             </property>
+            </item>
+            <item>
+             <property name="text" >
+              <string>2</string>
+             </property>
+            </item>
+            <item>
+             <property name="text" >
+              <string>4</string>
+             </property>
+            </item>
+            <item>
+             <property name="text" >
+              <string>8</string>
+             </property>
+            </item>
+            <item>
+             <property name="text" >
+              <string>16</string>
+             </property>
+            </item>
+            <item>
+             <property name="text" >
+              <string>32</string>
+             </property>
+            </item>
+           </widget>
+          </item>
+         </layout>
+        </item>
+        <item>
+         <layout class="QHBoxLayout" >
+          <property name="margin" >
+           <number>0</number>
+          </property>
+          <property name="spacing" >
+           <number>6</number>
+          </property>
+          <item>
+           <widget class="QLabel" name="label_5" >
+            <property name="text" >
+             <string>Disk cache size:</string>
+            </property>
+           </widget>
+          </item>
+          <item>
+           <widget class="QComboBox" name="images" >
+            <item>
+             <property name="text" >
+              <string>0</string>
+             </property>
+            </item>
+            <item>
+             <property name="text" >
+              <string>1</string>
+             </property>
+            </item>
+            <item>
+             <property name="text" >
+              <string>2</string>
+             </property>
+            </item>
+            <item>
+             <property name="text" >
+              <string>4</string>
+             </property>
+            </item>
+            <item>
+             <property name="text" >
+              <string>8</string>
+             </property>
+            </item>
+            <item>
+             <property name="text" >
+              <string>16</string>
+             </property>
+            </item>
+            <item>
+             <property name="text" >
+              <string>32</string>
+             </property>
+            </item>
+           </widget>
+          </item>
+         </layout>
+        </item>
+        <item>
+         <layout class="QHBoxLayout" >
+          <property name="margin" >
+           <number>0</number>
+          </property>
+          <property name="spacing" >
+           <number>6</number>
+          </property>
+          <item>
+           <widget class="QLabel" name="label_6" >
+            <property name="text" >
+             <string>Link type:</string>
+            </property>
+           </widget>
+          </item>
+          <item>
+           <widget class="QComboBox" name="link_type" >
+            <item>
+             <property name="text" >
+              <string>modem</string>
+             </property>
+            </item>
+            <item>
+             <property name="text" >
+              <string>isdn</string>
+             </property>
+            </item>
+            <item>
+             <property name="text" >
+              <string>adsl</string>
+             </property>
+            </item>
+            <item>
+             <property name="text" >
+              <string>wan</string>
+             </property>
+            </item>
+            <item>
+             <property name="text" >
+              <string>lan</string>
+             </property>
+            </item>
+           </widget>
+          </item>
+         </layout>
+        </item>
+        <item>
+         <layout class="QHBoxLayout" >
+          <property name="margin" >
+           <number>0</number>
+          </property>
+          <property name="spacing" >
+           <number>6</number>
+          </property>
+          <item>
+           <widget class="QLabel" name="label_7" >
+            <property name="text" >
+             <string>Resolution:</string>
+            </property>
+           </widget>
+          </item>
+          <item>
+           <widget class="QComboBox" name="resolution" >
+            <item>
+             <property name="text" >
+              <string>640x480</string>
+             </property>
+            </item>
+            <item>
+             <property name="text" >
+              <string>800x600</string>
+             </property>
+            </item>
+            <item>
+             <property name="text" >
+              <string>1024x768</string>
+             </property>
+            </item>
+            <item>
+             <property name="text" >
+              <string>1600x1200</string>
+             </property>
+            </item>
+           </widget>
+          </item>
+         </layout>
+        </item>
+        <item>
+         <layout class="QHBoxLayout" >
+          <property name="margin" >
+           <number>0</number>
+          </property>
+          <property name="spacing" >
+           <number>6</number>
+          </property>
+          <item>
+           <widget class="QLabel" name="label_8" >
+            <property name="text" >
+             <string>RENDER Extension:</string>
+            </property>
+           </widget>
+          </item>
+          <item>
+           <widget class="QCheckBox" name="render" >
+            <property name="text" >
+             <string>Use RENDER</string>
+            </property>
+           </widget>
+          </item>
+         </layout>
+        </item>
+        <item>
+         <layout class="QHBoxLayout" >
+          <property name="margin" >
+           <number>0</number>
+          </property>
+          <property name="spacing" >
+           <number>6</number>
+          </property>
+          <item>
+           <widget class="QLabel" name="label_9" >
+            <property name="text" >
+             <string>Use SSH Tunnelling:</string>
+            </property>
+           </widget>
+          </item>
+          <item>
+           <widget class="QCheckBox" name="encryption" >
+            <property name="text" >
+             <string>Use SSL</string>
+            </property>
+           </widget>
+          </item>
+         </layout>
+        </item>
+        <item>
+         <layout class="QHBoxLayout" >
+          <property name="margin" >
+           <number>0</number>
+          </property>
+          <property name="spacing" >
+           <number>6</number>
+          </property>
+          <item>
+           <widget class="QLabel" name="label_10" >
+            <property name="text" >
+             <string>Image compression:</string>
+            </property>
+           </widget>
+          </item>
+          <item>
+           <widget class="QComboBox" name="image_compression" >
+            <item>
+             <property name="text" >
+              <string>JPEG</string>
+             </property>
+            </item>
+            <item>
+             <property name="text" >
+              <string>RAW</string>
+             </property>
+            </item>
+            <item>
+             <property name="text" >
+              <string>PNG</string>
+             </property>
+            </item>
+           </widget>
+          </item>
+         </layout>
+        </item>
+        <item>
+         <layout class="QHBoxLayout" >
+          <property name="margin" >
+           <number>0</number>
+          </property>
+          <property name="spacing" >
+           <number>6</number>
+          </property>
+          <item>
+           <widget class="QLabel" name="label_11" >
+            <property name="text" >
+             <string>JPEG Quality:</string>
+            </property>
+           </widget>
+          </item>
+          <item>
+           <layout class="QHBoxLayout" >
+            <property name="margin" >
+             <number>0</number>
+            </property>
+            <property name="spacing" >
+             <number>6</number>
+            </property>
+            <item>
+             <widget class="QSlider" name="jpeg_quality" >
+              <property name="maximum" >
+               <number>100</number>
+              </property>
+              <property name="sliderPosition" >
+               <number>75</number>
+              </property>
+              <property name="orientation" >
+               <enum>Qt::Horizontal</enum>
+              </property>
+             </widget>
+            </item>
+            <item>
+             <widget class="QLabel" name="label" >
+              <property name="text" >
+               <string>75</string>
+              </property>
+             </widget>
+            </item>
+           </layout>
+          </item>
+         </layout>
+        </item>
+        <item>
+         <layout class="QHBoxLayout" >
+          <property name="margin" >
+           <number>0</number>
+          </property>
+          <property name="spacing" >
+           <number>6</number>
+          </property>
+          <item>
+           <widget class="QLabel" name="label_12" >
+            <property name="text" >
+             <string>RDP Username:</string>
+            </property>
+           </widget>
+          </item>
+          <item>
+           <widget class="QLineEdit" name="rdp_username" />
+          </item>
+         </layout>
+        </item>
+        <item>
+         <layout class="QHBoxLayout" >
+          <property name="margin" >
+           <number>0</number>
+          </property>
+          <property name="spacing" >
+           <number>6</number>
+          </property>
+          <item>
+           <widget class="QLabel" name="label_13" >
+            <property name="text" >
+             <string>RDP Password:</string>
+            </property>
+           </widget>
+          </item>
+          <item>
+           <widget class="QLineEdit" name="rdp_password" >
+            <property name="echoMode" >
+             <enum>QLineEdit::Password</enum>
+            </property>
+           </widget>
+          </item>
+         </layout>
+        </item>
+        <item>
+         <layout class="QHBoxLayout" >
+          <property name="margin" >
+           <number>0</number>
+          </property>
+          <property name="spacing" >
+           <number>6</number>
+          </property>
+          <item>
+           <widget class="QLabel" name="label_14" >
+            <property name="text" >
+             <string>RDP Server:</string>
+            </property>
+           </widget>
+          </item>
+          <item>
+           <widget class="QLineEdit" name="rdp_server" />
+          </item>
+         </layout>
+        </item>
+       </layout>
+      </item>
+      <item>
+       <spacer>
+        <property name="orientation" >
+         <enum>Qt::Vertical</enum>
+        </property>
+        <property name="sizeHint" >
+         <size>
+          <width>20</width>
+          <height>40</height>
+         </size>
+        </property>
+       </spacer>
+      </item>
+      <item>
+       <widget class="QPushButton" name="connectButton" >
+        <property name="text" >
+         <string>&amp;Connect</string>
+        </property>
+       </widget>
+      </item>
+     </layout>
+    </item>
+   </layout>
+  </widget>
+  <widget class="QMenuBar" name="menubar" >
+   <property name="geometry" >
+    <rect>
+     <x>0</x>
+     <y>0</y>
+     <width>411</width>
+     <height>31</height>
+    </rect>
+   </property>
+   <widget class="QMenu" name="menu_File" >
+    <property name="title" >
+     <string>&amp;File</string>
+    </property>
+    <addaction name="action_Quit" />
+   </widget>
+   <addaction name="menu_File" />
+  </widget>
+  <widget class="QStatusBar" name="statusbar" />
+  <action name="action_Quit" >
+   <property name="text" >
+    <string>&amp;Quit</string>
+   </property>
+  </action>
+ </widget>
+ <pixmapfunction></pixmapfunction>
+ <resources/>
+ <connections/>
+</ui>

Added: nxclientlib/qt-test/qt-test.pro
===================================================================
--- nxclientlib/qt-test/qt-test.pro	2006-08-03 19:26:43 UTC (rev 246)
+++ nxclientlib/qt-test/qt-test.pro	2006-08-03 21:40:38 UTC (rev 247)
@@ -0,0 +1,19 @@
+TEMPLATE	= app
+
+FORMS = mainwindow.ui
+
+SOURCES = main.cpp qtnxwindow.cpp qtnxcallback.cpp
+
+HEADERS = qtnxwindow.h qtnxcallback.h
+
+INCLUDEPATH	+= $(QTDIR)/include . ..
+
+DEPENDPATH	+= $(QTDIR)/include
+
+LIBPATH += ..
+
+QT += ui
+
+LIBS	= -lnxclientlib
+
+TARGET		= qtnx
\ No newline at end of file

Added: nxclientlib/qt-test/qtnxcallback.cpp
===================================================================
--- nxclientlib/qt-test/qtnxcallback.cpp	2006-08-03 19:26:43 UTC (rev 246)
+++ nxclientlib/qt-test/qtnxcallback.cpp	2006-08-03 21:40:38 UTC (rev 247)
@@ -0,0 +1,39 @@
+/***************************************************************************
+                               qtnxcallback.cpp
+                             -------------------
+    begin                : Thursday August 3rd 2006
+    copyright            : (C) 2006 by George Wright
+    email                : gwright at kde.org
+ ***************************************************************************/
+
+/***************************************************************************
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ *                                                                         *
+ ***************************************************************************/
+
+#include "qtnxcallback.h"
+
+void QtNXCallback::write(std::string *msg)
+{
+	emit message(*msg);
+}
+
+void QtNXCallback::sshRequestAuthenticity(std::string *msg)
+{
+	emit sshAuth(*msg);
+}
+
+void QtNXCallback::authenticationFailed()
+{
+	emit authFailed();
+}
+
+void QtNXCallback::resumeSessions(std::vector<NXResumeData> *sessions)
+{
+	emit resume();
+	m_sessions = sessions;
+}

Added: nxclientlib/qt-test/qtnxcallback.h
===================================================================
--- nxclientlib/qt-test/qtnxcallback.h	2006-08-03 19:26:43 UTC (rev 246)
+++ nxclientlib/qt-test/qtnxcallback.h	2006-08-03 21:40:38 UTC (rev 247)
@@ -0,0 +1,48 @@
+/***************************************************************************
+                               qtnxcallback.h
+                             -------------------
+    begin                : Thursday August 3rd 2006
+    copyright            : (C) 2006 by George Wright
+    email                : gwright at kde.org
+ ***************************************************************************/
+
+/***************************************************************************
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ *                                                                         *
+ ***************************************************************************/
+ 
+#ifndef _QTNXCALLBACK_H_
+#define _QTNXCALLBACK_H_
+
+#include <QObject>
+#include "nxcallback.h"
+
+class QtNXCallback : public QObject, public NXCallback
+{
+	Q_OBJECT
+	public:
+		virtual void write(std::string *msg);
+		virtual void sshRequestAuthenticity(std::string *msg);
+
+		virtual void authenticationFailed();
+
+		// Stdout/stderr from the nxssh process
+		virtual void stdout(std::string *msg) {};
+		virtual void stderr(std::string *msg) {};
+		// Stdin sent to the nxssh process
+		virtual void stdin(std::string *msg) {};
+		virtual void resumeSessions(std::vector<NXResumeData> *sessions);
+	signals:
+		void authFailed();
+		void message(std::string);
+		void sshAuth(std::string);
+		void resume();
+	private:
+		std::vector<NXResumeData> *m_sessions;
+};
+
+#endif

Added: nxclientlib/qt-test/qtnxwindow.cpp
===================================================================
--- nxclientlib/qt-test/qtnxwindow.cpp	2006-08-03 19:26:43 UTC (rev 246)
+++ nxclientlib/qt-test/qtnxwindow.cpp	2006-08-03 21:40:38 UTC (rev 247)
@@ -0,0 +1,91 @@
+/***************************************************************************
+                               qtnxwindow.cpp
+                             -------------------
+    begin                : Thursday August 3rd 2006
+    copyright            : (C) 2006 by George Wright
+    email                : gwright at kde.org
+ ***************************************************************************/
+
+/***************************************************************************
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ *                                                                         *
+ ***************************************************************************/
+
+#include "qtnxwindow.h"
+
+#include <QDesktopWidget>
+#include <QX11Info>
+
+QtNXWindow::QtNXWindow() : QMainWindow()
+{
+	ui_mw.setupUi(this);
+	m_cb = new QtNXCallback();
+
+	m_lib.setCallback(m_cb);
+	
+	connect(ui_mw.connectButton, SIGNAL(pressed()), this, SLOT(connectPressed()));
+}
+
+QtNXWindow::~QtNXWindow()
+{
+}
+
+void QtNXWindow::connectPressed()
+{
+	QDesktopWidget dw;
+	QX11Info info;
+	
+	session.sessionName = ui_mw.session_name->text();
+	session.sessionType = ui_mw.session_type->currentText();
+	session.cache = ui_mw.cache->currentText().toInt();
+	session.images = ui_mw.images->currentText().toInt();
+	session.linkType = ui_mw.link_type->currentText();
+	
+	if (ui_mw.render->checkState() == 0)
+		session.render = false;
+	if (ui_mw.render->checkState() == 2)
+		session.render = true;
+	
+	session.backingstore = "when_requested";
+
+	if (ui_mw.image_compression->currentText() == "JPEG")
+		session.imageCompressionMethod = -1;
+	if (ui_mw.image_compression->currentText() == "RAW")
+		session.imageCompressionMethod = 0;
+	if (ui_mw.image_compression->currentText() == "PNG")
+		session.imageCompressionMethod = 2;
+		
+	session.imageCompressionLevel = ui_mw.jpeg_quality->value();
+
+	if (ui_mw.resolution->currentText() == "640x480")
+		session.geometry = "640x480+0+0";
+	if (ui_mw.resolution->currentText() == "800x600")
+		session.geometry = "800x600+0+0";
+	if (ui_mw.resolution->currentText() == "1024x768")
+		session.geometry = "1024x768+0+0";
+	if (ui_mw.resolution->currentText() == "1600x1200")
+		session.geometry = "1600x1200+0+0";
+
+	session.keyboard = "defkeymap";
+	session.kbtype = "pc102/defkeymap";
+	
+	session.media = false;
+	session.agentServer = ui_mw.rdp_server->text();
+	session.agentUser = ui_mw.rdp_username->text();
+	session.agentPass = ui_mw.rdp_password->text();
+
+	session.screenInfo = QString::number(dw.screenGeometry(this).width()) + "x" + QString::number(dw.screenGeometry(this).height()) + "x" + QString::number(info.depth()) + "render";
+	session.suspended = false;
+
+	m_lib.invokeNXSSH("default" , ui_mw.server->text().toAscii().data(), true);
+	m_lib.setUsername(ui_mw.username->text().toAscii().data());
+	m_lib.setPassword(ui_mw.password->text().toAscii().data());
+	m_lib.setResolution(dw.screenGeometry(this).width(), dw.screenGeometry(this).height());
+	m_lib.setDepth(info.depth());
+	m_lib.setRender(true);
+	m_lib.setSession(session);
+}

Added: nxclientlib/qt-test/qtnxwindow.h
===================================================================
--- nxclientlib/qt-test/qtnxwindow.h	2006-08-03 19:26:43 UTC (rev 246)
+++ nxclientlib/qt-test/qtnxwindow.h	2006-08-03 21:40:38 UTC (rev 247)
@@ -0,0 +1,43 @@
+/***************************************************************************
+                               qtnxwindow.h
+                             -------------------
+    begin                : Thursday August 3rd 2006
+    copyright            : (C) 2006 by George Wright
+    email                : gwright at kde.org
+ ***************************************************************************/
+
+/***************************************************************************
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ *                                                                         *
+ ***************************************************************************/
+
+#ifndef _QTNXWINDOW_H_
+#define _QTNXWINDOW_H_
+
+#include <QMainWindow>
+
+#include "ui_mainwindow.h"
+
+#include "nxclientlib.h"
+#include "qtnxcallback.h"
+
+class QtNXWindow : public QMainWindow
+{
+	Q_OBJECT
+	public:
+		QtNXWindow();
+		~QtNXWindow();
+	public slots:
+		void connectPressed();
+	private:
+		Ui::MainWindow ui_mw;
+		NXClientLib m_lib;
+		NXSessionData session;
+		QtNXCallback *m_cb;
+};
+
+#endif



From gwright at mail.berlios.de  Thu Aug  3 23:49:50 2006
From: gwright at mail.berlios.de (gwright at BerliOS)
Date: Thu, 3 Aug 2006 23:49:50 +0200
Subject: [Freenx-cvs] r248 - nxclientlib
Message-ID: <200608032149.k73LnoXm023245@sheep.berlios.de>

Author: gwright
Date: 2006-08-03 23:49:50 +0200 (Thu, 03 Aug 2006)
New Revision: 248

Added:
   nxclientlib/README
Modified:
   nxclientlib/nxclientlib.pro
Log:
Some documentation


Added: nxclientlib/README
===================================================================
--- nxclientlib/README	2006-08-03 21:40:38 UTC (rev 247)
+++ nxclientlib/README	2006-08-03 21:49:50 UTC (rev 248)
@@ -0,0 +1,26 @@
+===========================README====================================
+
+How to test out the client library.
+
+First, you will need Qt 4 (I am developing against 4.1.4).
+
+Compile Qt as usual, then set QTDIR to point to the directory that
+Qt has been installed to (default is /usr/local/Trolltech/Qt-x.y.z).
+
+Set PATH to include the path which contains nxssh and nxproxy
+(this is /usr/NX/bin on most systems), and $QTDIR/bin. Set
+LD_LIBRARY_PATH to include /usr/NX/lib, . and ..
+
+Run qmake inside the nxclientlib directory, then run make. After that
+has finished, run qmake inside qt-test and run make again. This will
+build nxclientlib and the qt-test frontend.
+
+You can then just run qtnx inside the qt-test directory and it should
+work. Just type in all the session parameters in the various boxes
+and then hit "Connect". There is logging output to stderr/stdout
+which shows all the nxssh data.
+
+At the moment you can only use the default NoMachine public key
+for authentication.
+
+August 3rd 2006 - George Wright - gwright at kde.org
\ No newline at end of file

Modified: nxclientlib/nxclientlib.pro
===================================================================
--- nxclientlib/nxclientlib.pro	2006-08-03 21:40:38 UTC (rev 247)
+++ nxclientlib/nxclientlib.pro	2006-08-03 21:49:50 UTC (rev 248)
@@ -12,4 +12,4 @@
 
 QT		= core
 
-TARGET		= nxclientlib
+TARGET		= nxclientlib
\ No newline at end of file



From gwright at mail.berlios.de  Thu Aug  3 23:52:39 2006
From: gwright at mail.berlios.de (gwright at BerliOS)
Date: Thu, 3 Aug 2006 23:52:39 +0200
Subject: [Freenx-cvs] r249 - nxclientlib/qt-test
Message-ID: <200608032152.k73LqdZH023879@sheep.berlios.de>

Author: gwright
Date: 2006-08-03 23:52:39 +0200 (Thu, 03 Aug 2006)
New Revision: 249

Modified:
   nxclientlib/qt-test/qtnxwindow.cpp
Log:
Forgot to check for encryption


Modified: nxclientlib/qt-test/qtnxwindow.cpp
===================================================================
--- nxclientlib/qt-test/qtnxwindow.cpp	2006-08-03 21:49:50 UTC (rev 248)
+++ nxclientlib/qt-test/qtnxwindow.cpp	2006-08-03 21:52:39 UTC (rev 249)
@@ -81,7 +81,11 @@
 	session.screenInfo = QString::number(dw.screenGeometry(this).width()) + "x" + QString::number(dw.screenGeometry(this).height()) + "x" + QString::number(info.depth()) + "render";
 	session.suspended = false;
 
-	m_lib.invokeNXSSH("default" , ui_mw.server->text().toAscii().data(), true);
+	if (ui_mw.encryption->checkState() == 0)
+		m_lib.invokeNXSSH("default" , ui_mw.server->text().toAscii().data(), false);
+	if (ui_mw.encryption->checkState() == 2)
+		m_lib.invokeNXSSH("default" , ui_mw.server->text().toAscii().data(), true);
+		
 	m_lib.setUsername(ui_mw.username->text().toAscii().data());
 	m_lib.setPassword(ui_mw.password->text().toAscii().data());
 	m_lib.setResolution(dw.screenGeometry(this).width(), dw.screenGeometry(this).height());



From gwright at mail.berlios.de  Fri Aug  4 01:58:22 2006
From: gwright at mail.berlios.de (gwright at BerliOS)
Date: Fri, 4 Aug 2006 01:58:22 +0200
Subject: [Freenx-cvs] r250 - nxclientlib
Message-ID: <200608032358.k73NwMbv021274@sheep.berlios.de>

Author: gwright
Date: 2006-08-04 01:58:17 +0200 (Fri, 04 Aug 2006)
New Revision: 250

Modified:
   nxclientlib/nxclientlib.cpp
   nxclientlib/nxclientlib.h
Log:
Suppress password output on stdout.


Modified: nxclientlib/nxclientlib.cpp
===================================================================
--- nxclientlib/nxclientlib.cpp	2006-08-03 21:52:39 UTC (rev 249)
+++ nxclientlib/nxclientlib.cpp	2006-08-03 23:58:17 UTC (rev 250)
@@ -145,6 +145,8 @@
 	QStringList::const_iterator i;
 
 	for (i = messages.constBegin(); i != messages.constEnd(); ++i) {
+		if ((*i).contains("Password"))
+			password = true;
 		if (!isFinished)
 			write(session.parseSSH(*i));
 		else
@@ -186,11 +188,17 @@
 
 void NXClientLib::write(QString data)
 {
+	nxsshProcess.write(data.toAscii());
+	
+	if (password) {
+		data = "********";
+		password = false;
+	}
+
 	callbackStdin = data.toStdString();
 	callback->stdin(&callbackStdin);
-	
+
 	cout << data.toStdString();
-	nxsshProcess.write(data.toAscii());
 }
 
 void NXClientLib::writeCallback(QString message)

Modified: nxclientlib/nxclientlib.h
===================================================================
--- nxclientlib/nxclientlib.h	2006-08-03 21:52:39 UTC (rev 249)
+++ nxclientlib/nxclientlib.h	2006-08-03 23:58:17 UTC (rev 250)
@@ -83,6 +83,7 @@
 	private:
 		bool usingHardcodedKey;
 		bool isFinished;
+		bool password;
 		
 		QProcess nxsshProcess;
 		QProcess nxproxyProcess;



From gwright at mail.berlios.de  Fri Aug  4 04:17:15 2006
From: gwright at mail.berlios.de (gwright at BerliOS)
Date: Fri, 4 Aug 2006 04:17:15 +0200
Subject: [Freenx-cvs] r251 - nxclientlib
Message-ID: <200608040217.k742HFnE020866@sheep.berlios.de>

Author: gwright
Date: 2006-08-04 04:17:12 +0200 (Fri, 04 Aug 2006)
New Revision: 251

Modified:
   nxclientlib/nxsession.cpp
   nxclientlib/nxsession.h
Log:
Make external stuff Qt-independent


Modified: nxclientlib/nxsession.cpp
===================================================================
--- nxclientlib/nxsession.cpp	2006-08-03 23:58:17 UTC (rev 250)
+++ nxclientlib/nxsession.cpp	2006-08-04 02:17:12 UTC (rev 251)
@@ -132,7 +132,7 @@
 					
 				if (sessionData.suspended) {
 					// These are the session parameters that NoMachine's client sends for resume
-					returnMessage = "restoresession --id=\"" + sessionData.id +
+					returnMessage = "restoresession --id=\"" + QString(sessionData.id) +
 					"\" --session=\"" + sessionData.sessionName +
 					"\" --type=\"" + sessionData.sessionType +
 					"\" --cache=\"" + QString::number(sessionData.cache) +
@@ -149,7 +149,7 @@
 					"\" --agent_password=\"" + sessionData.agentPass + "\"";
 					stage++;
 				} else {
-					returnMessage = "startsession --session=\"" + sessionData.sessionName +
+					returnMessage = "startsession --session=\"" + QString(sessionData.sessionName) +
 					"\" --type=\"" + sessionData.sessionType +
 					"\" --cache=\"" + QString::number(sessionData.cache) +
 					"M\" --images=\"" + QString::number(sessionData.images) +
@@ -160,7 +160,7 @@
 					"\" --backingstore=\"" + sessionData.backingstore +
 					"\" --imagecompressionmethod=\"" + QString::number(sessionData.imageCompressionMethod) +
 					"\" --geometry=\"" + sessionData.geometry +
-					"\" --screeninfo=\"" + sessionData.screenInfo + 
+					"\" --screeninfo=\"" + xRes + "x" + yRes + "x" + depth + "+" + renderSet +
 					"\" --keyboard=\"" + sessionData.keyboard +
 					"\" --kbtype=\"" + sessionData.kbtype +
 					"\" --media=\"" + QString::number(media) +
@@ -229,13 +229,13 @@
 
 	for (i = 0; i < rawsessions.size(); ++i) {
 		resData.display = rawsessions.at(i).at(0).toInt();
-		resData.sessionType = rawsessions.at(i).at(1);
-		resData.sessionID = rawsessions.at(i).at(2);
-		resData.options = rawsessions.at(i).at(3);
+		resData.sessionType = rawsessions.at(i).at(1).toAscii().data();
+		resData.sessionID = rawsessions.at(i).at(2).toAscii().data();
+		resData.options = rawsessions.at(i).at(3).toAscii().data();
 		resData.depth = rawsessions.at(i).at(4).toInt();
-		resData.screen = rawsessions.at(i).at(5);
-		resData.available = rawsessions.at(i).at(6);
-		resData.sessionName = rawsessions.at(i).at(7);
+		resData.screen = rawsessions.at(i).at(5).toAscii().data();
+		resData.available = rawsessions.at(i).at(6).toAscii().data();
+		resData.sessionName = rawsessions.at(i).at(7).toAscii().data();
 		runningSessions.push_back(resData);
 	}
 

Modified: nxclientlib/nxsession.h
===================================================================
--- nxclientlib/nxsession.h	2006-08-03 23:58:17 UTC (rev 250)
+++ nxclientlib/nxsession.h	2006-08-04 02:17:12 UTC (rev 251)
@@ -28,37 +28,37 @@
 #include <unistd.h>
 
 struct NXSessionData {
-	QString sessionName;
-	QString sessionType;
+	const char *sessionName;
+	const char *sessionType;
 	int cache;
 	int images;
-	QString linkType;
+	const char *linkType;
 	bool render;
-	QString backingstore;
+	const char *backingstore;
 	int imageCompressionMethod;
 	int imageCompressionLevel;
-	QString geometry;
-	QString keyboard;
-	QString kbtype;
+	const char *geometry;
+	const char *keyboard;
+	const char *kbtype;
 	bool media;
-	QString agentServer;
-	QString agentUser;
-	QString agentPass;
-	QString screenInfo;
+	const char *agentServer;
+	const char *agentUser;
+	const char *agentPass;
+	const char *screenInfo;
 	int cups;
-	QString id;
+	const char *id;
 	bool suspended;
 };
 
 struct NXResumeData {
 	int display;
-	QString sessionType;
-	QString sessionID;
-	QString options;
+	const char *sessionType;
+	const char *sessionID;
+	const char *options;
 	int depth;
-	QString screen;
-	QString available;
-	QString sessionName;
+	const char *screen;
+	const char *available;
+	const char *sessionName;
 };
 
 // This class is used to parse the output from the nxssh session to the server



From gwright at mail.berlios.de  Fri Aug  4 15:50:52 2006
From: gwright at mail.berlios.de (gwright at BerliOS)
Date: Fri, 4 Aug 2006 15:50:52 +0200
Subject: [Freenx-cvs] r252 - in nxclientlib: . qt-test test
Message-ID: <200608041350.k74Doq68004482@sheep.berlios.de>

Author: gwright
Date: 2006-08-04 15:50:49 +0200 (Fri, 04 Aug 2006)
New Revision: 252

Modified:
   nxclientlib/nxclientlib.cpp
   nxclientlib/nxclientlib.h
   nxclientlib/nxsession.cpp
   nxclientlib/nxsession.h
   nxclientlib/qt-test/qtnxwindow.cpp
   nxclientlib/qt-test/qtnxwindow.h
   nxclientlib/test/main.cpp
Log:
I broke something.


Modified: nxclientlib/nxclientlib.cpp
===================================================================
--- nxclientlib/nxclientlib.cpp	2006-08-04 02:17:12 UTC (rev 251)
+++ nxclientlib/nxclientlib.cpp	2006-08-04 13:50:49 UTC (rev 252)
@@ -219,7 +219,7 @@
 	session.setContinue(auth);
 }
 
-void NXClientLib::setSession(NXSessionData nxSession)
+void NXClientLib::setSession(NXSessionData *nxSession)
 {
 	session.setSession(nxSession);
 }

Modified: nxclientlib/nxclientlib.h
===================================================================
--- nxclientlib/nxclientlib.h	2006-08-04 02:17:12 UTC (rev 251)
+++ nxclientlib/nxclientlib.h	2006-08-04 13:50:49 UTC (rev 252)
@@ -64,7 +64,7 @@
 		void setRender(bool render) { session.setRender(render); };
 		void allowSSHConnect(bool auth);
 
-		void setSession(NXSessionData);
+		void setSession(NXSessionData *);
 
 		void invokeProxy();
 

Modified: nxclientlib/nxsession.cpp
===================================================================
--- nxclientlib/nxsession.cpp	2006-08-04 02:17:12 UTC (rev 251)
+++ nxclientlib/nxsession.cpp	2006-08-04 13:50:49 UTC (rev 252)
@@ -110,7 +110,7 @@
 		case LIST_SESSIONS:
 			if (response == 105) {
 				// Get a list of the available sessions on the server
-				returnMessage = "listsession --user=\"" + nxUsername + "\" --status=\"suspended,running\" --geometry=\"" + xRes + "x" + yRes + "+" + renderSet + "\" --type=\"" + type + "\"";
+				returnMessage = "listsession --user=\"" + nxUsername + "\" --status=\"suspended,running\" --geometry=\"" + xRes + "x" + yRes + renderSet + "\" --type=\"" + type + "\"";
 				stage++;
 			}
 			break;
@@ -125,48 +125,48 @@
 				int media = 0;
 				int render = 0;
 
-				if (sessionData.media)
+				if (sessionData->media)
 					media = 1;
-				if (sessionData.render)
+				if (sessionData->render)
 					render = 1;
-					
-				if (sessionData.suspended) {
+
+				if (sessionData->suspended) {
 					// These are the session parameters that NoMachine's client sends for resume
-					returnMessage = "restoresession --id=\"" + QString(sessionData.id) +
-					"\" --session=\"" + sessionData.sessionName +
-					"\" --type=\"" + sessionData.sessionType +
-					"\" --cache=\"" + QString::number(sessionData.cache) +
-					"M\" --images=\"" + QString::number(sessionData.images) +
+					returnMessage = "restoresession --id=\"" + QString::fromStdString(sessionData->id) +
+					"\" --session=\"" + QString::fromStdString(sessionData->sessionName) +
+					"\" --type=\"" + QString::fromStdString(sessionData->sessionType) +
+					"\" --cache=\"" + QString::number(sessionData->cache) +
+					"M\" --images=\"" + QString::number(sessionData->images) +
 					"M\" --cookie=\"" + generateCookie() +
-					"\" --link=\"" + sessionData.linkType +
-					"\" --kbtype=\"" + sessionData.kbtype +
+					"\" --link=\"" + QString::fromStdString(sessionData->linkType) +
+					"\" --kbtype=\"" + QString::fromStdString(sessionData->kbtype) +
 					"\" --nodelay=\"1\" --encryption=\"" + QString::number(encryption) +
-					"\" --backingstore=\"" + sessionData.backingstore +
-					"\" --geometry=\"" + sessionData.geometry +
-					"\" --media=\"" + sessionData.media +
-					"\" --agent_server=\"" + sessionData.agentServer +
-					"\" --agent_user=\"" + sessionData.agentUser +
-					"\" --agent_password=\"" + sessionData.agentPass + "\"";
+					"\" --backingstore=\"" + QString::fromStdString(sessionData->backingstore) +
+					"\" --geometry=\"" + QString::fromStdString(sessionData->geometry) +
+					"\" --media=\"" + QString::number(media) +
+					"\" --agent_server=\"" + QString::fromStdString(sessionData->agentServer) +
+					"\" --agent_user=\"" + QString::fromStdString(sessionData->agentUser) +
+					"\" --agent_password=\"" + QString::fromStdString(sessionData->agentPass) + "\"";
 					stage++;
 				} else {
-					returnMessage = "startsession --session=\"" + QString(sessionData.sessionName) +
-					"\" --type=\"" + sessionData.sessionType +
-					"\" --cache=\"" + QString::number(sessionData.cache) +
-					"M\" --images=\"" + QString::number(sessionData.images) +
+					returnMessage = "startsession --session=\"" + QString::fromStdString(sessionData->sessionName) +
+					"\" --type=\"" + QString::fromStdString(sessionData->sessionType) +
+					"\" --cache=\"" + QString::number(sessionData->cache) +
+					"M\" --images=\"" + QString::number(sessionData->images) +
 					"M\" --cookie=\"" + generateCookie() +
-					"\" --link=\"" + sessionData.linkType +
+					"\" --link=\"" + QString::fromStdString(sessionData->linkType) +
 					"\" --render=\"" + QString::number(render) +
 					"\" --encryption=\"" + QString::number(encryption) +
-					"\" --backingstore=\"" + sessionData.backingstore +
-					"\" --imagecompressionmethod=\"" + QString::number(sessionData.imageCompressionMethod) +
-					"\" --geometry=\"" + sessionData.geometry +
-					"\" --screeninfo=\"" + xRes + "x" + yRes + "x" + depth + "+" + renderSet +
-					"\" --keyboard=\"" + sessionData.keyboard +
-					"\" --kbtype=\"" + sessionData.kbtype +
+					"\" --backingstore=\"" + QString::fromStdString(sessionData->backingstore) +
+					"\" --imagecompressionmethod=\"" + QString::number(sessionData->imageCompressionMethod) +
+					"\" --geometry=\"" + QString::fromStdString(sessionData->geometry) +
+					"\" --screeninfo=\"" + xRes + "x" + yRes + "x" + depth + renderSet +
+					"\" --keyboard=\"" + QString::fromStdString(sessionData->keyboard) +
+					"\" --kbtype=\"" + QString::fromStdString(sessionData->kbtype) +
 					"\" --media=\"" + QString::number(media) +
-					"\" --agent_server=\"" + sessionData.agentServer +
-					"\" --agent_user=\"" + sessionData.agentUser +
-					"\" --agent_password=\"" + sessionData.agentPass + "\"";
+					"\" --agent_server=\"" + QString::fromStdString(sessionData->agentServer) +
+					"\" --agent_user=\"" + QString::fromStdString(sessionData->agentUser) +
+					"\" --agent_password=\"" + QString::fromStdString(sessionData->agentPass) + "\"";
 					stage++;
 				}
 			}
@@ -182,7 +182,7 @@
 		return 0;
 }
 
-void NXSession::setSession(NXSessionData session)
+void NXSession::setSession(NXSessionData *session)
 {
 	sessionData = session;
 	sessionSet = true;

Modified: nxclientlib/nxsession.h
===================================================================
--- nxclientlib/nxsession.h	2006-08-04 02:17:12 UTC (rev 251)
+++ nxclientlib/nxsession.h	2006-08-04 13:50:49 UTC (rev 252)
@@ -28,37 +28,37 @@
 #include <unistd.h>
 
 struct NXSessionData {
-	const char *sessionName;
-	const char *sessionType;
+	std::string sessionName;
+	std::string sessionType;
 	int cache;
 	int images;
-	const char *linkType;
+	std::string linkType;
 	bool render;
-	const char *backingstore;
+	std::string backingstore;
 	int imageCompressionMethod;
 	int imageCompressionLevel;
-	const char *geometry;
-	const char *keyboard;
-	const char *kbtype;
+	std::string geometry;
+	std::string keyboard;
+	std::string kbtype;
 	bool media;
-	const char *agentServer;
-	const char *agentUser;
-	const char *agentPass;
-	const char *screenInfo;
+	std::string agentServer;
+	std::string agentUser;
+	std::string agentPass;
 	int cups;
-	const char *id;
+	std::string id;
+	std::string screenInfo;
 	bool suspended;
 };
 
 struct NXResumeData {
 	int display;
-	const char *sessionType;
-	const char *sessionID;
-	const char *options;
+	std::string sessionType;
+	std::string sessionID;
+	std::string options;
 	int depth;
-	const char *screen;
-	const char *available;
-	const char *sessionName;
+	std::string screen;
+	std::string available;
+	std::string sessionName;
 };
 
 // This class is used to parse the output from the nxssh session to the server
@@ -78,14 +78,13 @@
 
 		void setResolution(int x, int y) { xRes.setNum(x); yRes.setNum(y); };
 		void setDepth(int d) { depth.setNum(d); };
-		void setRender(bool isRender) { if (isRender) renderSet = "render"; };
+		void setRender(bool isRender) { if (isRender) renderSet = "+render"; };
 		void setContinue(bool allow) { doSSH = allow; };
-		void setSession(NXSessionData);
+		void setSession(NXSessionData *);
 		void setEncryption(bool enc) { encryption = enc; };
 		
 		QString generateCookie();
 		
-		NXSessionData sessionData;
 
 	signals:
 		// Emitted when the initial public key authentication is successful
@@ -118,6 +117,8 @@
 		QStringList resumeSessions;
 
 		std::vector<NXResumeData> runningSessions;
+		NXSessionData *sessionData;
+
 };
 
 #endif

Modified: nxclientlib/qt-test/qtnxwindow.cpp
===================================================================
--- nxclientlib/qt-test/qtnxwindow.cpp	2006-08-04 02:17:12 UTC (rev 251)
+++ nxclientlib/qt-test/qtnxwindow.cpp	2006-08-04 13:50:49 UTC (rev 252)
@@ -22,6 +22,7 @@
 
 QtNXWindow::QtNXWindow() : QMainWindow()
 {
+	session = new NXSessionData;
 	ui_mw.setupUi(this);
 	m_cb = new QtNXCallback();
 
@@ -39,47 +40,47 @@
 	QDesktopWidget dw;
 	QX11Info info;
 	
-	session.sessionName = ui_mw.session_name->text();
-	session.sessionType = ui_mw.session_type->currentText();
-	session.cache = ui_mw.cache->currentText().toInt();
-	session.images = ui_mw.images->currentText().toInt();
-	session.linkType = ui_mw.link_type->currentText();
+	session->sessionName = ui_mw.session_name->text().toStdString();
+	session->sessionType = ui_mw.session_type->currentText().toStdString();
+	session->cache = ui_mw.cache->currentText().toInt();
+	session->images = ui_mw.images->currentText().toInt();
+	session->linkType = ui_mw.link_type->currentText().toStdString();
 	
 	if (ui_mw.render->checkState() == 0)
-		session.render = false;
+		session->render = false;
 	if (ui_mw.render->checkState() == 2)
-		session.render = true;
+		session->render = true;
 	
-	session.backingstore = "when_requested";
+	session->backingstore = "when_requested";
 
 	if (ui_mw.image_compression->currentText() == "JPEG")
-		session.imageCompressionMethod = -1;
+		session->imageCompressionMethod = -1;
 	if (ui_mw.image_compression->currentText() == "RAW")
-		session.imageCompressionMethod = 0;
+		session->imageCompressionMethod = 0;
 	if (ui_mw.image_compression->currentText() == "PNG")
-		session.imageCompressionMethod = 2;
+		session->imageCompressionMethod = 2;
 		
-	session.imageCompressionLevel = ui_mw.jpeg_quality->value();
+	session->imageCompressionLevel = ui_mw.jpeg_quality->value();
 
 	if (ui_mw.resolution->currentText() == "640x480")
-		session.geometry = "640x480+0+0";
+		session->geometry = "640x480+0+0";
 	if (ui_mw.resolution->currentText() == "800x600")
-		session.geometry = "800x600+0+0";
+		session->geometry = "800x600+0+0";
 	if (ui_mw.resolution->currentText() == "1024x768")
-		session.geometry = "1024x768+0+0";
+		session->geometry = "1024x768+0+0";
 	if (ui_mw.resolution->currentText() == "1600x1200")
-		session.geometry = "1600x1200+0+0";
+		session->geometry = "1600x1200+0+0";
 
-	session.keyboard = "defkeymap";
-	session.kbtype = "pc102/defkeymap";
+	session->keyboard = "defkeymap";
+	session->kbtype = "pc102/defkeymap";
 	
-	session.media = false;
-	session.agentServer = ui_mw.rdp_server->text();
-	session.agentUser = ui_mw.rdp_username->text();
-	session.agentPass = ui_mw.rdp_password->text();
+	session->media = false;
+	session->agentServer = ui_mw.rdp_server->text().toStdString();
+	session->agentUser = ui_mw.rdp_username->text().toStdString();
+	session->agentPass = ui_mw.rdp_password->text().toStdString();
 
-	session.screenInfo = QString::number(dw.screenGeometry(this).width()) + "x" + QString::number(dw.screenGeometry(this).height()) + "x" + QString::number(info.depth()) + "render";
-	session.suspended = false;
+	// session->screenInfo = QString::number(dw.screenGeometry(this).width()) + "x" + QString::number(dw.screenGeometry(this).height()) + "x" + QString::number(info.depth()) + "render";
+	session->suspended = false;
 
 	if (ui_mw.encryption->checkState() == 0)
 		m_lib.invokeNXSSH("default" , ui_mw.server->text().toAscii().data(), false);

Modified: nxclientlib/qt-test/qtnxwindow.h
===================================================================
--- nxclientlib/qt-test/qtnxwindow.h	2006-08-04 02:17:12 UTC (rev 251)
+++ nxclientlib/qt-test/qtnxwindow.h	2006-08-04 13:50:49 UTC (rev 252)
@@ -36,7 +36,7 @@
 	private:
 		Ui::MainWindow ui_mw;
 		NXClientLib m_lib;
-		NXSessionData session;
+		NXSessionData *session;
 		QtNXCallback *m_cb;
 };
 

Modified: nxclientlib/test/main.cpp
===================================================================
--- nxclientlib/test/main.cpp	2006-08-04 02:17:12 UTC (rev 251)
+++ nxclientlib/test/main.cpp	2006-08-04 13:50:49 UTC (rev 252)
@@ -57,7 +57,6 @@
 	session.agentServer = "";
 	session.agentUser = "";
 	session.agentPass = "";
-	session.screenInfo = "800x600x24+render";
 	session.cups = 0;
 	session.suspended = false;
 



From gwright at mail.berlios.de  Fri Aug  4 18:06:18 2006
From: gwright at mail.berlios.de (gwright at BerliOS)
Date: Fri, 4 Aug 2006 18:06:18 +0200
Subject: [Freenx-cvs] r253 - in nxclientlib: . qt-test test
Message-ID: <200608041606.k74G6Ij8030005@sheep.berlios.de>

Author: gwright
Date: 2006-08-04 18:06:17 +0200 (Fri, 04 Aug 2006)
New Revision: 253

Removed:
   nxclientlib/nxcallback.h
   nxclientlib/qt-test/qtnxcallback.cpp
   nxclientlib/qt-test/qtnxcallback.h
Modified:
   nxclientlib/nxclientlib.cpp
   nxclientlib/nxclientlib.h
   nxclientlib/nxclientlib.pro
   nxclientlib/nxsession.cpp
   nxclientlib/nxsession.h
   nxclientlib/qt-test/qt-test.pro
   nxclientlib/qt-test/qtnxwindow.cpp
   nxclientlib/qt-test/qtnxwindow.h
   nxclientlib/test/main.cpp
Log:
It was pointed out that trying to hide Qt in the public functions was a waste of time


Deleted: nxclientlib/nxcallback.h
===================================================================
--- nxclientlib/nxcallback.h	2006-08-04 13:50:49 UTC (rev 252)
+++ nxclientlib/nxcallback.h	2006-08-04 16:06:17 UTC (rev 253)
@@ -1,46 +0,0 @@
-/***************************************************************************
-                                nxcallback.h
-                             -------------------
-    begin                : Sat 22nd July 2006
-    copyright            : (C) 2006 by George Wright
-    email                : gwright at kde.org
- ***************************************************************************/
-
-/***************************************************************************
- *                                                                         *
- *   This program is free software; you can redistribute it and/or modify  *
- *   it under the terms of the GNU General Public License as published by  *
- *   the Free Software Foundation; either version 2 of the License, or     *
- *   (at your option) any later version.                                   *
- *                                                                         *
- ***************************************************************************/
- 
-#ifndef _NXCALLBACK_H_
-#define _NXCALLBACK_H_
-
-#include <iostream>
-#include <vector>
-
-#include "nxsession.h"
-
-// Callback interface for parent app to get status updates from NXClientLib.
-class NXCallback
-{
-	public:
-		virtual void write(std::string *msg) = 0;
-		// Called by nxssh if we get a request for ssh authenticity
-		// msg is the message passed by nxssh
-		virtual void sshRequestAuthenticity(std::string *msg) = 0;
-		// Called if the NX server replies that authentication has failed
-		virtual void authenticationFailed() = 0;
-
-		// Stdout/stderr from the nxssh process
-		virtual void stdout(std::string *msg) = 0;
-		virtual void stderr(std::string *msg) = 0;
-		// Stdin sent to the nxssh process
-		virtual void stdin(std::string *msg) = 0;
-
-		virtual void resumeSessions(std::vector<NXResumeData> *sessions) = 0;
-};
-
-#endif

Modified: nxclientlib/nxclientlib.cpp
===================================================================
--- nxclientlib/nxclientlib.cpp	2006-08-04 13:50:49 UTC (rev 252)
+++ nxclientlib/nxclientlib.cpp	2006-08-04 16:06:17 UTC (rev 253)
@@ -29,27 +29,25 @@
 {
 	isFinished = false;
 	proxyData.encrypted = false;
+	password = false;
+	
 	connect(&session, SIGNAL(authenticated()), this, SLOT(doneAuth()));
 	connect(&session, SIGNAL(loginFailed()), this, SLOT(failedLogin()));
 	connect(&session, SIGNAL(finished()), this, SLOT(finished()));
+	connect(&session, SIGNAL(sessionsSignal(QList<NXResumeData>)), this, SLOT(suspendedSessions(QList<NXResumeData>)));
+	connect(&nxproxyProcess, SIGNAL(finished(int, QProcess::ExitStatus)), this, SLOT(reset()));
 }
 
 NXClientLib::~NXClientLib()
 {
 }
 
-void NXClientLib::invokeNXSSH(const char *publicKeyS, const char *serverHostS, bool encryption, const char *key)
+void NXClientLib::invokeNXSSH(QString publicKey, QString serverHost, bool encryption, QByteArray key)
 {
-	QString publicKey;
-	QString serverHost;
 
-	publicKey = publicKeyS;
-	serverHost = serverHostS;
 	
 	QStringList arguments;
 	proxyData.server = serverHost;
-	QByteArray keyba;
-	keyba = key;
 	
 	if (publicKey == "default") {
 		usingHardcodedKey = true;
@@ -65,7 +63,7 @@
 		if (publicKey == "default")
 			keyFile->write(cert);
 		else
-			keyFile->write(keyba);
+			keyFile->write(key);
 			
 		keyFile->close();
 	} else {
@@ -91,7 +89,7 @@
 
 void NXClientLib::processStarted()
 {
-	writeCallback(tr("Started nxssh process"));
+	emit callbackWrite(tr("Started nxssh process"));
 }
 
 void NXClientLib::processError(QProcess::ProcessError error)
@@ -118,12 +116,23 @@
 			break;
 	}
 	
-	writeCallback(message);
+	emit callbackWrite(message);
 }
 
+void NXClientLib::reset()
+{
+	nxsshProcess.terminate();
+	
+	isFinished = false;
+	proxyData.encrypted = false;
+	password = false;
+	
+	session.resetSession();
+}
+
 void NXClientLib::failedLogin()
 {
-	writeCallback(tr("Username or password incorrect"));
+	emit callbackWrite(tr("Username or password incorrect"));
 	nxsshProcess.terminate();
 }
 
@@ -133,13 +142,12 @@
 	
 	// Message 211 is sent if ssh is asking to continue with an unknown host
 	if (session.parseResponse(message) == 211) {
-		callbackMessage = message.toStdString();
-		callback->sshRequestAuthenticity(&callbackMessage);
+		emit sshRequestConfirmation(message);
 	}
+	
 	cout << message.toStdString();
 
-	callbackStdout = message.toStdString();
-	callback->stdout(&callbackStdout);
+	emit stdout(message);
 	
 	QStringList messages = splitString(message);
 	QStringList::const_iterator i;
@@ -182,8 +190,7 @@
 		write(returnMessage);
 	}
 
-	callbackStderr = message.toStdString();
-	callback->stderr(&callbackStderr);
+	emit stderr(message);
 }
 
 void NXClientLib::write(QString data)
@@ -195,19 +202,11 @@
 		password = false;
 	}
 
-	callbackStdin = data.toStdString();
-	callback->stdin(&callbackStdin);
+	emit stdin(data);
 
 	cout << data.toStdString();
 }
 
-void NXClientLib::writeCallback(QString message)
-{
-	// Done to set a string to give a permanent pointer
-	callbackMessage = message.toStdString();
-	callback->write(&callbackMessage);
-}
-
 void NXClientLib::doneAuth()
 {
 	if (usingHardcodedKey)
@@ -271,5 +270,5 @@
 	nxproxyProcess.setEnvironment(nxproxyProcess.systemEnvironment());
 
 	arguments << "-S" << "options=" + options.fileName() + ":" + QString::number(proxyData.display);
-	nxproxyProcess.startDetached(NXPROXY_BIN, arguments);
+	nxproxyProcess.start(NXPROXY_BIN, arguments);
 }

Modified: nxclientlib/nxclientlib.h
===================================================================
--- nxclientlib/nxclientlib.h	2006-08-04 13:50:49 UTC (rev 252)
+++ nxclientlib/nxclientlib.h	2006-08-04 16:06:17 UTC (rev 253)
@@ -24,7 +24,6 @@
 #include <iostream>
 
 #include "nxsession.h"
-#include "nxcallback.h"
 
 using namespace std;
 
@@ -48,17 +47,15 @@
 		// publicKey is the path to the ssh public key file to authenticate with. Pass "default" to use the default NoMachine key
 		// serverHost is the hostname of the NX server to connect to
 		// encryption is whether to use an encrypted NX session
-		void invokeNXSSH(const char *publicKey = "default", const char *serverHost = "", bool encryption = true, const char *key = 0);
+		void invokeNXSSH(QString publicKey = "default", QString serverHost = "", bool encryption = true, QByteArray key = 0);
 
 		// Overloaded to give callback data on write
 		void write(QString);
 
 		// Set the username and password for NX to log in with
-		void setUsername(const char *user) { session.setUsername(user); };
-		void setPassword(const char *pass) { session.setPassword(pass); };
+		void setUsername(QString user) { session.setUsername(user); };
+		void setPassword(QString pass) { session.setPassword(pass); };
 
-		void setCallback(NXCallback *cb) { callback = cb; };
-
 		void setResolution(int x, int y) { session.setResolution(x, y); };
 		void setDepth(int depth) { session.setDepth(depth); };
 		void setRender(bool render) { session.setRender(render); };
@@ -67,7 +64,6 @@
 		void setSession(NXSessionData *);
 
 		void invokeProxy();
-
 		QString parseSSH(QString);
 	public slots:
 		void processStarted();
@@ -80,6 +76,23 @@
 		void failedLogin();
 
 		void finished() { isFinished = true; };
+		void suspendedSessions(QList<NXResumeData> resumeData) { emit resumeSessions(resumeData); };
+		void reset();
+	signals:
+		// General messages about status
+		void callbackWrite(QString);
+
+		// Emitted when NX failed to authenticate the user
+		void authenticationFailed();
+		// SSH requests confirmation to go ahead with connecting
+		void sshRequestConfirmation(QString);
+
+		// Various outputs/inputs from nxssh
+		void stdout(QString);
+		void stderr(QString);
+		void stdin(QString);
+
+		void resumeSessions(QList<NXResumeData>);
 	private:
 		bool usingHardcodedKey;
 		bool isFinished;
@@ -91,10 +104,8 @@
 		QTemporaryFile *keyFile;
 		
 		NXSession session;
-		NXCallback *callback;
 		
 		QStringList splitString(QString);
-		void writeCallback(QString);
 
 		string callbackMessage;
 		string callbackStdin;

Modified: nxclientlib/nxclientlib.pro
===================================================================
--- nxclientlib/nxclientlib.pro	2006-08-04 13:50:49 UTC (rev 252)
+++ nxclientlib/nxclientlib.pro	2006-08-04 16:06:17 UTC (rev 253)
@@ -2,7 +2,7 @@
 
 CONFIG		= qt warn_on debug dll
 
-HEADERS		= nxclientlib.h nxsession.h nxcallback.h
+HEADERS		= nxclientlib.h nxsession.h
 
 SOURCES		= nxclientlib.cpp nxsession.cpp
 

Modified: nxclientlib/nxsession.cpp
===================================================================
--- nxclientlib/nxsession.cpp	2006-08-04 13:50:49 UTC (rev 252)
+++ nxclientlib/nxsession.cpp	2006-08-04 16:06:17 UTC (rev 253)
@@ -30,11 +30,8 @@
 
 #define CLIENT_VERSION "1.5.0"
 
-
 #include <iostream>
 
-#include <QVector>
-
 using namespace std;
 
 #include "nxsession.h"
@@ -50,6 +47,12 @@
 {
 }
 
+void NXSession::resetSession()
+{
+	stage = 0;
+	sessionSet = false;
+}
+
 QString NXSession::parseSSH(QString message)
 {
 	int response = parseResponse(message);
@@ -124,49 +127,51 @@
 			if (response == 105 && sessionSet) {
 				int media = 0;
 				int render = 0;
-
+				QString fullscreen = "";
 				if (sessionData->media)
 					media = 1;
 				if (sessionData->render)
 					render = 1;
+				if (sessionData->fullscreen)
+					fullscreen = "+fullscreen";
 
 				if (sessionData->suspended) {
 					// These are the session parameters that NoMachine's client sends for resume
-					returnMessage = "restoresession --id=\"" + QString::fromStdString(sessionData->id) +
-					"\" --session=\"" + QString::fromStdString(sessionData->sessionName) +
-					"\" --type=\"" + QString::fromStdString(sessionData->sessionType) +
+					returnMessage = "restoresession --id=\"" + sessionData->id +
+					"\" --session=\"" + sessionData->sessionName +
+					"\" --type=\"" + sessionData->sessionType +
 					"\" --cache=\"" + QString::number(sessionData->cache) +
 					"M\" --images=\"" + QString::number(sessionData->images) +
 					"M\" --cookie=\"" + generateCookie() +
-					"\" --link=\"" + QString::fromStdString(sessionData->linkType) +
-					"\" --kbtype=\"" + QString::fromStdString(sessionData->kbtype) +
+					"\" --link=\"" + sessionData->linkType +
+					"\" --kbtype=\"" + sessionData->kbtype +
 					"\" --nodelay=\"1\" --encryption=\"" + QString::number(encryption) +
-					"\" --backingstore=\"" + QString::fromStdString(sessionData->backingstore) +
-					"\" --geometry=\"" + QString::fromStdString(sessionData->geometry) +
+					"\" --backingstore=\"" + sessionData->backingstore +
+					"\" --geometry=\"" + sessionData->geometry +
 					"\" --media=\"" + QString::number(media) +
-					"\" --agent_server=\"" + QString::fromStdString(sessionData->agentServer) +
-					"\" --agent_user=\"" + QString::fromStdString(sessionData->agentUser) +
-					"\" --agent_password=\"" + QString::fromStdString(sessionData->agentPass) + "\"";
+					"\" --agent_server=\"" + sessionData->agentServer +
+					"\" --agent_user=\"" + sessionData->agentUser +
+					"\" --agent_password=\"" + sessionData->agentPass + "\"";
 					stage++;
 				} else {
-					returnMessage = "startsession --session=\"" + QString::fromStdString(sessionData->sessionName) +
-					"\" --type=\"" + QString::fromStdString(sessionData->sessionType) +
+					returnMessage = "startsession --session=\"" + sessionData->sessionName +
+					"\" --type=\"" + sessionData->sessionType +
 					"\" --cache=\"" + QString::number(sessionData->cache) +
 					"M\" --images=\"" + QString::number(sessionData->images) +
 					"M\" --cookie=\"" + generateCookie() +
-					"\" --link=\"" + QString::fromStdString(sessionData->linkType) +
+					"\" --link=\"" + sessionData->linkType +
 					"\" --render=\"" + QString::number(render) +
 					"\" --encryption=\"" + QString::number(encryption) +
-					"\" --backingstore=\"" + QString::fromStdString(sessionData->backingstore) +
+					"\" --backingstore=\"" + sessionData->backingstore +
 					"\" --imagecompressionmethod=\"" + QString::number(sessionData->imageCompressionMethod) +
-					"\" --geometry=\"" + QString::fromStdString(sessionData->geometry) +
+					"\" --geometry=\"" + sessionData->geometry +
 					"\" --screeninfo=\"" + xRes + "x" + yRes + "x" + depth + renderSet +
-					"\" --keyboard=\"" + QString::fromStdString(sessionData->keyboard) +
-					"\" --kbtype=\"" + QString::fromStdString(sessionData->kbtype) +
+					"\" --keyboard=\"" + sessionData->keyboard +
+					"\" --kbtype=\"" + sessionData->kbtype +
 					"\" --media=\"" + QString::number(media) +
-					"\" --agent_server=\"" + QString::fromStdString(sessionData->agentServer) +
-					"\" --agent_user=\"" + QString::fromStdString(sessionData->agentUser) +
-					"\" --agent_password=\"" + QString::fromStdString(sessionData->agentPass) + "\"";
+					"\" --agent_server=\"" + sessionData->agentServer +
+					"\" --agent_user=\"" + sessionData->agentUser +
+					"\" --agent_password=\"" + sessionData->agentPass + "\"";
 					stage++;
 				}
 			}
@@ -220,7 +225,7 @@
 			sessions << rawdata.at(i);
 	}
 
-	QVector<QStringList> rawsessions;
+	QList<QStringList> rawsessions;
 
 	for (i = 0; i < sessions.size(); ++i)
 		rawsessions.append(sessions.at(i).simplified().split(' '));
@@ -229,19 +234,21 @@
 
 	for (i = 0; i < rawsessions.size(); ++i) {
 		resData.display = rawsessions.at(i).at(0).toInt();
-		resData.sessionType = rawsessions.at(i).at(1).toAscii().data();
-		resData.sessionID = rawsessions.at(i).at(2).toAscii().data();
-		resData.options = rawsessions.at(i).at(3).toAscii().data();
+		resData.sessionType = rawsessions.at(i).at(1);
+		resData.sessionID = rawsessions.at(i).at(2);
+		resData.options = rawsessions.at(i).at(3);
 		resData.depth = rawsessions.at(i).at(4).toInt();
-		resData.screen = rawsessions.at(i).at(5).toAscii().data();
-		resData.available = rawsessions.at(i).at(6).toAscii().data();
-		resData.sessionName = rawsessions.at(i).at(7).toAscii().data();
-		runningSessions.push_back(resData);
+		resData.screen = rawsessions.at(i).at(5);
+		resData.available = rawsessions.at(i).at(6);
+		resData.sessionName = rawsessions.at(i).at(7);
+		runningSessions.append(resData);
 	}
 
-	if (runningSessions.size() != 0)
+	if (runningSessions.size() != 0) {
 		suspendedSessions = true;
-
+		emit sessionsSignal(runningSessions);
+	}
+	
 	stage++;
 }
 

Modified: nxclientlib/nxsession.h
===================================================================
--- nxclientlib/nxsession.h	2006-08-04 13:50:49 UTC (rev 252)
+++ nxclientlib/nxsession.h	2006-08-04 16:06:17 UTC (rev 253)
@@ -18,47 +18,47 @@
 #ifndef _NXSESSION_H_
 #define _NXSESSION_H_
 
-#include <vector>
-
 #include <QObject>
 #include <QString>
 #include <QStringList>
+#include <QList>
 
 #include <fcntl.h>
 #include <unistd.h>
 
 struct NXSessionData {
-	std::string sessionName;
-	std::string sessionType;
+	QString sessionName;
+	QString sessionType;
 	int cache;
 	int images;
-	std::string linkType;
+	QString linkType;
 	bool render;
-	std::string backingstore;
+	QString backingstore;
 	int imageCompressionMethod;
 	int imageCompressionLevel;
-	std::string geometry;
-	std::string keyboard;
-	std::string kbtype;
+	QString geometry;
+	QString keyboard;
+	QString kbtype;
 	bool media;
-	std::string agentServer;
-	std::string agentUser;
-	std::string agentPass;
+	QString agentServer;
+	QString agentUser;
+	QString agentPass;
 	int cups;
-	std::string id;
-	std::string screenInfo;
+	QString id;
+	QString key;
 	bool suspended;
+	bool fullscreen;
 };
 
 struct NXResumeData {
 	int display;
-	std::string sessionType;
-	std::string sessionID;
-	std::string options;
+	QString sessionType;
+	QString sessionID;
+	QString options;
 	int depth;
-	std::string screen;
-	std::string available;
-	std::string sessionName;
+	QString screen;
+	QString available;
+	QString sessionName;
 };
 
 // This class is used to parse the output from the nxssh session to the server
@@ -82,15 +82,15 @@
 		void setContinue(bool allow) { doSSH = allow; };
 		void setSession(NXSessionData *);
 		void setEncryption(bool enc) { encryption = enc; };
+		void resetSession();
 		
 		QString generateCookie();
-		
-
 	signals:
 		// Emitted when the initial public key authentication is successful
 		void authenticated();
 		void loginFailed();
 		void finished();
+		void sessionsSignal(QList<NXResumeData>);
 	private:
 		bool doSSH;
 		bool suspendedSessions;
@@ -116,7 +116,7 @@
 
 		QStringList resumeSessions;
 
-		std::vector<NXResumeData> runningSessions;
+		QList<NXResumeData> runningSessions;
 		NXSessionData *sessionData;
 
 };

Modified: nxclientlib/qt-test/qt-test.pro
===================================================================
--- nxclientlib/qt-test/qt-test.pro	2006-08-04 13:50:49 UTC (rev 252)
+++ nxclientlib/qt-test/qt-test.pro	2006-08-04 16:06:17 UTC (rev 253)
@@ -2,9 +2,9 @@
 
 FORMS = mainwindow.ui
 
-SOURCES = main.cpp qtnxwindow.cpp qtnxcallback.cpp
+SOURCES = main.cpp qtnxwindow.cpp
 
-HEADERS = qtnxwindow.h qtnxcallback.h
+HEADERS = qtnxwindow.h
 
 INCLUDEPATH	+= $(QTDIR)/include . ..
 

Deleted: nxclientlib/qt-test/qtnxcallback.cpp
===================================================================
--- nxclientlib/qt-test/qtnxcallback.cpp	2006-08-04 13:50:49 UTC (rev 252)
+++ nxclientlib/qt-test/qtnxcallback.cpp	2006-08-04 16:06:17 UTC (rev 253)
@@ -1,39 +0,0 @@
-/***************************************************************************
-                               qtnxcallback.cpp
-                             -------------------
-    begin                : Thursday August 3rd 2006
-    copyright            : (C) 2006 by George Wright
-    email                : gwright at kde.org
- ***************************************************************************/
-
-/***************************************************************************
- *                                                                         *
- *   This program is free software; you can redistribute it and/or modify  *
- *   it under the terms of the GNU General Public License as published by  *
- *   the Free Software Foundation; either version 2 of the License, or     *
- *   (at your option) any later version.                                   *
- *                                                                         *
- ***************************************************************************/
-
-#include "qtnxcallback.h"
-
-void QtNXCallback::write(std::string *msg)
-{
-	emit message(*msg);
-}
-
-void QtNXCallback::sshRequestAuthenticity(std::string *msg)
-{
-	emit sshAuth(*msg);
-}
-
-void QtNXCallback::authenticationFailed()
-{
-	emit authFailed();
-}
-
-void QtNXCallback::resumeSessions(std::vector<NXResumeData> *sessions)
-{
-	emit resume();
-	m_sessions = sessions;
-}

Deleted: nxclientlib/qt-test/qtnxcallback.h
===================================================================
--- nxclientlib/qt-test/qtnxcallback.h	2006-08-04 13:50:49 UTC (rev 252)
+++ nxclientlib/qt-test/qtnxcallback.h	2006-08-04 16:06:17 UTC (rev 253)
@@ -1,48 +0,0 @@
-/***************************************************************************
-                               qtnxcallback.h
-                             -------------------
-    begin                : Thursday August 3rd 2006
-    copyright            : (C) 2006 by George Wright
-    email                : gwright at kde.org
- ***************************************************************************/
-
-/***************************************************************************
- *                                                                         *
- *   This program is free software; you can redistribute it and/or modify  *
- *   it under the terms of the GNU General Public License as published by  *
- *   the Free Software Foundation; either version 2 of the License, or     *
- *   (at your option) any later version.                                   *
- *                                                                         *
- ***************************************************************************/
- 
-#ifndef _QTNXCALLBACK_H_
-#define _QTNXCALLBACK_H_
-
-#include <QObject>
-#include "nxcallback.h"
-
-class QtNXCallback : public QObject, public NXCallback
-{
-	Q_OBJECT
-	public:
-		virtual void write(std::string *msg);
-		virtual void sshRequestAuthenticity(std::string *msg);
-
-		virtual void authenticationFailed();
-
-		// Stdout/stderr from the nxssh process
-		virtual void stdout(std::string *msg) {};
-		virtual void stderr(std::string *msg) {};
-		// Stdin sent to the nxssh process
-		virtual void stdin(std::string *msg) {};
-		virtual void resumeSessions(std::vector<NXResumeData> *sessions);
-	signals:
-		void authFailed();
-		void message(std::string);
-		void sshAuth(std::string);
-		void resume();
-	private:
-		std::vector<NXResumeData> *m_sessions;
-};
-
-#endif

Modified: nxclientlib/qt-test/qtnxwindow.cpp
===================================================================
--- nxclientlib/qt-test/qtnxwindow.cpp	2006-08-04 13:50:49 UTC (rev 252)
+++ nxclientlib/qt-test/qtnxwindow.cpp	2006-08-04 16:06:17 UTC (rev 253)
@@ -24,9 +24,6 @@
 {
 	session = new NXSessionData;
 	ui_mw.setupUi(this);
-	m_cb = new QtNXCallback();
-
-	m_lib.setCallback(m_cb);
 	
 	connect(ui_mw.connectButton, SIGNAL(pressed()), this, SLOT(connectPressed()));
 }
@@ -40,11 +37,11 @@
 	QDesktopWidget dw;
 	QX11Info info;
 	
-	session->sessionName = ui_mw.session_name->text().toStdString();
-	session->sessionType = ui_mw.session_type->currentText().toStdString();
+	session->sessionName = ui_mw.session_name->text();
+	session->sessionType = ui_mw.session_type->currentText();
 	session->cache = ui_mw.cache->currentText().toInt();
 	session->images = ui_mw.images->currentText().toInt();
-	session->linkType = ui_mw.link_type->currentText().toStdString();
+	session->linkType = ui_mw.link_type->currentText();
 	
 	if (ui_mw.render->checkState() == 0)
 		session->render = false;
@@ -75,20 +72,20 @@
 	session->kbtype = "pc102/defkeymap";
 	
 	session->media = false;
-	session->agentServer = ui_mw.rdp_server->text().toStdString();
-	session->agentUser = ui_mw.rdp_username->text().toStdString();
-	session->agentPass = ui_mw.rdp_password->text().toStdString();
+	session->agentServer = ui_mw.rdp_server->text();
+	session->agentUser = ui_mw.rdp_username->text();
+	session->agentPass = ui_mw.rdp_password->text();
 
 	// session->screenInfo = QString::number(dw.screenGeometry(this).width()) + "x" + QString::number(dw.screenGeometry(this).height()) + "x" + QString::number(info.depth()) + "render";
 	session->suspended = false;
 
 	if (ui_mw.encryption->checkState() == 0)
-		m_lib.invokeNXSSH("default" , ui_mw.server->text().toAscii().data(), false);
+		m_lib.invokeNXSSH("default" , ui_mw.server->text(), false);
 	if (ui_mw.encryption->checkState() == 2)
-		m_lib.invokeNXSSH("default" , ui_mw.server->text().toAscii().data(), true);
+		m_lib.invokeNXSSH("default" , ui_mw.server->text(), true);
 		
-	m_lib.setUsername(ui_mw.username->text().toAscii().data());
-	m_lib.setPassword(ui_mw.password->text().toAscii().data());
+	m_lib.setUsername(ui_mw.username->text());
+	m_lib.setPassword(ui_mw.password->text());
 	m_lib.setResolution(dw.screenGeometry(this).width(), dw.screenGeometry(this).height());
 	m_lib.setDepth(info.depth());
 	m_lib.setRender(true);

Modified: nxclientlib/qt-test/qtnxwindow.h
===================================================================
--- nxclientlib/qt-test/qtnxwindow.h	2006-08-04 13:50:49 UTC (rev 252)
+++ nxclientlib/qt-test/qtnxwindow.h	2006-08-04 16:06:17 UTC (rev 253)
@@ -23,7 +23,6 @@
 #include "ui_mainwindow.h"
 
 #include "nxclientlib.h"
-#include "qtnxcallback.h"
 
 class QtNXWindow : public QMainWindow
 {
@@ -37,7 +36,6 @@
 		Ui::MainWindow ui_mw;
 		NXClientLib m_lib;
 		NXSessionData *session;
-		QtNXCallback *m_cb;
 };
 
 #endif

Modified: nxclientlib/test/main.cpp
===================================================================
--- nxclientlib/test/main.cpp	2006-08-04 13:50:49 UTC (rev 252)
+++ nxclientlib/test/main.cpp	2006-08-04 16:06:17 UTC (rev 253)
@@ -1,36 +1,13 @@
 #include <QCoreApplication>
+#include <QString>
 
 #include "nxclientlib.h"
 
-class Callback : public NXCallback
-{
-	public:
-		virtual void write(std::string *msg) {};
-		virtual void sshRequestAuthenticity(std::string *msg) { m_lib->allowSSHConnect(true); };
-
-		virtual void authenticationFailed() {};
-
-		// Stdout/stderr from the nxssh process
-		virtual void stdout(std::string *msg) {};
-		virtual void stderr(std::string *msg) {};
-		// Stdin sent to the nxssh process
-		virtual void stdin(std::string *msg) {};
-		virtual void resumeSessions(std::vector<NXResumeData> *sessions) {};
-
-		void setClientLib(NXClientLib *lib) { m_lib = lib; };
-	private:
-		NXClientLib *m_lib;
-};
-
 int main(int argc, char **argv)
 {
-	Callback *cb = new Callback;
 	QCoreApplication *qApp = new QCoreApplication(argc, argv);
 	NXClientLib lib(qApp);
 
-	cb->setClientLib(&lib);
-
-	lib.setCallback(cb);
 	lib.invokeNXSSH("default" ,argv[1], true);
 	lib.setUsername(argv[2]);
 	lib.setPassword(argv[3]);
@@ -60,6 +37,6 @@
 	session.cups = 0;
 	session.suspended = false;
 
-	lib.setSession(session);
+	lib.setSession(&session);
 	return qApp->exec();
 }



From gwright at mail.berlios.de  Sat Aug  5 18:20:33 2006
From: gwright at mail.berlios.de (gwright at BerliOS)
Date: Sat, 5 Aug 2006 18:20:33 +0200
Subject: [Freenx-cvs] r254 - in nxclientlib: . qt-test
Message-ID: <200608051620.k75GKXO0027147@sheep.berlios.de>

Author: gwright
Date: 2006-08-05 18:20:33 +0200 (Sat, 05 Aug 2006)
New Revision: 254

Modified:
   nxclientlib/README
   nxclientlib/qt-test/qt-test.pro
   nxclientlib/qt-test/qtnxwindow.cpp
Log:
Update docs, various very small changes


Modified: nxclientlib/README
===================================================================
--- nxclientlib/README	2006-08-04 16:06:17 UTC (rev 253)
+++ nxclientlib/README	2006-08-05 16:20:33 UTC (rev 254)
@@ -11,6 +11,28 @@
 (this is /usr/NX/bin on most systems), and $QTDIR/bin. Set
 LD_LIBRARY_PATH to include /usr/NX/lib, . and ..
 
+If you do not have nxproxy and nxssh, you will need to compile them.
+Grab the sources from http://www.nomachine.com/sources.php (click
+on "1.5.0 release" to grab the 1.5.x sources). You'll need the
+NX development libraries for this to work.
+
+If you compiled Qt 4 without debugging, you will need to modify the
+file nxclientlib.pro. Change:
+
+ CONFIG		= qt warn_on debug dll
+
+to:
+
+ CONFIG		= qt warn_on dll
+
+Also change qt-test.pro from:
+
+ CONFIG		= qt warn_on debug
+
+to:
+
+ CONFIG		= qt warn_on
+
 Run qmake inside the nxclientlib directory, then run make. After that
 has finished, run qmake inside qt-test and run make again. This will
 build nxclientlib and the qt-test frontend.
@@ -21,6 +43,11 @@
 which shows all the nxssh data.
 
 At the moment you can only use the default NoMachine public key
-for authentication.
+for authentication. Be sure to check stdout; if it hangs with a message
+that is asking for confirmation to save the host key, quit qtnx, run
+"ssh server" on the command line, where "server" is the hostname of
+the NX server you are trying to connect to, then type "yes" when it
+prompts you with the same message. You can then quit ssh and start qtnx
+again.
 
 August 3rd 2006 - George Wright - gwright at kde.org
\ No newline at end of file

Modified: nxclientlib/qt-test/qt-test.pro
===================================================================
--- nxclientlib/qt-test/qt-test.pro	2006-08-04 16:06:17 UTC (rev 253)
+++ nxclientlib/qt-test/qt-test.pro	2006-08-05 16:20:33 UTC (rev 254)
@@ -1,5 +1,7 @@
 TEMPLATE	= app
 
+CONFIG		= qt warn_on debug
+
 FORMS = mainwindow.ui
 
 SOURCES = main.cpp qtnxwindow.cpp

Modified: nxclientlib/qt-test/qtnxwindow.cpp
===================================================================
--- nxclientlib/qt-test/qtnxwindow.cpp	2006-08-04 16:06:17 UTC (rev 253)
+++ nxclientlib/qt-test/qtnxwindow.cpp	2006-08-05 16:20:33 UTC (rev 254)
@@ -75,7 +75,11 @@
 	session->agentServer = ui_mw.rdp_server->text();
 	session->agentUser = ui_mw.rdp_username->text();
 	session->agentPass = ui_mw.rdp_password->text();
-
+	if (QApplication::desktop()->paintEngine()->hasFeature(QPaintEngine::Antialiasing))
+		m_lib.setRender(true);
+	else
+		m_lib.setRender(false);
+		
 	// session->screenInfo = QString::number(dw.screenGeometry(this).width()) + "x" + QString::number(dw.screenGeometry(this).height()) + "x" + QString::number(info.depth()) + "render";
 	session->suspended = false;
 
@@ -88,6 +92,5 @@
 	m_lib.setPassword(ui_mw.password->text());
 	m_lib.setResolution(dw.screenGeometry(this).width(), dw.screenGeometry(this).height());
 	m_lib.setDepth(info.depth());
-	m_lib.setRender(true);
 	m_lib.setSession(session);
 }



From gwright at mail.berlios.de  Sat Aug  5 18:21:39 2006
From: gwright at mail.berlios.de (gwright at BerliOS)
Date: Sat, 5 Aug 2006 18:21:39 +0200
Subject: [Freenx-cvs] r255 - nxclientlib/qt-test
Message-ID: <200608051621.k75GLdS9027272@sheep.berlios.de>

Author: gwright
Date: 2006-08-05 18:21:39 +0200 (Sat, 05 Aug 2006)
New Revision: 255

Modified:
   nxclientlib/qt-test/qtnxwindow.cpp
Log:
Forgot a header


Modified: nxclientlib/qt-test/qtnxwindow.cpp
===================================================================
--- nxclientlib/qt-test/qtnxwindow.cpp	2006-08-05 16:20:33 UTC (rev 254)
+++ nxclientlib/qt-test/qtnxwindow.cpp	2006-08-05 16:21:39 UTC (rev 255)
@@ -18,6 +18,7 @@
 #include "qtnxwindow.h"
 
 #include <QDesktopWidget>
+#include <QPaintEngine>
 #include <QX11Info>
 
 QtNXWindow::QtNXWindow() : QMainWindow()



From gwright at mail.berlios.de  Sun Aug  6 11:41:15 2006
From: gwright at mail.berlios.de (gwright at BerliOS)
Date: Sun, 6 Aug 2006 11:41:15 +0200
Subject: [Freenx-cvs] r256 - in nxclientlib: . qt-test
Message-ID: <200608060941.k769fFuG018091@sheep.berlios.de>

Author: gwright
Date: 2006-08-06 11:41:15 +0200 (Sun, 06 Aug 2006)
New Revision: 256

Modified:
   nxclientlib/README
   nxclientlib/qt-test/qt-test.pro
Log:
Bugfix.


Modified: nxclientlib/README
===================================================================
--- nxclientlib/README	2006-08-05 16:21:39 UTC (rev 255)
+++ nxclientlib/README	2006-08-06 09:41:15 UTC (rev 256)
@@ -27,11 +27,11 @@
 
 Also change qt-test.pro from:
 
- CONFIG		= qt warn_on debug
+ CONFIG		+= qt warn_on debug
 
 to:
 
- CONFIG		= qt warn_on
+ CONFIG		+= qt warn_on
 
 Run qmake inside the nxclientlib directory, then run make. After that
 has finished, run qmake inside qt-test and run make again. This will
@@ -50,4 +50,4 @@
 prompts you with the same message. You can then quit ssh and start qtnx
 again.
 
-August 3rd 2006 - George Wright - gwright at kde.org
\ No newline at end of file
+August 3rd 2006 - George Wright - gwright at kde.org

Modified: nxclientlib/qt-test/qt-test.pro
===================================================================
--- nxclientlib/qt-test/qt-test.pro	2006-08-05 16:21:39 UTC (rev 255)
+++ nxclientlib/qt-test/qt-test.pro	2006-08-06 09:41:15 UTC (rev 256)
@@ -1,6 +1,6 @@
 TEMPLATE	= app
 
-CONFIG		= qt warn_on debug
+CONFIG		+= qt warn_on debug
 
 FORMS = mainwindow.ui
 
@@ -18,4 +18,4 @@
 
 LIBS	= -lnxclientlib
 
-TARGET		= qtnx
\ No newline at end of file
+TARGET		= qtnx



From gwright at mail.berlios.de  Thu Aug 10 02:35:42 2006
From: gwright at mail.berlios.de (gwright at BerliOS)
Date: Thu, 10 Aug 2006 02:35:42 +0200
Subject: [Freenx-cvs] r257 - nxclientlib
Message-ID: <200608100035.k7A0ZgrG028506@sheep.berlios.de>

Author: gwright
Date: 2006-08-10 02:35:37 +0200 (Thu, 10 Aug 2006)
New Revision: 257

Added:
   nxclientlib/nxparsexml.cpp
   nxclientlib/nxparsexml.h
   nxclientlib/nxwritexml.cpp
   nxclientlib/nxwritexml.h
Modified:
   nxclientlib/nxclientlib.cpp
   nxclientlib/nxclientlib.h
   nxclientlib/nxclientlib.pro
   nxclientlib/nxsession.h
Log:
XML parsing/writing code


Modified: nxclientlib/nxclientlib.cpp
===================================================================
--- nxclientlib/nxclientlib.cpp	2006-08-06 09:41:15 UTC (rev 256)
+++ nxclientlib/nxclientlib.cpp	2006-08-10 00:35:37 UTC (rev 257)
@@ -42,7 +42,7 @@
 {
 }
 
-void NXClientLib::invokeNXSSH(QString publicKey, QString serverHost, bool encryption, QByteArray key)
+void NXClientLib::invokeNXSSH(QString publicKey, QString serverHost, bool encryption, QByteArray key, int port)
 {
 
 	
@@ -83,7 +83,7 @@
 
 	nxsshProcess.setEnvironment(nxsshProcess.systemEnvironment());
 
-	arguments << QString("nx@" + serverHost);
+	arguments << QString("-p %1").arg(port) << QString("nx@" + serverHost);
 	nxsshProcess.start(NXSSH_BIN, arguments);
 }
 

Modified: nxclientlib/nxclientlib.h
===================================================================
--- nxclientlib/nxclientlib.h	2006-08-06 09:41:15 UTC (rev 256)
+++ nxclientlib/nxclientlib.h	2006-08-10 00:35:37 UTC (rev 257)
@@ -47,7 +47,7 @@
 		// publicKey is the path to the ssh public key file to authenticate with. Pass "default" to use the default NoMachine key
 		// serverHost is the hostname of the NX server to connect to
 		// encryption is whether to use an encrypted NX session
-		void invokeNXSSH(QString publicKey = "default", QString serverHost = "", bool encryption = true, QByteArray key = 0);
+		void invokeNXSSH(QString publicKey = "default", QString serverHost = "", bool encryption = true, QByteArray key = 0, int port = 22);
 
 		// Overloaded to give callback data on write
 		void write(QString);

Modified: nxclientlib/nxclientlib.pro
===================================================================
--- nxclientlib/nxclientlib.pro	2006-08-06 09:41:15 UTC (rev 256)
+++ nxclientlib/nxclientlib.pro	2006-08-10 00:35:37 UTC (rev 257)
@@ -2,14 +2,14 @@
 
 CONFIG		= qt warn_on debug dll
 
-HEADERS		= nxclientlib.h nxsession.h
+HEADERS		= nxclientlib.h nxsession.h nxparsexml.h nxdata.h nxwritexml.h
 
-SOURCES		= nxclientlib.cpp nxsession.cpp
+SOURCES		= nxclientlib.cpp nxsession.cpp nxparsexml.cpp nxwritexml.cpp
 
 INCLUDEPATH	+= $(QTDIR)/include .
 
 DEPENDPATH	+= $(QTDIR)/include
 
-QT		= core
+QT		= core xml
 
 TARGET		= nxclientlib
\ No newline at end of file

Added: nxclientlib/nxparsexml.cpp
===================================================================
--- nxclientlib/nxparsexml.cpp	2006-08-06 09:41:15 UTC (rev 256)
+++ nxclientlib/nxparsexml.cpp	2006-08-10 00:35:37 UTC (rev 257)
@@ -0,0 +1,152 @@
+/***************************************************************************
+                               nxparsexml.cpp
+                             -------------------
+    begin                : Friday August 4th 2006
+    copyright            : (C) 2006 by George Wright
+    email                : gwright at kde.org
+ ***************************************************************************/
+
+/***************************************************************************
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ *                                                                         *
+ ***************************************************************************/
+
+enum { ADVANCED, ENVIRONMENT, GENERAL, IMAGES, LOGIN, SERVICES, VNC, WINDOWS, SHARE };
+
+#include <iostream>
+#include "nxparsexml.h"
+
+using namespace std;
+
+NXParseXML::NXParseXML()
+{
+}
+
+NXParseXML::~NXParseXML()
+{
+}
+
+bool NXParseXML::startElement(const QString &namespaceURI, const QString &localName, const QString &qName, const QXmlAttributes &attributes)
+{
+	QString key = attributes.value("key");
+	QString value = attributes.value("value");
+	if (key == "Connection Name"){
+		sessionData->sessionName = value;
+	}
+	
+	if (key == "Server Hostname") {
+		sessionData->serverHost = value;
+	}
+
+	if (key == "Server Port") {
+		sessionData->serverPort = value.toInt();
+	}
+
+	if (key == "Session Type") {
+		sessionData->sessionType = value;
+	}
+
+	if (key == "Custom Session Command") {
+		sessionData->customCommand = value;
+	}
+
+	if (key == "Disk Cache") {
+		sessionData->cache = value.toInt();
+	}
+
+	if (key == "Image Cache") {
+		sessionData->images = value.toInt();
+	}
+
+	if (key == "Link Type") {
+		sessionData->linkType = value;
+	}
+
+	if (key == "Use Render Extension") {
+		if (value == "True")
+			sessionData->render = true;
+		else
+			sessionData->render = false;
+	}
+
+	if (key == "Image Compression Method") {
+		if (value == "JPEG")
+			sessionData->imageCompressionMethod = -1;
+		else if (value == "PNG")
+			sessionData->imageCompressionMethod = 2;
+		else if (value == "RAW")
+			sessionData->imageCompressionMethod = 0;
+	}
+
+	if (key == "JPEG Compression Level") {
+		sessionData->imageCompressionLevel = value.toInt();
+	}
+
+	if (key == "Desktop Geometry") {
+		sessionData->geometry = value;
+	}
+
+	if (key == "Keyboard Layout") {
+		sessionData->keyboard = value;
+	}
+
+	if (key == "Keyboard Type") {
+		sessionData->kbtype = value;
+	}
+
+	if (key == "Media") {
+		if (value == "True")
+			sessionData->media = true;
+		else
+			sessionData->media = false;
+	}
+
+	if (key == "Agent Server") {
+		sessionData->agentServer = value;
+	}
+
+	if (key == "Agent User") {
+		sessionData->agentUser = value;
+	}
+
+	if (key == "CUPS Port") {
+		sessionData->cups = value.toInt();
+	}
+
+	if (key == "Authentication Key") {
+		sessionData->key = value;
+	}
+
+	if (key == "Use SSL Tunnelling") {
+		if (value == "True")
+			sessionData->encryption = true;
+		else
+			sessionData->encryption = false;
+	}
+
+	if (key == "Enable Fullscreen Desktop") {
+		if (value == "True")
+			sessionData->fullscreen = true;
+		else
+			sessionData->fullscreen = false;
+	}
+
+	return true;
+}
+
+bool NXParseXML::endElement(const QString &namespaceURI, const QString &localName, const QString &qName)
+{
+	return true;
+}
+
+bool NXParseXML::characters(const QString &str)
+{
+}
+
+bool NXParseXML::fatalError(const QXmlParseException &exception)
+{
+}

Added: nxclientlib/nxparsexml.h
===================================================================
--- nxclientlib/nxparsexml.h	2006-08-06 09:41:15 UTC (rev 256)
+++ nxclientlib/nxparsexml.h	2006-08-10 00:35:37 UTC (rev 257)
@@ -0,0 +1,43 @@
+/***************************************************************************
+                               nxparsexml.h
+                             -------------------
+    begin                : Friday August 4th 2006
+    copyright            : (C) 2006 by George Wright
+    email                : gwright at kde.org
+ ***************************************************************************/
+
+/***************************************************************************
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ *                                                                         *
+ ***************************************************************************/
+
+#ifndef _NXPARSEXML_H_
+#define _NXPARSEXML_H_
+
+#include <QXmlDefaultHandler>
+
+#include "nxdata.h"
+#include "nxsession.h"
+
+class NXParseXML : public QXmlDefaultHandler
+{
+	public:
+		NXParseXML();
+		~NXParseXML();
+		bool startElement(const QString &namespaceURI, const QString &localName, const QString &qName, const QXmlAttributes &attributes);
+		bool endElement(const QString &namespaceURI, const QString &localName, const QString &qName);
+		bool characters(const QString &str);
+		bool fatalError(const QXmlParseException &exception);
+
+		void setSessionData(NXConfigData *data) { sessionData = data; };
+		NXConfigData data();
+	private:
+		NXConfigData *sessionData;
+		int group;
+};
+
+#endif
\ No newline at end of file

Modified: nxclientlib/nxsession.h
===================================================================
--- nxclientlib/nxsession.h	2006-08-06 09:41:15 UTC (rev 256)
+++ nxclientlib/nxsession.h	2006-08-10 00:35:37 UTC (rev 257)
@@ -26,41 +26,8 @@
 #include <fcntl.h>
 #include <unistd.h>
 
-struct NXSessionData {
-	QString sessionName;
-	QString sessionType;
-	int cache;
-	int images;
-	QString linkType;
-	bool render;
-	QString backingstore;
-	int imageCompressionMethod;
-	int imageCompressionLevel;
-	QString geometry;
-	QString keyboard;
-	QString kbtype;
-	bool media;
-	QString agentServer;
-	QString agentUser;
-	QString agentPass;
-	int cups;
-	QString id;
-	QString key;
-	bool suspended;
-	bool fullscreen;
-};
+#include "nxdata.h"
 
-struct NXResumeData {
-	int display;
-	QString sessionType;
-	QString sessionID;
-	QString options;
-	int depth;
-	QString screen;
-	QString available;
-	QString sessionName;
-};
-
 // This class is used to parse the output from the nxssh session to the server
 
 class NXSession : public QObject

Added: nxclientlib/nxwritexml.cpp
===================================================================
--- nxclientlib/nxwritexml.cpp	2006-08-06 09:41:15 UTC (rev 256)
+++ nxclientlib/nxwritexml.cpp	2006-08-10 00:35:37 UTC (rev 257)
@@ -0,0 +1,90 @@
+/***************************************************************************
+                               nxwritexml.cpp
+                             -------------------
+    begin                : Wednesday August 9th 2006
+    copyright            : (C) 2006 by George Wright
+    email                : gwright at kde.org
+ ***************************************************************************/
+
+/***************************************************************************
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ *                                                                         *
+ ***************************************************************************/
+
+#include "nxwritexml.h"
+
+NXWriteXML::NXWriteXML()
+{
+}
+
+NXWriteXML::~NXWriteXML()
+{
+}
+
+void NXWriteXML::write(QFile file)
+{
+	file.open(QFile::WriteOnly);
+	
+	QTextStream xml(&file);
+	xml.setCodec("UTF-8");
+
+	xml << "<!DOCTYPE NXClientLibSettings>\n";
+	
+	xml << "<option key=\"Connection Name\" value=\"" << escape(sessionData.sessionName) << "\" />\n";
+	xml << "<option key=\"Server Hostname\" value=\"" << escape(sessionData.serverHost) << "\" />\n";
+	xml << "<option key=\"Server Port\" value=\"" << escape(QString::number(sessionData.serverPort)) << "\" />\n";
+	xml << "<option key=\"Session Type\" value=\"" << escape(sessionData.sessionType) << "\" />\n";
+	xml << "<option key=\"Custom Session Command\" value=\"" << escape(sessionData.customCommand) << "\" />\n";
+	xml << "<option key=\"Disk Cache\" value=\"" << escape(QString::number(sessionData.cache)) << "\" />\n";
+	xml << "<option key=\"Image Cache\" value=\"" << escape(QString::number(sessionData.images)) << "\" />\n";
+	xml << "<option key=\"Link Type\" value=\"" << escape(sessionData.linkType) << "\" />\n";
+	
+	if (sessionData.render == true)
+		xml << "<option key=\"Use Render Extension\" value=\"True\" />\n";
+	else
+		xml << "<option key=\"Use Render Extension\" value=\"False\" />\n";
+
+	xml << "<option key=\"Image Compression Method\" value=\"" << escape(sessionData.sessionName) << "\" />\n";
+	
+	xml << "<option key=\"JPEG Compression Level\" value=\"" << escape(QString::number(sessionData.imageCompressionLevel)) << "\" />\n";
+	xml << "<option key=\"Desktop Geometry\" value=\"" << escape(sessionData.geometry) << "\" />\n";
+	xml << "<option key=\"Keyboard Layout\" value=\"" << escape(sessionData.keyboard) << "\" />\n";
+	xml << "<option key=\"Keyboard Type\" value=\"" << escape(sessionData.kbtype) << "\" />\n";
+
+	if (sessionData.media == true)
+		xml << "<option key=\"Media\" value=\"True\" />\n";
+	else
+		xml << "<option key=\"Media\" value=\"False\" />\n";
+
+	xml << "<option key=\"Agent Server\" value=\"" << escape(sessionData.agentServer) << "\" />\n";
+	xml << "<option key=\"Agent User\" value=\"" << escape(sessionData.agentUser) << "\" />\n";
+	xml << "<option key=\"CUPS Port\" value=\"" << escape(QString::number(sessionData.cups)) << "\" />\n";
+	xml << "<option key=\"Authentication Key\" value=\"" << escape(sessionData.key) << "\" />\n";
+
+	if (sessionData.encryption == true)
+		xml << "<option key=\"Use SSL Tunnelling\" value=\"True\" />\n";
+	else
+		xml << "<option key=\"Use SSL Tunnelling\" value=\"False\" />\n";
+
+	if (sessionData.fullscreen == true)
+		xml << "<option key=\"Enable Fullscreen Desktop\" value=\"True\" />\n";
+	else
+		xml << "<option key=\"Enable Fullscreen Desktop\" value=\"False\" />\n";
+
+	xml << "</NXClientLibSettings>\n";
+
+	file.close();
+}
+
+QString escape(QString plain)
+{
+	QString formatted;
+	formatted = plain.replace('<', "&lt;");
+	formatted = plain.replace('>', "&rt;");
+	formatted = plain.replace('&', "&amp;");
+	return formatted;
+}

Added: nxclientlib/nxwritexml.h
===================================================================
--- nxclientlib/nxwritexml.h	2006-08-06 09:41:15 UTC (rev 256)
+++ nxclientlib/nxwritexml.h	2006-08-10 00:35:37 UTC (rev 257)
@@ -0,0 +1,39 @@
+/***************************************************************************
+                               nxwritexml.h
+                             -------------------
+    begin                : Wednesday August 9th 2006
+    copyright            : (C) 2006 by George Wright
+    email                : gwright at kde.org
+ ***************************************************************************/
+
+/***************************************************************************
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ *                                                                         *
+ ***************************************************************************/
+
+#ifndef _NXWRITEXML_H_
+#define _NXWRITEXML_H_
+
+#include "nxdata.h"
+
+#include <QString>
+#include <QFile>
+#include <QTextStream>
+
+class NXWriteXML
+{
+	public:
+		NXWriteXML();
+		~NXWriteXML();
+		void write(QFile);
+		void setSessionData(NXConfigData data) { sessionData = data; };
+		QString escape(QString);
+	private:
+		NXConfigData sessionData;
+};
+
+#endif



From gwright at mail.berlios.de  Thu Aug 10 15:34:33 2006
From: gwright at mail.berlios.de (gwright at BerliOS)
Date: Thu, 10 Aug 2006 15:34:33 +0200
Subject: [Freenx-cvs] r258 - nxclientlib
Message-ID: <200608101334.k7ADYXNQ029115@sheep.berlios.de>

Author: gwright
Date: 2006-08-10 15:34:32 +0200 (Thu, 10 Aug 2006)
New Revision: 258

Added:
   nxclientlib/nxdata.h
Modified:
   nxclientlib/nxparsexml.cpp
Log:
Move the structs into a separate file


Added: nxclientlib/nxdata.h
===================================================================
--- nxclientlib/nxdata.h	2006-08-10 00:35:37 UTC (rev 257)
+++ nxclientlib/nxdata.h	2006-08-10 13:34:32 UTC (rev 258)
@@ -0,0 +1,85 @@
+/***************************************************************************
+                                nxdata.h
+                             -------------------
+    begin                : Wednesday 9th August 2006
+    copyright            : (C) 2006 by George Wright
+    email                : gwright at kde.org
+ ***************************************************************************/
+
+/***************************************************************************
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ *                                                                         *
+ ***************************************************************************/
+
+#ifndef _NXDATA_H_
+#define _NXDATA_H_
+
+#include <QString>
+
+struct NXConfigData {
+	QString serverHost;
+	int serverPort;
+	QString sessionName;
+	QString sessionType;
+	int cache;
+	int images;
+	QString linkType;
+	bool render;
+	QString backingstore;
+	int imageCompressionMethod;
+	int imageCompressionLevel;
+	QString geometry;
+	QString keyboard;
+	QString kbtype;
+	bool media;
+	QString agentServer;
+	QString agentUser;
+	QString agentPass;
+	int cups;
+	QString id;
+	QString key;
+	bool encryption;
+	bool fullscreen;
+	QString customCommand;
+};
+
+struct NXSessionData {
+	QString sessionName;
+	QString sessionType;
+	int cache;
+	int images;
+	QString linkType;
+	bool render;
+	QString backingstore;
+	int imageCompressionMethod;
+	int imageCompressionLevel;
+	QString geometry;
+	QString keyboard;
+	QString kbtype;
+	bool media;
+	QString agentServer;
+	QString agentUser;
+	QString agentPass;
+	int cups;
+	QString id;
+	QString key;
+	bool suspended;
+	bool fullscreen;
+};
+
+struct NXResumeData {
+	int display;
+	QString sessionType;
+	QString sessionID;
+	QString options;
+	int depth;
+	QString screen;
+	QString available;
+	QString sessionName;
+};
+
+#endif

Modified: nxclientlib/nxparsexml.cpp
===================================================================
--- nxclientlib/nxparsexml.cpp	2006-08-10 00:35:37 UTC (rev 257)
+++ nxclientlib/nxparsexml.cpp	2006-08-10 13:34:32 UTC (rev 258)
@@ -15,8 +15,6 @@
  *                                                                         *
  ***************************************************************************/
 
-enum { ADVANCED, ENVIRONMENT, GENERAL, IMAGES, LOGIN, SERVICES, VNC, WINDOWS, SHARE };
-
 #include <iostream>
 #include "nxparsexml.h"
 



From gwright at mail.berlios.de  Fri Aug 11 05:51:23 2006
From: gwright at mail.berlios.de (gwright at BerliOS)
Date: Fri, 11 Aug 2006 05:51:23 +0200
Subject: [Freenx-cvs] r259 - nxclientlib
Message-ID: <200608110351.k7B3pNFG018724@sheep.berlios.de>

Author: gwright
Date: 2006-08-11 05:51:17 +0200 (Fri, 11 Aug 2006)
New Revision: 259

Modified:
   nxclientlib/nxclientlib.cpp
   nxclientlib/nxdata.h
   nxclientlib/nxsession.cpp
   nxclientlib/nxwritexml.cpp
Log:
Various fixes


Modified: nxclientlib/nxclientlib.cpp
===================================================================
--- nxclientlib/nxclientlib.cpp	2006-08-10 13:34:32 UTC (rev 258)
+++ nxclientlib/nxclientlib.cpp	2006-08-11 03:51:17 UTC (rev 259)
@@ -40,12 +40,11 @@
 
 NXClientLib::~NXClientLib()
 {
+	nxsshProcess.terminate();
 }
 
 void NXClientLib::invokeNXSSH(QString publicKey, QString serverHost, bool encryption, QByteArray key, int port)
 {
-
-	
 	QStringList arguments;
 	proxyData.server = serverHost;
 	

Modified: nxclientlib/nxdata.h
===================================================================
--- nxclientlib/nxdata.h	2006-08-10 13:34:32 UTC (rev 258)
+++ nxclientlib/nxdata.h	2006-08-11 03:51:17 UTC (rev 259)
@@ -40,7 +40,6 @@
 	QString agentUser;
 	QString agentPass;
 	int cups;
-	QString id;
 	QString key;
 	bool encryption;
 	bool fullscreen;

Modified: nxclientlib/nxsession.cpp
===================================================================
--- nxclientlib/nxsession.cpp	2006-08-10 13:34:32 UTC (rev 258)
+++ nxclientlib/nxsession.cpp	2006-08-11 03:51:17 UTC (rev 259)
@@ -132,8 +132,10 @@
 					media = 1;
 				if (sessionData->render)
 					render = 1;
-				if (sessionData->fullscreen)
+				if (sessionData->fullscreen) {
+					sessionData->geometry = "fullscreen";
 					fullscreen = "+fullscreen";
+				}
 
 				if (sessionData->suspended) {
 					// These are the session parameters that NoMachine's client sends for resume
@@ -164,8 +166,8 @@
 					"\" --encryption=\"" + QString::number(encryption) +
 					"\" --backingstore=\"" + sessionData->backingstore +
 					"\" --imagecompressionmethod=\"" + QString::number(sessionData->imageCompressionMethod) +
-					"\" --geometry=\"" + sessionData->geometry +
-					"\" --screeninfo=\"" + xRes + "x" + yRes + "x" + depth + renderSet +
+					"\" --geometry=\"" + sessionData->geometry + 
+					"\" --screeninfo=\"" + xRes + "x" + yRes + "x" + depth + renderSet + fullscreen +
 					"\" --keyboard=\"" + sessionData->keyboard +
 					"\" --kbtype=\"" + sessionData->kbtype +
 					"\" --media=\"" + QString::number(media) +

Modified: nxclientlib/nxwritexml.cpp
===================================================================
--- nxclientlib/nxwritexml.cpp	2006-08-10 13:34:32 UTC (rev 258)
+++ nxclientlib/nxwritexml.cpp	2006-08-11 03:51:17 UTC (rev 259)
@@ -80,7 +80,7 @@
 	file.close();
 }
 
-QString escape(QString plain)
+QString NXWriteXML::escape(QString plain)
 {
 	QString formatted;
 	formatted = plain.replace('<', "&lt;");



From gwright at mail.berlios.de  Mon Aug 14 22:51:26 2006
From: gwright at mail.berlios.de (gwright at BerliOS)
Date: Mon, 14 Aug 2006 22:51:26 +0200
Subject: [Freenx-cvs] r261 - nxclientlib
Message-ID: <200608142051.k7EKpQDJ024649@sheep.berlios.de>

Author: gwright
Date: 2006-08-14 22:51:26 +0200 (Mon, 14 Aug 2006)
New Revision: 261

Modified:
   nxclientlib/README
Log:
Update README


Modified: nxclientlib/README
===================================================================
--- nxclientlib/README	2006-08-14 20:44:17 UTC (rev 260)
+++ nxclientlib/README	2006-08-14 20:51:26 UTC (rev 261)
@@ -27,11 +27,11 @@
 
 Also change qt-test.pro from:
 
- CONFIG		+= qt warn_on debug
+ CONFIG		= qt warn_on debug
 
 to:
 
- CONFIG		+= qt warn_on release
+ CONFIG		= qt warn_on release
 
 Run qmake inside the nxclientlib directory, then run make. After that
 has finished, run qmake inside qt-test and run make again. This will



From gwright at mail.berlios.de  Wed Aug 16 04:41:21 2006
From: gwright at mail.berlios.de (gwright at BerliOS)
Date: Wed, 16 Aug 2006 04:41:21 +0200
Subject: [Freenx-cvs] r262 - in nxclientlib: . qtnx
Message-ID: <200608160241.k7G2fLfh004768@sheep.berlios.de>

Author: gwright
Date: 2006-08-16 04:41:16 +0200 (Wed, 16 Aug 2006)
New Revision: 262

Modified:
   nxclientlib/nxparsexml.cpp
   nxclientlib/nxwritexml.cpp
   nxclientlib/qtnx/qtnxsettings.cpp
   nxclientlib/qtnx/qtnxsettings.h
   nxclientlib/qtnx/qtnxwindow.cpp
   nxclientlib/qtnx/settingsdialog.ui
Log:
Preliminary configuration code (does nothing yet). Fix NXWriteXML.


Modified: nxclientlib/nxparsexml.cpp
===================================================================
--- nxclientlib/nxparsexml.cpp	2006-08-14 20:51:26 UTC (rev 261)
+++ nxclientlib/nxparsexml.cpp	2006-08-16 02:41:16 UTC (rev 262)
@@ -76,7 +76,7 @@
 			sessionData->imageCompressionMethod = -1;
 		else if (value == "PNG")
 			sessionData->imageCompressionMethod = 2;
-		else if (value == "RAW")
+		else if (value == "Raw X11")
 			sessionData->imageCompressionMethod = 0;
 	}
 

Modified: nxclientlib/nxwritexml.cpp
===================================================================
--- nxclientlib/nxwritexml.cpp	2006-08-14 20:51:26 UTC (rev 261)
+++ nxclientlib/nxwritexml.cpp	2006-08-16 02:41:16 UTC (rev 262)
@@ -47,9 +47,14 @@
 		xml << "<option key=\"Use Render Extension\" value=\"True\" />\n";
 	else
 		xml << "<option key=\"Use Render Extension\" value=\"False\" />\n";
-
-	xml << "<option key=\"Image Compression Method\" value=\"" << escape(sessionData.sessionName) << "\" />\n";
 	
+	if (sessionData.imageCompressionMethod == -1)
+		xml << "<option key=\"Image Compression Method\" value=\"JPEG\" />\n";
+	else if (sessionData.imageCompressionMethod == 2)
+		xml << "<option key=\"Image Compression Method\" value=\"PNG\" />\n";
+	else if (sessionData.imageCompressionMethod == 0)
+		xml << "<option key=\"Image Compression Method\" value=\"Raw X11\" />\n";
+	
 	xml << "<option key=\"JPEG Compression Level\" value=\"" << escape(QString::number(sessionData.imageCompressionLevel)) << "\" />\n";
 	xml << "<option key=\"Desktop Geometry\" value=\"" << escape(sessionData.geometry) << "\" />\n";
 	xml << "<option key=\"Keyboard Layout\" value=\"" << escape(sessionData.keyboard) << "\" />\n";

Modified: nxclientlib/qtnx/qtnxsettings.cpp
===================================================================
--- nxclientlib/qtnx/qtnxsettings.cpp	2006-08-14 20:51:26 UTC (rev 261)
+++ nxclientlib/qtnx/qtnxsettings.cpp	2006-08-16 02:41:16 UTC (rev 262)
@@ -25,22 +25,101 @@
 
 QtNXSettings::QtNXSettings(QString sessionName) : QDialog()
 {
-	if (!sessionName.isEmpty()) {
+	if (!sessionName.isEmpty())
+		fileName = QDir::homePath() + ".qtnx/" + sessionName + ".nxml";
+	else
+		fileName = "";
+		
+	parseFile();
+	
+	ui_sd.setupUi(this);
+	ui_sd.sessionName->setText(sessionName);
+
+}
+
+QtNXSettings::~QtNXSettings()
+{
+}
+
+void QtNXSettings::parseFile()
+{
+	if (!fileName.isEmpty()) {
 		NXParseXML handler;
 		handler.setSessionData(&config);
 	
-		QFile file(QDir::homePath() + ".qtnx/" + sessionName + ".nxml");
+		QFile file(fileName);
 		QXmlInputSource inputSource(&file);
 
 		QXmlSimpleReader reader;
 		reader.setContentHandler(&handler);
 		reader.setErrorHandler(&handler);
 		reader.parse(inputSource);
+
+		ui_sd.hostname->setText(config.serverHost);
+		ui_sd.port->setValue(config.serverPort);
+
+		if (config.key.isEmpty())
+			ui_sd.defaultKey->setChecked(true);
+		else {
+			ui_sd.defaultKey->setChecked(false);
+			ui_sd.setAuthKeyButton->setEnabled(true);
+		}
+
+		if (config.sessionType == "unix-kde") {
+			ui_sd.platform->setCurrentIndex(ui_sd.platform->findText(tr("UNIX")));
+			ui_sd.type->setCurrentIndex(ui_sd.type->findText(tr("KDE")));
+		} else if (config.sessionType == "unix-gnome") {
+			ui_sd.platform->setCurrentIndex(ui_sd.platform->findText(tr("UNIX")));
+			ui_sd.type->setCurrentIndex(ui_sd.type->findText(tr("KDE")));
+		} else if (config.sessionType == "unix-cde") {
+			ui_sd.platform->setCurrentIndex(ui_sd.platform->findText(tr("UNIX")));
+			ui_sd.type->setCurrentIndex(ui_sd.type->findText(tr("CDE")));
+		} else if (config.sessionType == "unix-application") {
+			ui_sd.platform->setCurrentIndex(ui_sd.platform->findText(tr("UNIX")));
+			ui_sd.type->setCurrentIndex(ui_sd.type->findText(tr("Custom")));
+			ui_sd.desktopSettingButton->setEnabled(true);
+		}
+
+		if (config.linkType == "modem")
+			ui_sd.link->setCurrentIndex(ui_sd.link->findText("Modem"));
+		else if (config.linkType == "isdn")
+			ui_sd.link->setCurrentIndex(ui_sd.link->findText("ISDN"));
+		else if (config.linkType == "adsl")
+			ui_sd.link->setCurrentIndex(ui_sd.link->findText("ADSL"));
+		else if (config.linkType == "wan")
+			ui_sd.link->setCurrentIndex(ui_sd.link->findText("WAN"));
+		else if (config.linkType == "lan")
+			ui_sd.link->setCurrentIndex(ui_sd.link->findText("LAN"));
+
+		if (config.imageCompressionMethod == -1) {
+			ui_sd.imageCompressionType->setCurrentIndex(ui_sd.imageCompressionType->findText(tr("JPEG")));
+			ui_sd.imageQualityLevel->setValue(config.imageCompressionLevel);
+		} else if (config.imageCompressionMethod == 2)
+			ui_sd.imageCompressionType->setCurrentIndex(ui_sd.imageCompressionType->findText(tr("PNG")));
+		else if (config.imageCompressionMethod == 0)
+			ui_sd.imageCompressionType->setCurrentIndex(ui_sd.imageCompressionType->findText(tr("Raw X11")));
+
+		if (config.geometry == "640x480+0+0")
+			ui_sd.resolution->setCurrentIndex(ui_sd.resolution->findText(tr("640x480")));
+		else if (config.geometry == "800x600+0+0")
+			ui_sd.resolution->setCurrentIndex(ui_sd.resolution->findText(tr("640x480")));
+		else if (config.geometry == "1024x768+0+0")
+			ui_sd.resolution->setCurrentIndex(ui_sd.resolution->findText(tr("640x480")));
+		else {
+			if (config.fullscreen) {
+				ui_sd.resolution->setCurrentIndex(ui_sd.resolution->findText(tr("Fullscreen")));
+			} else {
+				ui_sd.resolution->setCurrentIndex(ui_sd.resolution->findText(tr("Custom")));
+				
+				QString res;
+				res = config.geometry.left(config.geometry.length() - 4);
+				ui_sd.width->setValue(res.split('x').at(0).toInt());
+				ui_sd.height->setValue(res.split('x').at(1).toInt());
+				ui_sd.width->setEnabled(true);
+				ui_sd.height->setEnabled(true);
+			}
+		}
+
+		ui_sd.render->setChecked(config.render);
 	}
-	
-	ui_sd.setupUi(this);
 }
-
-QtNXSettings::~QtNXSettings()
-{
-}

Modified: nxclientlib/qtnx/qtnxsettings.h
===================================================================
--- nxclientlib/qtnx/qtnxsettings.h	2006-08-14 20:51:26 UTC (rev 261)
+++ nxclientlib/qtnx/qtnxsettings.h	2006-08-16 02:41:16 UTC (rev 262)
@@ -30,9 +30,11 @@
 	public:
 		QtNXSettings(QString);
 		~QtNXSettings();
+		void parseFile();
 	private:
 		Ui::SettingsDialog ui_sd;
 		NXConfigData config;
+		QString fileName;
 
 };
 

Modified: nxclientlib/qtnx/qtnxwindow.cpp
===================================================================
--- nxclientlib/qtnx/qtnxwindow.cpp	2006-08-14 20:51:26 UTC (rev 261)
+++ nxclientlib/qtnx/qtnxwindow.cpp	2006-08-16 02:41:16 UTC (rev 262)
@@ -49,7 +49,7 @@
 	for (unsigned int i=0;i<dir.count();i++) {
 		QString conn=dir[i];
 		if (conn.compare("nxclient.conf")==0) continue;
-		ui_lg.session->addItem(conn.left(conn.length()-3));
+		ui_lg.session->addItem(conn.left(conn.length()-5));
 	}
 	ui_lg.session->addItem(tr("Create new session"));
 
@@ -139,7 +139,7 @@
 void QtNXWindow::configure()
 {
 	if (ui_lg.session->currentText() == tr("Create new session"))
-		settingsDialog = new QtNXSettings(0);
+		settingsDialog = new QtNXSettings("");
 	else
 		settingsDialog = new QtNXSettings(ui_lg.session->currentText());
 		

Modified: nxclientlib/qtnx/settingsdialog.ui
===================================================================
--- nxclientlib/qtnx/settingsdialog.ui	2006-08-14 20:51:26 UTC (rev 261)
+++ nxclientlib/qtnx/settingsdialog.ui	2006-08-16 02:41:16 UTC (rev 262)
@@ -349,6 +349,9 @@
             </item>
             <item>
              <widget class="QPushButton" name="desktopSettingButton" >
+              <property name="enabled" >
+               <bool>false</bool>
+              </property>
               <property name="text" >
                <string>&amp;Settings...</string>
               </property>



From gwright at mail.berlios.de  Wed Aug 16 07:02:30 2006
From: gwright at mail.berlios.de (gwright at BerliOS)
Date: Wed, 16 Aug 2006 07:02:30 +0200
Subject: [Freenx-cvs] r263 - in nxclientlib: . qtnx
Message-ID: <200608160502.k7G52Ujc004211@sheep.berlios.de>

Author: gwright
Date: 2006-08-16 07:02:15 +0200 (Wed, 16 Aug 2006)
New Revision: 263

Modified:
   nxclientlib/nxparsexml.cpp
   nxclientlib/nxparsexml.h
   nxclientlib/nxwritexml.cpp
   nxclientlib/nxwritexml.h
   nxclientlib/qtnx/qtnxsettings.cpp
   nxclientlib/qtnx/qtnxsettings.h
   nxclientlib/qtnx/qtnxwindow.cpp
Log:
Fix broken XML code. Updated qtnx configuration stuff.


Modified: nxclientlib/nxparsexml.cpp
===================================================================
--- nxclientlib/nxparsexml.cpp	2006-08-16 02:41:16 UTC (rev 262)
+++ nxclientlib/nxparsexml.cpp	2006-08-16 05:02:15 UTC (rev 263)
@@ -30,109 +30,107 @@
 
 bool NXParseXML::startElement(const QString &namespaceURI, const QString &localName, const QString &qName, const QXmlAttributes &attributes)
 {
-	QString key = attributes.value("key");
-	QString value = attributes.value("value");
-	if (key == "Connection Name"){
-		sessionData->sessionName = value;
+	if (attributes.value("key") == "Connection Name") {
+		sessionData->sessionName = attributes.value("value");
 	}
 	
-	if (key == "Server Hostname") {
-		sessionData->serverHost = value;
+	if (attributes.value("key") == "Server Hostname") {
+		sessionData->serverHost = attributes.value("value");
 	}
 
-	if (key == "Server Port") {
-		sessionData->serverPort = value.toInt();
+	if (attributes.value("key") == "Server Port") {
+		sessionData->serverPort = attributes.value("value").toInt();
 	}
 
-	if (key == "Session Type") {
-		sessionData->sessionType = value;
+	if (attributes.value("key") == "Session Type") {
+		sessionData->sessionType = attributes.value("value");
 	}
 
-	if (key == "Custom Session Command") {
-		sessionData->customCommand = value;
+	if (attributes.value("key") == "Custom Session Command") {
+		sessionData->customCommand = attributes.value("value");
 	}
 
-	if (key == "Disk Cache") {
-		sessionData->cache = value.toInt();
+	if (attributes.value("key") == "Disk Cache") {
+		sessionData->cache = attributes.value("value").toInt();
 	}
 
-	if (key == "Image Cache") {
-		sessionData->images = value.toInt();
+	if (attributes.value("key") == "Image Cache") {
+		sessionData->images = attributes.value("value").toInt();
 	}
 
-	if (key == "Link Type") {
-		sessionData->linkType = value;
+	if (attributes.value("key") == "Link Type") {
+		sessionData->linkType = attributes.value("value");
 	}
 
-	if (key == "Use Render Extension") {
-		if (value == "True")
+	if (attributes.value("key") == "Use Render Extension") {
+		if (attributes.value("value") == "True")
 			sessionData->render = true;
 		else
 			sessionData->render = false;
 	}
 
-	if (key == "Image Compression Method") {
-		if (value == "JPEG")
+	if (attributes.value("key") == "Image Compression Method") {
+		if (attributes.value("value") == "JPEG")
 			sessionData->imageCompressionMethod = -1;
-		else if (value == "PNG")
+		else if (attributes.value("value") == "PNG")
 			sessionData->imageCompressionMethod = 2;
-		else if (value == "Raw X11")
+		else if (attributes.value("value") == "Raw X11")
 			sessionData->imageCompressionMethod = 0;
 	}
 
-	if (key == "JPEG Compression Level") {
-		sessionData->imageCompressionLevel = value.toInt();
+	if (attributes.value("key") == "JPEG Compression Level") {
+		sessionData->imageCompressionLevel = attributes.value("value").toInt();
 	}
 
-	if (key == "Desktop Geometry") {
-		sessionData->geometry = value;
+	if (attributes.value("key") == "Desktop Geometry") {
+		sessionData->geometry = attributes.value("value");
 	}
 
-	if (key == "Keyboard Layout") {
-		sessionData->keyboard = value;
+	if (attributes.value("key") == "Keyboard Layout") {
+		sessionData->keyboard = attributes.value("value");
 	}
 
-	if (key == "Keyboard Type") {
-		sessionData->kbtype = value;
+	if (attributes.value("key") == "Keyboard Type") {
+		sessionData->kbtype = attributes.value("value");
 	}
 
-	if (key == "Media") {
-		if (value == "True")
+	if (attributes.value("key") == "Media") {
+		if (attributes.value("value") == "True")
 			sessionData->media = true;
 		else
 			sessionData->media = false;
 	}
 
-	if (key == "Agent Server") {
-		sessionData->agentServer = value;
+	if (attributes.value("key") == "Agent Server") {
+		sessionData->agentServer = attributes.value("value");
 	}
 
-	if (key == "Agent User") {
-		sessionData->agentUser = value;
+	if (attributes.value("key") == "Agent User") {
+		sessionData->agentUser = attributes.value("value");
 	}
 
-	if (key == "CUPS Port") {
-		sessionData->cups = value.toInt();
+	if (attributes.value("key") == "CUPS Port") {
+		sessionData->cups = attributes.value("value").toInt();
 	}
 
-	if (key == "Authentication Key") {
-		sessionData->key = value;
+	if (attributes.value("key") == "Authentication Key") {
+		sessionData->key = attributes.value("value");
 	}
 
-	if (key == "Use SSL Tunnelling") {
-		if (value == "True")
+	if (attributes.value("key") == "Use SSL Tunnelling") {
+		if (attributes.value("value") == "True")
 			sessionData->encryption = true;
 		else
 			sessionData->encryption = false;
 	}
 
-	if (key == "Enable Fullscreen Desktop") {
-		if (value == "True")
+	if (attributes.value("key") == "Enable Fullscreen Desktop") {
+		if (attributes.value("value") == "True")
 			sessionData->fullscreen = true;
 		else
 			sessionData->fullscreen = false;
 	}
-
+	
 	return true;
 }
 
@@ -140,11 +138,3 @@
 {
 	return true;
 }
-
-bool NXParseXML::characters(const QString &str)
-{
-}
-
-bool NXParseXML::fatalError(const QXmlParseException &exception)
-{
-}

Modified: nxclientlib/nxparsexml.h
===================================================================
--- nxclientlib/nxparsexml.h	2006-08-16 02:41:16 UTC (rev 262)
+++ nxclientlib/nxparsexml.h	2006-08-16 05:02:15 UTC (rev 263)
@@ -23,18 +23,15 @@
 #include "nxdata.h"
 #include "nxsession.h"
 
-class NXParseXML : public QXmlDefaultHandler
+class NXParseXML : public QObject, public QXmlDefaultHandler
 {
+	Q_OBJECT
 	public:
 		NXParseXML();
 		~NXParseXML();
 		bool startElement(const QString &namespaceURI, const QString &localName, const QString &qName, const QXmlAttributes &attributes);
 		bool endElement(const QString &namespaceURI, const QString &localName, const QString &qName);
-		bool characters(const QString &str);
-		bool fatalError(const QXmlParseException &exception);
-
-		void setSessionData(NXConfigData *data) { sessionData = data; };
-		NXConfigData data();
+		void setData(NXConfigData *data) { sessionData = data; };
 	private:
 		NXConfigData *sessionData;
 		int group;

Modified: nxclientlib/nxwritexml.cpp
===================================================================
--- nxclientlib/nxwritexml.cpp	2006-08-16 02:41:16 UTC (rev 262)
+++ nxclientlib/nxwritexml.cpp	2006-08-16 05:02:15 UTC (rev 263)
@@ -25,60 +25,62 @@
 {
 }
 
-void NXWriteXML::write(QFile file)
+void NXWriteXML::write(QString fileName)
 {
+	QFile file(fileName);
 	file.open(QFile::WriteOnly);
 	
 	QTextStream xml(&file);
 	xml.setCodec("UTF-8");
 
 	xml << "<!DOCTYPE NXClientLibSettings>\n";
+	xml << "<NXClientLibSettings>\n";
+
+	xml << "<option key=\"Connection Name\" value=\"" << escape(sessionData.sessionName) << "\"></option>\n";
+	xml << "<option key=\"Server Hostname\" value=\"" << escape(sessionData.serverHost) << "\"></option>\n";
+	xml << "<option key=\"Server Port\" value=\"" << escape(QString::number(sessionData.serverPort)) << "\"></option>\n";
+	xml << "<option key=\"Session Type\" value=\"" << escape(sessionData.sessionType) << "\"></option>\n";
+	xml << "<option key=\"Custom Session Command\" value=\"" << escape(sessionData.customCommand) << "\"></option>\n";
+	xml << "<option key=\"Disk Cache\" value=\"" << escape(QString::number(sessionData.cache)) << "\"></option>\n";
+	xml << "<option key=\"Image Cache\" value=\"" << escape(QString::number(sessionData.images)) << "\"></option>\n";
+	xml << "<option key=\"Link Type\" value=\"" << escape(sessionData.linkType) << "\"></option>\n";
 	
-	xml << "<option key=\"Connection Name\" value=\"" << escape(sessionData.sessionName) << "\" />\n";
-	xml << "<option key=\"Server Hostname\" value=\"" << escape(sessionData.serverHost) << "\" />\n";
-	xml << "<option key=\"Server Port\" value=\"" << escape(QString::number(sessionData.serverPort)) << "\" />\n";
-	xml << "<option key=\"Session Type\" value=\"" << escape(sessionData.sessionType) << "\" />\n";
-	xml << "<option key=\"Custom Session Command\" value=\"" << escape(sessionData.customCommand) << "\" />\n";
-	xml << "<option key=\"Disk Cache\" value=\"" << escape(QString::number(sessionData.cache)) << "\" />\n";
-	xml << "<option key=\"Image Cache\" value=\"" << escape(QString::number(sessionData.images)) << "\" />\n";
-	xml << "<option key=\"Link Type\" value=\"" << escape(sessionData.linkType) << "\" />\n";
-	
 	if (sessionData.render == true)
-		xml << "<option key=\"Use Render Extension\" value=\"True\" />\n";
+		xml << "<option key=\"Use Render Extension\" value=\"True\"></option>\n";
 	else
-		xml << "<option key=\"Use Render Extension\" value=\"False\" />\n";
+		xml << "<option key=\"Use Render Extension\" value=\"False\"></option>\n";
 	
 	if (sessionData.imageCompressionMethod == -1)
-		xml << "<option key=\"Image Compression Method\" value=\"JPEG\" />\n";
+		xml << "<option key=\"Image Compression Method\" value=\"JPEG\"></option>\n";
 	else if (sessionData.imageCompressionMethod == 2)
-		xml << "<option key=\"Image Compression Method\" value=\"PNG\" />\n";
+		xml << "<option key=\"Image Compression Method\" value=\"PNG\"></option>\n";
 	else if (sessionData.imageCompressionMethod == 0)
-		xml << "<option key=\"Image Compression Method\" value=\"Raw X11\" />\n";
+		xml << "<option key=\"Image Compression Method\" value=\"Raw X11\"></option>\n";
 	
-	xml << "<option key=\"JPEG Compression Level\" value=\"" << escape(QString::number(sessionData.imageCompressionLevel)) << "\" />\n";
-	xml << "<option key=\"Desktop Geometry\" value=\"" << escape(sessionData.geometry) << "\" />\n";
-	xml << "<option key=\"Keyboard Layout\" value=\"" << escape(sessionData.keyboard) << "\" />\n";
-	xml << "<option key=\"Keyboard Type\" value=\"" << escape(sessionData.kbtype) << "\" />\n";
+	xml << "<option key=\"JPEG Compression Level\" value=\"" << escape(QString::number(sessionData.imageCompressionLevel)) << "\"></option>\n";
+	xml << "<option key=\"Desktop Geometry\" value=\"" << escape(sessionData.geometry) << "\"></option>\n";
+	xml << "<option key=\"Keyboard Layout\" value=\"" << escape(sessionData.keyboard) << "\"></option>\n";
+	xml << "<option key=\"Keyboard Type\" value=\"" << escape(sessionData.kbtype) << "\"></option>\n";
 
 	if (sessionData.media == true)
-		xml << "<option key=\"Media\" value=\"True\" />\n";
+		xml << "<option key=\"Media\" value=\"True\"></option>\n";
 	else
-		xml << "<option key=\"Media\" value=\"False\" />\n";
+		xml << "<option key=\"Media\" value=\"False\"></option>\n";
 
-	xml << "<option key=\"Agent Server\" value=\"" << escape(sessionData.agentServer) << "\" />\n";
-	xml << "<option key=\"Agent User\" value=\"" << escape(sessionData.agentUser) << "\" />\n";
-	xml << "<option key=\"CUPS Port\" value=\"" << escape(QString::number(sessionData.cups)) << "\" />\n";
-	xml << "<option key=\"Authentication Key\" value=\"" << escape(sessionData.key) << "\" />\n";
+	xml << "<option key=\"Agent Server\" value=\"" << escape(sessionData.agentServer) << "\"></option>\n";
+	xml << "<option key=\"Agent User\" value=\"" << escape(sessionData.agentUser) << "\"></option>\n";
+	xml << "<option key=\"CUPS Port\" value=\"" << escape(QString::number(sessionData.cups)) << "\"></option>\n";
+	xml << "<option key=\"Authentication Key\" value=\"" << escape(sessionData.key) << "\"></option>\n";
 
 	if (sessionData.encryption == true)
-		xml << "<option key=\"Use SSL Tunnelling\" value=\"True\" />\n";
+		xml << "<option key=\"Use SSL Tunnelling\" value=\"True\"></option>\n";
 	else
-		xml << "<option key=\"Use SSL Tunnelling\" value=\"False\" />\n";
+		xml << "<option key=\"Use SSL Tunnelling\" value=\"False\"></option>\n";
 
 	if (sessionData.fullscreen == true)
-		xml << "<option key=\"Enable Fullscreen Desktop\" value=\"True\" />\n";
+		xml << "<option key=\"Enable Fullscreen Desktop\" value=\"True\"></option>\n";
 	else
-		xml << "<option key=\"Enable Fullscreen Desktop\" value=\"False\" />\n";
+		xml << "<option key=\"Enable Fullscreen Desktop\" value=\"False\"></option>\n";
 
 	xml << "</NXClientLibSettings>\n";
 

Modified: nxclientlib/nxwritexml.h
===================================================================
--- nxclientlib/nxwritexml.h	2006-08-16 02:41:16 UTC (rev 262)
+++ nxclientlib/nxwritexml.h	2006-08-16 05:02:15 UTC (rev 263)
@@ -29,7 +29,7 @@
 	public:
 		NXWriteXML();
 		~NXWriteXML();
-		void write(QFile);
+		void write(QString);
 		void setSessionData(NXConfigData data) { sessionData = data; };
 		QString escape(QString);
 	private:

Modified: nxclientlib/qtnx/qtnxsettings.cpp
===================================================================
--- nxclientlib/qtnx/qtnxsettings.cpp	2006-08-16 02:41:16 UTC (rev 262)
+++ nxclientlib/qtnx/qtnxsettings.cpp	2006-08-16 05:02:15 UTC (rev 263)
@@ -22,19 +22,24 @@
 
 #include "nxdata.h"
 #include "nxparsexml.h"
+#include "nxwritexml.h"
 
 QtNXSettings::QtNXSettings(QString sessionName) : QDialog()
 {
 	if (!sessionName.isEmpty())
-		fileName = QDir::homePath() + ".qtnx/" + sessionName + ".nxml";
+		fileName = QDir::homePath() + "/.qtnx/" + sessionName + ".nxml";
 	else
 		fileName = "";
 		
-	parseFile();
-	
 	ui_sd.setupUi(this);
 	ui_sd.sessionName->setText(sessionName);
+	
+	parseFile();
 
+	connect(ui_sd.resolution, SIGNAL(currentIndexChanged(QString)), this, SLOT(resolutionChanged(QString)));
+	connect(ui_sd.imageCompressionType, SIGNAL(currentIndexChanged(QString)), this, SLOT(compressionChanged(QString)));
+	connect(ui_sd.defaultKey, SIGNAL(stateChanged(int)), this, SLOT(keyChanged(int)));
+	connect(ui_sd.applyButton, SIGNAL(pressed()), this, SLOT(applyPressed()));
 }
 
 QtNXSettings::~QtNXSettings()
@@ -45,8 +50,8 @@
 {
 	if (!fileName.isEmpty()) {
 		NXParseXML handler;
-		handler.setSessionData(&config);
-	
+		handler.setData(&config);
+		
 		QFile file(fileName);
 		QXmlInputSource inputSource(&file);
 
@@ -54,17 +59,17 @@
 		reader.setContentHandler(&handler);
 		reader.setErrorHandler(&handler);
 		reader.parse(inputSource);
-
+		
 		ui_sd.hostname->setText(config.serverHost);
 		ui_sd.port->setValue(config.serverPort);
-
+		
 		if (config.key.isEmpty())
 			ui_sd.defaultKey->setChecked(true);
 		else {
 			ui_sd.defaultKey->setChecked(false);
 			ui_sd.setAuthKeyButton->setEnabled(true);
 		}
-
+		
 		if (config.sessionType == "unix-kde") {
 			ui_sd.platform->setCurrentIndex(ui_sd.platform->findText(tr("UNIX")));
 			ui_sd.type->setCurrentIndex(ui_sd.type->findText(tr("KDE")));
@@ -81,15 +86,15 @@
 		}
 
 		if (config.linkType == "modem")
-			ui_sd.link->setCurrentIndex(ui_sd.link->findText("Modem"));
+			ui_sd.link->setCurrentIndex(ui_sd.link->findText(tr("Modem")));
 		else if (config.linkType == "isdn")
-			ui_sd.link->setCurrentIndex(ui_sd.link->findText("ISDN"));
+			ui_sd.link->setCurrentIndex(ui_sd.link->findText(tr("ISDN")));
 		else if (config.linkType == "adsl")
-			ui_sd.link->setCurrentIndex(ui_sd.link->findText("ADSL"));
+			ui_sd.link->setCurrentIndex(ui_sd.link->findText(tr("ADSL")));
 		else if (config.linkType == "wan")
-			ui_sd.link->setCurrentIndex(ui_sd.link->findText("WAN"));
+			ui_sd.link->setCurrentIndex(ui_sd.link->findText(tr("WAN")));
 		else if (config.linkType == "lan")
-			ui_sd.link->setCurrentIndex(ui_sd.link->findText("LAN"));
+			ui_sd.link->setCurrentIndex(ui_sd.link->findText(tr("LAN")));
 
 		if (config.imageCompressionMethod == -1) {
 			ui_sd.imageCompressionType->setCurrentIndex(ui_sd.imageCompressionType->findText(tr("JPEG")));
@@ -100,11 +105,11 @@
 			ui_sd.imageCompressionType->setCurrentIndex(ui_sd.imageCompressionType->findText(tr("Raw X11")));
 
 		if (config.geometry == "640x480+0+0")
-			ui_sd.resolution->setCurrentIndex(ui_sd.resolution->findText(tr("640x480")));
+			ui_sd.resolution->setCurrentIndex(ui_sd.resolution->findText("640x480"));
 		else if (config.geometry == "800x600+0+0")
-			ui_sd.resolution->setCurrentIndex(ui_sd.resolution->findText(tr("640x480")));
+			ui_sd.resolution->setCurrentIndex(ui_sd.resolution->findText("640x480"));
 		else if (config.geometry == "1024x768+0+0")
-			ui_sd.resolution->setCurrentIndex(ui_sd.resolution->findText(tr("640x480")));
+			ui_sd.resolution->setCurrentIndex(ui_sd.resolution->findText("640x480"));
 		else {
 			if (config.fullscreen) {
 				ui_sd.resolution->setCurrentIndex(ui_sd.resolution->findText(tr("Fullscreen")));
@@ -120,6 +125,114 @@
 			}
 		}
 
+		ui_sd.encryption->setChecked(config.encryption);
+		ui_sd.memoryCache->setValue(config.cache);
+		ui_sd.diskCache->setValue(config.images);
+
 		ui_sd.render->setChecked(config.render);
 	}
 }
+
+void QtNXSettings::resolutionChanged(QString text)
+{
+	if (text == tr("Custom")) {
+		ui_sd.width->setEnabled(true);
+		ui_sd.height->setEnabled(true);
+	} else {
+		ui_sd.width->setEnabled(false);
+		ui_sd.height->setEnabled(false);
+	}
+}
+
+void QtNXSettings::compressionChanged(QString text)
+{
+	if (text == tr("JPEG")) {
+		ui_sd.imageQualityLevel->setEnabled(true);
+	} else {
+		ui_sd.imageQualityLevel->setEnabled(false);
+	}
+}
+
+void QtNXSettings::platformChanged(QString text)
+{
+}
+
+void QtNXSettings::typeChanged(QString text)
+{
+}
+
+void QtNXSettings::keyChanged(int state)
+{
+	if (state == Qt::Checked)
+		ui_sd.setAuthKeyButton->setEnabled(false);
+	else
+		ui_sd.setAuthKeyButton->setEnabled(true);
+}
+
+void QtNXSettings::applyPressed()
+{
+	QDir configDir(QDir::homePath() + "/.qtnx/");
+	configDir.mkpath(QDir::homePath() + "/.qtnx/");
+
+	config.sessionName = ui_sd.sessionName->text();
+	config.serverHost = ui_sd.hostname->text();
+	config.serverPort = ui_sd.port->value();
+
+	// TODO: Add keyboard selection support
+	config.keyboard = "defkeymap";
+	config.kbtype = "pc102/defkeymap";
+
+	if (ui_sd.platform->currentText() == tr("UNIX")) {
+		if (ui_sd.type->currentText() == tr("KDE"))
+			config.sessionType = "unix-kde";
+		else if (ui_sd.type->currentText() == tr("GNOME"))
+			config.sessionType = "unix-gnome";
+		else if (ui_sd.type->currentText() == tr("CDE"))
+			config.sessionType = "unix-cde";
+		else if (ui_sd.type->currentText() == tr("Custom"))
+			config.sessionType = "unix-application";
+	}
+	
+	if (ui_sd.link->currentText() == tr("Modem"))
+		config.linkType = "modem";
+	else if (ui_sd.link->currentText() == tr("ISDN"))
+		config.linkType = "isdn";
+	else if (ui_sd.link->currentText() == tr("ADSL"))
+		config.linkType = "adsl";
+	else if (ui_sd.link->currentText() == tr("WAN"))
+		config.linkType = "wan";
+	else if (ui_sd.link->currentText() == tr("LAN"))
+		config.linkType = "lan";
+		
+	if (ui_sd.imageCompressionType->currentText() == tr("JPEG")) {
+		config.imageCompressionMethod = -1;
+		config.imageCompressionLevel = ui_sd.imageQualityLevel->value();
+	} else if (ui_sd.imageCompressionType->currentText() == tr("PNG"))
+		config.imageCompressionMethod = 2;
+	else if (ui_sd.imageCompressionType->currentText() == tr("Raw X11"))
+		config.imageCompressionMethod = 0;
+
+	if (ui_sd.resolution->currentText() == tr("Fullscreen"))
+		config.fullscreen = true;
+	else if (ui_sd.resolution->currentText() == tr("Custom")) {
+		config.geometry = QString::number(ui_sd.width->value()) + "x" + QString::number(ui_sd.height->value()) + "+0+0";
+	} else
+		config.geometry = ui_sd.resolution->currentText() + "+0+0";
+
+	if (ui_sd.encryption->checkState() == Qt::Checked)
+		config.encryption = true;
+	else
+		config.encryption = false;
+		
+	config.cache = ui_sd.memoryCache->value();
+	config.images = ui_sd.diskCache->value();
+
+	if (ui_sd.render->checkState() == Qt::Checked)
+		config.render = true;
+	else
+		config.render = false;
+
+	NXWriteXML writeData;
+	writeData.setSessionData(config);
+	writeData.write(QDir::homePath() + "/.qtnx/" + ui_sd.sessionName->text() + ".nxml");
+}

Modified: nxclientlib/qtnx/qtnxsettings.h
===================================================================
--- nxclientlib/qtnx/qtnxsettings.h	2006-08-16 02:41:16 UTC (rev 262)
+++ nxclientlib/qtnx/qtnxsettings.h	2006-08-16 05:02:15 UTC (rev 263)
@@ -31,6 +31,14 @@
 		QtNXSettings(QString);
 		~QtNXSettings();
 		void parseFile();
+	public slots:
+		void resolutionChanged(QString);
+		void compressionChanged(QString);
+		void platformChanged(QString);
+		void typeChanged(QString);
+		void keyChanged(int);
+		void applyPressed();
+		void setData(NXConfigData data) { config = data; };
 	private:
 		Ui::SettingsDialog ui_sd;
 		NXConfigData config;

Modified: nxclientlib/qtnx/qtnxwindow.cpp
===================================================================
--- nxclientlib/qtnx/qtnxwindow.cpp	2006-08-16 02:41:16 UTC (rev 262)
+++ nxclientlib/qtnx/qtnxwindow.cpp	2006-08-16 05:02:15 UTC (rev 263)
@@ -45,10 +45,9 @@
 
 	connectionMenu->addAction(tr("Connect..."), this, SLOT(startConnect()));
 
-	QDir dir(QDir::homePath()+".qtnx","*.nxml");
+	QDir dir(QDir::homePath()+"/.qtnx","*.nxml");
 	for (unsigned int i=0;i<dir.count();i++) {
 		QString conn=dir[i];
-		if (conn.compare("nxclient.conf")==0) continue;
 		ui_lg.session->addItem(conn.left(conn.length()-5));
 	}
 	ui_lg.session->addItem(tr("Create new session"));
@@ -68,8 +67,7 @@
 // 	QX11Info info;
 
 	NXParseXML handler;
-	handler.setSessionData(&config);
-	
+
 	QFile file(QDir::homePath() + ".qtnx/" + ui_lg.session->currentText() + ".nxml");
 	QXmlInputSource inputSource(&file);
 



From gwright at mail.berlios.de  Wed Aug 16 21:56:14 2006
From: gwright at mail.berlios.de (gwright at BerliOS)
Date: Wed, 16 Aug 2006 21:56:14 +0200
Subject: [Freenx-cvs] r264 - nxclientlib/qtnx
Message-ID: <200608161956.k7GJuEcC030493@sheep.berlios.de>

Author: gwright
Date: 2006-08-16 21:56:14 +0200 (Wed, 16 Aug 2006)
New Revision: 264

Modified:
   nxclientlib/qtnx/qtnxsettings.cpp
   nxclientlib/qtnx/qtnxsettings.h
   nxclientlib/qtnx/qtnxwindow.cpp
   nxclientlib/qtnx/settingsdialog.ui
Log:
Connection now works, various config fixes


Modified: nxclientlib/qtnx/qtnxsettings.cpp
===================================================================
--- nxclientlib/qtnx/qtnxsettings.cpp	2006-08-16 05:02:15 UTC (rev 263)
+++ nxclientlib/qtnx/qtnxsettings.cpp	2006-08-16 19:56:14 UTC (rev 264)
@@ -40,6 +40,8 @@
 	connect(ui_sd.imageCompressionType, SIGNAL(currentIndexChanged(QString)), this, SLOT(compressionChanged(QString)));
 	connect(ui_sd.defaultKey, SIGNAL(stateChanged(int)), this, SLOT(keyChanged(int)));
 	connect(ui_sd.applyButton, SIGNAL(pressed()), this, SLOT(applyPressed()));
+	connect(ui_sd.okButton, SIGNAL(pressed()), this, SLOT(okPressed()));
+	connect(ui_sd.cancelButton, SIGNAL(pressed()), this, SLOT(cancelPressed()));
 }
 
 QtNXSettings::~QtNXSettings()
@@ -99,6 +101,7 @@
 		if (config.imageCompressionMethod == -1) {
 			ui_sd.imageCompressionType->setCurrentIndex(ui_sd.imageCompressionType->findText(tr("JPEG")));
 			ui_sd.imageQualityLevel->setValue(config.imageCompressionLevel);
+			ui_sd.imageQualityLevel->setEnabled(true);
 		} else if (config.imageCompressionMethod == 2)
 			ui_sd.imageCompressionType->setCurrentIndex(ui_sd.imageCompressionType->findText(tr("PNG")));
 		else if (config.imageCompressionMethod == 0)
@@ -169,6 +172,18 @@
 		ui_sd.setAuthKeyButton->setEnabled(true);
 }
 
+void QtNXSettings::cancelPressed()
+{
+	close();
+}
+
+void QtNXSettings::okPressed()
+{
+	applyPressed();
+	emit closing();
+	close();
+}
+
 void QtNXSettings::applyPressed()
 {
 	QDir configDir(QDir::homePath() + "/.qtnx/");

Modified: nxclientlib/qtnx/qtnxsettings.h
===================================================================
--- nxclientlib/qtnx/qtnxsettings.h	2006-08-16 05:02:15 UTC (rev 263)
+++ nxclientlib/qtnx/qtnxsettings.h	2006-08-16 19:56:14 UTC (rev 264)
@@ -38,7 +38,11 @@
 		void typeChanged(QString);
 		void keyChanged(int);
 		void applyPressed();
+		void cancelPressed();
+		void okPressed();
 		void setData(NXConfigData data) { config = data; };
+	signals:
+		void closing();
 	private:
 		Ui::SettingsDialog ui_sd;
 		NXConfigData config;

Modified: nxclientlib/qtnx/qtnxwindow.cpp
===================================================================
--- nxclientlib/qtnx/qtnxwindow.cpp	2006-08-16 05:02:15 UTC (rev 263)
+++ nxclientlib/qtnx/qtnxwindow.cpp	2006-08-16 19:56:14 UTC (rev 264)
@@ -18,8 +18,10 @@
 #include "qtnxwindow.h"
 
 #include <QApplication>
+#include <QDesktopWidget>
 #include <QDir>
 #include <QFile>
+#include <QX11Info>
 
 QtNXWindow::QtNXWindow() : QMainWindow()
 {
@@ -63,12 +65,13 @@
 
 void QtNXWindow::startConnect()
 {
-// 	QDesktopWidget dw;
-// 	QX11Info info;
+	QDesktopWidget dw;
+	QX11Info info;
 
 	NXParseXML handler;
+	handler.setData(&config);
 
-	QFile file(QDir::homePath() + ".qtnx/" + ui_lg.session->currentText() + ".nxml");
+	QFile file(QDir::homePath() + "/.qtnx/" + ui_lg.session->currentText() + ".nxml");
 	QXmlInputSource inputSource(&file);
 
 	QXmlSimpleReader reader;
@@ -76,62 +79,41 @@
 	reader.setErrorHandler(&handler);
 	reader.parse(inputSource);
 
-/*	session->sessionName = ui_mw.session_name->text();
-	session->sessionType = ui_mw.session_type->currentText();
-	session->cache = ui_mw.cache->currentText().toInt();
-	session->images = ui_mw.images->currentText().toInt();
-	session->linkType = ui_mw.link_type->currentText();
-	
-	if (ui_mw.render->checkState() == 0)
-		session->render = false;
-	if (ui_mw.render->checkState() == 2)
-		session->render = true;
-	
-	session->backingstore = "when_requested";
+	session.sessionName = config.sessionName;
+	session.sessionType = config.sessionType;
+	session.cache = config.cache;
+	session.images = config.images;
+	session.linkType = config.linkType;
+	session.render = config.render;
+	session.backingstore = "when_requested";
+	session.imageCompressionMethod = config.imageCompressionMethod;
+	session.imageCompressionLevel = config.imageCompressionLevel;
+	session.geometry = config.geometry;
+	session.keyboard = "defkeymap";
+	session.kbtype = "pc102/defkeymap";
+	session.media = config.media;
+	session.agentServer = config.agentServer;
+	session.agentUser = config.agentUser;
+	session.agentPass = config.agentPass;
+	session.cups = config.cups;
+	if (!config.key.isEmpty())
+		session.key = config.key;
+	else
+		session.key = "default";
 
-	if (ui_mw.image_compression->currentText() == "JPEG")
-		session->imageCompressionMethod = -1;
-	if (ui_mw.image_compression->currentText() == "RAW")
-		session->imageCompressionMethod = 0;
-	if (ui_mw.image_compression->currentText() == "PNG")
-		session->imageCompressionMethod = 2;
-		
-	session->imageCompressionLevel = ui_mw.jpeg_quality->value();
+	if (config.sessionType == "unix-application")
+		session.customCommand = config.customCommand;
 
-	if (ui_mw.resolution->currentText() == "640x480")
-		session->geometry = "640x480+0+0";
-	if (ui_mw.resolution->currentText() == "800x600")
-		session->geometry = "800x600+0+0";
-	if (ui_mw.resolution->currentText() == "1024x768")
-		session->geometry = "1024x768+0+0";
-	if (ui_mw.resolution->currentText() == "1600x1200")
-		session->geometry = "1600x1200+0+0";
-
-	session->keyboard = "defkeymap";
-	session->kbtype = "pc102/defkeymap";
-	
-	session->media = false;
-	session->agentServer = ui_mw.rdp_server->text();
-	session->agentUser = ui_mw.rdp_username->text();
-	session->agentPass = ui_mw.rdp_password->text();
-	if (QApplication::desktop()->paintEngine()->hasFeature(QPaintEngine::Antialiasing))
-		m_lib.setRender(true);
+	if (config.encryption == false)
+		nxClient.invokeNXSSH(session.key , config.serverHost, false);
 	else
-		m_lib.setRender(false);
+		nxClient.invokeNXSSH(session.key , config.serverHost, true);
 		
-	// session->screenInfo = QString::number(dw.screenGeometry(this).width()) + "x" + QString::number(dw.screenGeometry(this).height()) + "x" + QString::number(info.depth()) + "render";
-	session->suspended = false;
-
-	if (ui_mw.encryption->checkState() == 0)
-		m_lib.invokeNXSSH("default" , ui_mw.server->text(), false);
-	if (ui_mw.encryption->checkState() == 2)
-		m_lib.invokeNXSSH("default" , ui_mw.server->text(), true);
-		
-	m_lib.setUsername(ui_mw.username->text());
-	m_lib.setPassword(ui_mw.password->text());
-	m_lib.setResolution(dw.screenGeometry(this).width(), dw.screenGeometry(this).height());
-	m_lib.setDepth(info.depth());
-	m_lib.setSession(session);*/
+	nxClient.setUsername(ui_lg.username->text());
+	nxClient.setPassword(ui_lg.password->text());
+	nxClient.setResolution(dw.screenGeometry(this).width(), dw.screenGeometry(this).height());
+	nxClient.setDepth(info.depth());
+	nxClient.setSession(&session);
 }
 
 void QtNXWindow::configure()

Modified: nxclientlib/qtnx/settingsdialog.ui
===================================================================
--- nxclientlib/qtnx/settingsdialog.ui	2006-08-16 05:02:15 UTC (rev 263)
+++ nxclientlib/qtnx/settingsdialog.ui	2006-08-16 19:56:14 UTC (rev 264)
@@ -3,7 +3,7 @@
  <comment></comment>
  <exportmacro></exportmacro>
  <class>SettingsDialog</class>
- <widget class="QWidget" name="SettingsDialog" >
+ <widget class="QDialog" name="SettingsDialog" >
   <property name="geometry" >
    <rect>
     <x>0</x>
@@ -13,8 +13,11 @@
    </rect>
   </property>
   <property name="windowTitle" >
-   <string>Form</string>
+   <string>Dialog</string>
   </property>
+  <property name="modal" >
+   <bool>true</bool>
+  </property>
   <layout class="QVBoxLayout" >
    <property name="margin" >
     <number>9</number>
@@ -363,7 +366,7 @@
         </widget>
        </item>
        <item>
-        <widget class="QGroupBox" name="groupBox_3" >
+        <widget class="QGroupBox" name="groupBox" >
          <property name="title" >
           <string>Geometry</string>
          </property>



From gwright at mail.berlios.de  Wed Aug 16 22:14:24 2006
From: gwright at mail.berlios.de (gwright at BerliOS)
Date: Wed, 16 Aug 2006 22:14:24 +0200
Subject: [Freenx-cvs] r265 - nxclientlib
Message-ID: <200608162014.k7GKEONx032385@sheep.berlios.de>

Author: gwright
Date: 2006-08-16 22:14:24 +0200 (Wed, 16 Aug 2006)
New Revision: 265

Modified:
   nxclientlib/nxclientlib.cpp
   nxclientlib/nxsession.cpp
Log:
Fix some NX servers which send the final message via stdout (not quite sure how/why)


Modified: nxclientlib/nxclientlib.cpp
===================================================================
--- nxclientlib/nxclientlib.cpp	2006-08-16 19:56:14 UTC (rev 264)
+++ nxclientlib/nxclientlib.cpp	2006-08-16 20:14:24 UTC (rev 265)
@@ -151,6 +151,14 @@
 	QStringList messages = splitString(message);
 	QStringList::const_iterator i;
 
+	// On some connections this is sent via stdout instead of stderr?
+	if (proxyData.encrypted && isFinished && message.contains("NX> 999 Bye")) {
+		QString returnMessage;
+		returnMessage = "NX> 299 Switching connection to: ";
+		returnMessage += proxyData.proxyIP + ":" + QString::number(proxyData.port) + " cookie: " + proxyData.cookie + "\n";
+		write(returnMessage);
+	}
+
 	for (i = messages.constBegin(); i != messages.constEnd(); ++i) {
 		if ((*i).contains("Password"))
 			password = true;

Modified: nxclientlib/nxsession.cpp
===================================================================
--- nxclientlib/nxsession.cpp	2006-08-16 19:56:14 UTC (rev 264)
+++ nxclientlib/nxsession.cpp	2006-08-16 20:14:24 UTC (rev 265)
@@ -219,16 +219,18 @@
 	QStringList sessions;
 
 	for (i = 0; i < rawdata.size(); ++i) {
-		if (rawdata.at(i) == "------- ---------------- -------------------------------- -------- ----- -------------- --------- ----------------------") {
+		if (rawdata.at(i).contains("-------")) {
 			at = i;
 		}
 	}
 
-	for (i = at+1; i < rawdata.size(); ++i) {
-		if (!rawdata.at(i).contains("NX> 148"))
-			sessions << rawdata.at(i);
+	if (rawdata.size() < at+1) {
+		for (i = at+1; i < rawdata.size(); ++i) {
+			if (!rawdata.at(i).contains("NX> 148"))
+				sessions << rawdata.at(i);
+		}
 	}
-
+	
 	QList<QStringList> rawsessions;
 
 	for (i = 0; i < sessions.size(); ++i)



From gwright at mail.berlios.de  Wed Aug 16 22:21:00 2006
From: gwright at mail.berlios.de (gwright at BerliOS)
Date: Wed, 16 Aug 2006 22:21:00 +0200
Subject: [Freenx-cvs] r266 - nxclientlib/qtnx
Message-ID: <200608162021.k7GKL0x4000273@sheep.berlios.de>

Author: gwright
Date: 2006-08-16 22:21:00 +0200 (Wed, 16 Aug 2006)
New Revision: 266

Modified:
   nxclientlib/qtnx/qtnxsettings.cpp
   nxclientlib/qtnx/qtnxwindow.cpp
Log:
Fix fullscreen mode


Modified: nxclientlib/qtnx/qtnxsettings.cpp
===================================================================
--- nxclientlib/qtnx/qtnxsettings.cpp	2006-08-16 20:14:24 UTC (rev 265)
+++ nxclientlib/qtnx/qtnxsettings.cpp	2006-08-16 20:21:00 UTC (rev 266)
@@ -110,9 +110,9 @@
 		if (config.geometry == "640x480+0+0")
 			ui_sd.resolution->setCurrentIndex(ui_sd.resolution->findText("640x480"));
 		else if (config.geometry == "800x600+0+0")
-			ui_sd.resolution->setCurrentIndex(ui_sd.resolution->findText("640x480"));
+			ui_sd.resolution->setCurrentIndex(ui_sd.resolution->findText("800x600"));
 		else if (config.geometry == "1024x768+0+0")
-			ui_sd.resolution->setCurrentIndex(ui_sd.resolution->findText("640x480"));
+			ui_sd.resolution->setCurrentIndex(ui_sd.resolution->findText("1024x768"));
 		else {
 			if (config.fullscreen) {
 				ui_sd.resolution->setCurrentIndex(ui_sd.resolution->findText(tr("Fullscreen")));
@@ -230,9 +230,12 @@
 	if (ui_sd.resolution->currentText() == tr("Fullscreen"))
 		config.fullscreen = true;
 	else if (ui_sd.resolution->currentText() == tr("Custom")) {
+		config.fullscreen = false;
 		config.geometry = QString::number(ui_sd.width->value()) + "x" + QString::number(ui_sd.height->value()) + "+0+0";
-	} else
+	} else {
+		config.fullscreen = false;
 		config.geometry = ui_sd.resolution->currentText() + "+0+0";
+	}
 
 	if (ui_sd.encryption->checkState() == Qt::Checked)
 		config.encryption = true;

Modified: nxclientlib/qtnx/qtnxwindow.cpp
===================================================================
--- nxclientlib/qtnx/qtnxwindow.cpp	2006-08-16 20:14:24 UTC (rev 265)
+++ nxclientlib/qtnx/qtnxwindow.cpp	2006-08-16 20:21:00 UTC (rev 266)
@@ -96,6 +96,8 @@
 	session.agentUser = config.agentUser;
 	session.agentPass = config.agentPass;
 	session.cups = config.cups;
+	session.fullscreen = config.fullscreen;
+	
 	if (!config.key.isEmpty())
 		session.key = config.key;
 	else



From gwright at mail.berlios.de  Wed Aug 16 22:38:04 2006
From: gwright at mail.berlios.de (gwright at BerliOS)
Date: Wed, 16 Aug 2006 22:38:04 +0200
Subject: [Freenx-cvs] r267 - nxclientlib/qtnx
Message-ID: <200608162038.k7GKc43d001972@sheep.berlios.de>

Author: gwright
Date: 2006-08-16 22:38:03 +0200 (Wed, 16 Aug 2006)
New Revision: 267

Modified:
   nxclientlib/qtnx/qtnxsettings.cpp
   nxclientlib/qtnx/qtnxsettings.h
   nxclientlib/qtnx/qtnxwindow.cpp
   nxclientlib/qtnx/qtnxwindow.h
Log:
Update combobox when sessions are added


Modified: nxclientlib/qtnx/qtnxsettings.cpp
===================================================================
--- nxclientlib/qtnx/qtnxsettings.cpp	2006-08-16 20:21:00 UTC (rev 266)
+++ nxclientlib/qtnx/qtnxsettings.cpp	2006-08-16 20:38:03 UTC (rev 267)
@@ -26,6 +26,8 @@
 
 QtNXSettings::QtNXSettings(QString sessionName) : QDialog()
 {
+	filedesc = sessionName;
+	
 	if (!sessionName.isEmpty())
 		fileName = QDir::homePath() + "/.qtnx/" + sessionName + ".nxml";
 	else
@@ -186,6 +188,12 @@
 
 void QtNXSettings::applyPressed()
 {
+	// File has been renamed, remove old one
+	if (filedesc != ui_sd.sessionName->text()) {
+		QFile temp(QDir::homePath() + "/.qtnx/" + filedesc + ".nxml");
+		temp.remove();
+	}
+	
 	QDir configDir(QDir::homePath() + "/.qtnx/");
 	configDir.mkpath(QDir::homePath() + "/.qtnx/");
 

Modified: nxclientlib/qtnx/qtnxsettings.h
===================================================================
--- nxclientlib/qtnx/qtnxsettings.h	2006-08-16 20:21:00 UTC (rev 266)
+++ nxclientlib/qtnx/qtnxsettings.h	2006-08-16 20:38:03 UTC (rev 267)
@@ -47,6 +47,7 @@
 		Ui::SettingsDialog ui_sd;
 		NXConfigData config;
 		QString fileName;
+		QString filedesc;
 
 };
 

Modified: nxclientlib/qtnx/qtnxwindow.cpp
===================================================================
--- nxclientlib/qtnx/qtnxwindow.cpp	2006-08-16 20:21:00 UTC (rev 266)
+++ nxclientlib/qtnx/qtnxwindow.cpp	2006-08-16 20:38:03 UTC (rev 267)
@@ -124,6 +124,22 @@
 		settingsDialog = new QtNXSettings("");
 	else
 		settingsDialog = new QtNXSettings(ui_lg.session->currentText());
-		
+
+	connect(settingsDialog, SIGNAL(closing()), this, SLOT(configureClosed()));
+
 	settingsDialog->show();
 }
+
+void QtNXWindow::configureClosed()
+{
+	while (ui_lg.session->count() != 0) {
+		ui_lg.session->removeItem(0);
+	}
+
+	QDir dir(QDir::homePath()+"/.qtnx","*.nxml");
+	for (unsigned int i=0;i<dir.count();i++) {
+		QString conn=dir[i];
+		ui_lg.session->addItem(conn.left(conn.length()-5));
+	}
+	ui_lg.session->addItem(tr("Create new session"));
+}
\ No newline at end of file

Modified: nxclientlib/qtnx/qtnxwindow.h
===================================================================
--- nxclientlib/qtnx/qtnxwindow.h	2006-08-16 20:21:00 UTC (rev 266)
+++ nxclientlib/qtnx/qtnxwindow.h	2006-08-16 20:38:03 UTC (rev 267)
@@ -39,6 +39,7 @@
 	public slots:
 		void startConnect();
 		void configure();
+		void configureClosed();
 	private:
 		Ui::LoginDialog ui_lg;
 



From gwright at mail.berlios.de  Thu Aug 17 00:10:40 2006
From: gwright at mail.berlios.de (gwright at BerliOS)
Date: Thu, 17 Aug 2006 00:10:40 +0200
Subject: [Freenx-cvs] r268 - in nxclientlib: . qtnx
Message-ID: <200608162210.k7GMAeDe011326@sheep.berlios.de>

Author: gwright
Date: 2006-08-17 00:10:38 +0200 (Thu, 17 Aug 2006)
New Revision: 268

Modified:
   nxclientlib/nxclientlib.cpp
   nxclientlib/nxclientlib.h
   nxclientlib/nxsession.cpp
   nxclientlib/nxsession.h
   nxclientlib/qtnx/qtnx.pro
   nxclientlib/qtnx/qtnxwindow.cpp
   nxclientlib/qtnx/qtnxwindow.h
   nxclientlib/qtnx/sessionsdialog.ui
Log:
And session resume works!


Modified: nxclientlib/nxclientlib.cpp
===================================================================
--- nxclientlib/nxclientlib.cpp	2006-08-16 20:38:03 UTC (rev 267)
+++ nxclientlib/nxclientlib.cpp	2006-08-16 22:10:38 UTC (rev 268)
@@ -228,6 +228,7 @@
 void NXClientLib::setSession(NXSessionData *nxSession)
 {
 	session.setSession(nxSession);
+	write(session.parseSSH("NX> 105"));
 }
 
 QString NXClientLib::parseSSH(QString message)
@@ -249,6 +250,7 @@
 
 	if (message.contains("NX> 710 Session status: running")) {
 		invokeProxy();
+		session.wipeSessions();
 		returnMessage = "bye\n";
 	}
 	

Modified: nxclientlib/nxclientlib.h
===================================================================
--- nxclientlib/nxclientlib.h	2006-08-16 20:38:03 UTC (rev 267)
+++ nxclientlib/nxclientlib.h	2006-08-16 22:10:38 UTC (rev 268)
@@ -64,6 +64,7 @@
 		void setSession(NXSessionData *);
 
 		void invokeProxy();
+		
 		QString parseSSH(QString);
 	public slots:
 		void processStarted();

Modified: nxclientlib/nxsession.cpp
===================================================================
--- nxclientlib/nxsession.cpp	2006-08-16 20:38:03 UTC (rev 267)
+++ nxclientlib/nxsession.cpp	2006-08-16 22:10:38 UTC (rev 268)
@@ -113,7 +113,8 @@
 		case LIST_SESSIONS:
 			if (response == 105) {
 				// Get a list of the available sessions on the server
-				returnMessage = "listsession --user=\"" + nxUsername + "\" --status=\"suspended,running\" --geometry=\"" + xRes + "x" + yRes + renderSet + "\" --type=\"" + type + "\"";
+				returnMessage = "listsession --user=\"" + nxUsername +
+				"\" --status=\"suspended,running\" --geometry=\"" + xRes + "x" + yRes + renderSet + "\" --type=\"" + type + "\"";
 				stage++;
 			}
 			break;
@@ -224,20 +225,20 @@
 		}
 	}
 
-	if (rawdata.size() < at+1) {
+//	if (rawdata.size() < at+1) {
 		for (i = at+1; i < rawdata.size(); ++i) {
 			if (!rawdata.at(i).contains("NX> 148"))
 				sessions << rawdata.at(i);
 		}
-	}
+//	}
 	
 	QList<QStringList> rawsessions;
-
+	
 	for (i = 0; i < sessions.size(); ++i)
 		rawsessions.append(sessions.at(i).simplified().split(' '));
 
 	NXResumeData resData;
-
+	
 	for (i = 0; i < rawsessions.size(); ++i) {
 		resData.display = rawsessions.at(i).at(0).toInt();
 		resData.sessionType = rawsessions.at(i).at(1);
@@ -258,6 +259,12 @@
 	stage++;
 }
 
+void NXSession::wipeSessions()
+{
+	while (!runningSessions.isEmpty()) {
+		runningSessions.removeFirst();
+	}
+}
 
 QString NXSession::generateCookie()
 {

Modified: nxclientlib/nxsession.h
===================================================================
--- nxclientlib/nxsession.h	2006-08-16 20:38:03 UTC (rev 267)
+++ nxclientlib/nxsession.h	2006-08-16 22:10:38 UTC (rev 268)
@@ -50,6 +50,8 @@
 		void setSession(NXSessionData *);
 		void setEncryption(bool enc) { encryption = enc; };
 		void resetSession();
+
+		void wipeSessions();
 		
 		QString generateCookie();
 	signals:

Modified: nxclientlib/qtnx/qtnx.pro
===================================================================
--- nxclientlib/qtnx/qtnx.pro	2006-08-16 20:38:03 UTC (rev 267)
+++ nxclientlib/qtnx/qtnx.pro	2006-08-16 22:10:38 UTC (rev 268)
@@ -4,9 +4,9 @@
 
 FORMS = settingsdialog.ui logindialog.ui sessionsdialog.ui
 
-SOURCES = main.cpp qtnxwindow.cpp qtnxsettings.cpp
+SOURCES = main.cpp qtnxwindow.cpp qtnxsettings.cpp qtnxsessions.cpp
 
-HEADERS = qtnxwindow.h qtnxsettings.h
+HEADERS = qtnxwindow.h qtnxsettings.h qtnxsessions.h
 
 INCLUDEPATH	+= $(QTDIR)/include . ..
 

Modified: nxclientlib/qtnx/qtnxwindow.cpp
===================================================================
--- nxclientlib/qtnx/qtnxwindow.cpp	2006-08-16 20:38:03 UTC (rev 267)
+++ nxclientlib/qtnx/qtnxwindow.cpp	2006-08-16 22:10:38 UTC (rev 268)
@@ -115,7 +115,9 @@
 	nxClient.setPassword(ui_lg.password->text());
 	nxClient.setResolution(dw.screenGeometry(this).width(), dw.screenGeometry(this).height());
 	nxClient.setDepth(info.depth());
-	nxClient.setSession(&session);
+	connect(&nxClient, SIGNAL(resumeSessions(QList<NXResumeData>)), this, SLOT(loadResumeDialog(QList<NXResumeData>)));
+
+	//nxClient.setSession(&session);
 }
 
 void QtNXWindow::configure()
@@ -142,4 +144,25 @@
 		ui_lg.session->addItem(conn.left(conn.length()-5));
 	}
 	ui_lg.session->addItem(tr("Create new session"));
-}
\ No newline at end of file
+}
+
+void QtNXWindow::loadResumeDialog(QList<NXResumeData> data)
+{
+	sessionsDialog = new QtNXSessions(data);
+	sessionsDialog->show();
+
+	connect(sessionsDialog, SIGNAL(newPressed()), this, SLOT(resumeNewPressed()));
+	connect(sessionsDialog, SIGNAL(resumePressed(QString)), this, SLOT(resumeResumePressed(QString)));
+}
+
+void QtNXWindow::resumeNewPressed()
+{
+	nxClient.setSession(&session);
+}
+
+void QtNXWindow::resumeResumePressed(QString id)
+{
+	session.id = id;
+	session.suspended = true;
+	nxClient.setSession(&session);
+}

Modified: nxclientlib/qtnx/qtnxwindow.h
===================================================================
--- nxclientlib/qtnx/qtnxwindow.h	2006-08-16 20:38:03 UTC (rev 267)
+++ nxclientlib/qtnx/qtnxwindow.h	2006-08-16 22:10:38 UTC (rev 268)
@@ -26,6 +26,7 @@
 #include "nxdata.h"
 #include "nxparsexml.h"
 
+#include "qtnxsessions.h"
 #include "qtnxsettings.h"
 
 #include "ui_logindialog.h"
@@ -40,6 +41,9 @@
 		void startConnect();
 		void configure();
 		void configureClosed();
+		void loadResumeDialog(QList<NXResumeData>);
+		void resumeNewPressed();
+		void resumeResumePressed(QString);
 	private:
 		Ui::LoginDialog ui_lg;
 
@@ -49,6 +53,7 @@
 		NXClientLib nxClient;
 		
 		QtNXSettings *settingsDialog;
+		QtNXSessions *sessionsDialog;
 		
 		QMenu *fileMenu;
 		QMenu *connectionMenu;

Modified: nxclientlib/qtnx/sessionsdialog.ui
===================================================================
--- nxclientlib/qtnx/sessionsdialog.ui	2006-08-16 20:38:03 UTC (rev 267)
+++ nxclientlib/qtnx/sessionsdialog.ui	2006-08-16 22:10:38 UTC (rev 268)
@@ -3,17 +3,17 @@
  <comment></comment>
  <exportmacro></exportmacro>
  <class>SessionsDialog</class>
- <widget class="QWidget" name="SessionsDialog" >
+ <widget class="QDialog" name="SessionsDialog" >
   <property name="geometry" >
    <rect>
     <x>0</x>
     <y>0</y>
-    <width>746</width>
-    <height>278</height>
+    <width>725</width>
+    <height>260</height>
    </rect>
   </property>
   <property name="windowTitle" >
-   <string>Form</string>
+   <string>Dialog</string>
   </property>
   <layout class="QVBoxLayout" >
    <property name="margin" >
@@ -23,10 +23,7 @@
     <number>6</number>
    </property>
    <item>
-    <widget class="QTableWidget" name="sessionsList" >
-     <property name="sortingEnabled" >
-      <bool>false</bool>
-     </property>
+    <widget class="QTreeWidget" name="sessionsList" >
      <column>
       <property name="text" >
        <string>Display</string>
@@ -44,11 +41,6 @@
      </column>
      <column>
       <property name="text" >
-       <string>New Column</string>
-      </property>
-     </column>
-     <column>
-      <property name="text" >
        <string>Colour Depth</string>
       </property>
      </column>



From gwright at mail.berlios.de  Thu Aug 17 00:21:59 2006
From: gwright at mail.berlios.de (gwright at BerliOS)
Date: Thu, 17 Aug 2006 00:21:59 +0200
Subject: [Freenx-cvs] r269 - nxclientlib/qtnx
Message-ID: <200608162221.k7GMLxon013257@sheep.berlios.de>

Author: gwright
Date: 2006-08-17 00:21:59 +0200 (Thu, 17 Aug 2006)
New Revision: 269

Modified:
   nxclientlib/qtnx/qtnxwindow.cpp
Log:
Fixes.


Modified: nxclientlib/qtnx/qtnxwindow.cpp
===================================================================
--- nxclientlib/qtnx/qtnxwindow.cpp	2006-08-16 22:10:38 UTC (rev 268)
+++ nxclientlib/qtnx/qtnxwindow.cpp	2006-08-16 22:21:59 UTC (rev 269)
@@ -148,6 +148,7 @@
 
 void QtNXWindow::loadResumeDialog(QList<NXResumeData> data)
 {
+	delete sessionsDialog;
 	sessionsDialog = new QtNXSessions(data);
 	sessionsDialog->show();
 



From gwright at mail.berlios.de  Thu Aug 17 00:31:37 2006
From: gwright at mail.berlios.de (gwright at BerliOS)
Date: Thu, 17 Aug 2006 00:31:37 +0200
Subject: [Freenx-cvs] r270 - in nxclientlib: . qtnx
Message-ID: <200608162231.k7GMVbZC014775@sheep.berlios.de>

Author: gwright
Date: 2006-08-17 00:31:35 +0200 (Thu, 17 Aug 2006)
New Revision: 270

Modified:
   nxclientlib/nxclientlib.cpp
   nxclientlib/nxclientlib.h
   nxclientlib/nxsession.cpp
   nxclientlib/nxsession.h
   nxclientlib/qtnx/qtnxwindow.cpp
   nxclientlib/qtnx/qtnxwindow.h
Log:
Looks like I broke starting a new session without suspended ones.


Modified: nxclientlib/nxclientlib.cpp
===================================================================
--- nxclientlib/nxclientlib.cpp	2006-08-16 22:21:59 UTC (rev 269)
+++ nxclientlib/nxclientlib.cpp	2006-08-16 22:31:35 UTC (rev 270)
@@ -35,6 +35,8 @@
 	connect(&session, SIGNAL(loginFailed()), this, SLOT(failedLogin()));
 	connect(&session, SIGNAL(finished()), this, SLOT(finished()));
 	connect(&session, SIGNAL(sessionsSignal(QList<NXResumeData>)), this, SLOT(suspendedSessions(QList<NXResumeData>)));
+	connect(&session, SIGNAL(noSessions()), this, SLOT(noSuspendedSessions()));
+	
 	connect(&nxproxyProcess, SIGNAL(finished(int, QProcess::ExitStatus)), this, SLOT(reset()));
 }
 
@@ -281,3 +283,8 @@
 	arguments << "-S" << "options=" + options.fileName() + ":" + QString::number(proxyData.display);
 	nxproxyProcess.start(NXPROXY_BIN, arguments);
 }
+
+void NXClientLib::noSuspendedSessions()
+{
+	emit noSessions();
+}

Modified: nxclientlib/nxclientlib.h
===================================================================
--- nxclientlib/nxclientlib.h	2006-08-16 22:21:59 UTC (rev 269)
+++ nxclientlib/nxclientlib.h	2006-08-16 22:31:35 UTC (rev 270)
@@ -79,6 +79,7 @@
 		void finished() { isFinished = true; };
 		void suspendedSessions(QList<NXResumeData> resumeData) { emit resumeSessions(resumeData); };
 		void reset();
+		void noSuspendedSessions();
 	signals:
 		// General messages about status
 		void callbackWrite(QString);
@@ -94,6 +95,7 @@
 		void stdin(QString);
 
 		void resumeSessions(QList<NXResumeData>);
+		void noSessions();
 	private:
 		bool usingHardcodedKey;
 		bool isFinished;

Modified: nxclientlib/nxsession.cpp
===================================================================
--- nxclientlib/nxsession.cpp	2006-08-16 22:21:59 UTC (rev 269)
+++ nxclientlib/nxsession.cpp	2006-08-16 22:31:35 UTC (rev 270)
@@ -254,6 +254,8 @@
 	if (runningSessions.size() != 0) {
 		suspendedSessions = true;
 		emit sessionsSignal(runningSessions);
+	} else {
+		emit noSessions();
 	}
 	
 	stage++;

Modified: nxclientlib/nxsession.h
===================================================================
--- nxclientlib/nxsession.h	2006-08-16 22:21:59 UTC (rev 269)
+++ nxclientlib/nxsession.h	2006-08-16 22:31:35 UTC (rev 270)
@@ -60,6 +60,7 @@
 		void loginFailed();
 		void finished();
 		void sessionsSignal(QList<NXResumeData>);
+		void noSessions();
 	private:
 		bool doSSH;
 		bool suspendedSessions;

Modified: nxclientlib/qtnx/qtnxwindow.cpp
===================================================================
--- nxclientlib/qtnx/qtnxwindow.cpp	2006-08-16 22:21:59 UTC (rev 269)
+++ nxclientlib/qtnx/qtnxwindow.cpp	2006-08-16 22:31:35 UTC (rev 270)
@@ -116,7 +116,7 @@
 	nxClient.setResolution(dw.screenGeometry(this).width(), dw.screenGeometry(this).height());
 	nxClient.setDepth(info.depth());
 	connect(&nxClient, SIGNAL(resumeSessions(QList<NXResumeData>)), this, SLOT(loadResumeDialog(QList<NXResumeData>)));
-
+	connect(&nxClient, SIGNAL(noSessions()), this, SLOT(noSessions()));
 	//nxClient.setSession(&session);
 }
 
@@ -167,3 +167,8 @@
 	session.suspended = true;
 	nxClient.setSession(&session);
 }
+
+void QtNXWindow::noSessions()
+{
+	nxClient.setSession(&session);
+}

Modified: nxclientlib/qtnx/qtnxwindow.h
===================================================================
--- nxclientlib/qtnx/qtnxwindow.h	2006-08-16 22:21:59 UTC (rev 269)
+++ nxclientlib/qtnx/qtnxwindow.h	2006-08-16 22:31:35 UTC (rev 270)
@@ -44,6 +44,7 @@
 		void loadResumeDialog(QList<NXResumeData>);
 		void resumeNewPressed();
 		void resumeResumePressed(QString);
+		void noSessions();
 	private:
 		Ui::LoginDialog ui_lg;
 



From gwright at mail.berlios.de  Thu Aug 17 01:13:58 2006
From: gwright at mail.berlios.de (gwright at BerliOS)
Date: Thu, 17 Aug 2006 01:13:58 +0200
Subject: [Freenx-cvs] r271 - nxclientlib/qtnx
Message-ID: <200608162313.k7GNDwDC026997@sheep.berlios.de>

Author: gwright
Date: 2006-08-17 01:13:54 +0200 (Thu, 17 Aug 2006)
New Revision: 271

Added:
   nxclientlib/qtnx/qtnxsessions.cpp
   nxclientlib/qtnx/qtnxsessions.h
Log:
Would be nice if these files were here ;)


Added: nxclientlib/qtnx/qtnxsessions.cpp
===================================================================
--- nxclientlib/qtnx/qtnxsessions.cpp	2006-08-16 22:31:35 UTC (rev 270)
+++ nxclientlib/qtnx/qtnxsessions.cpp	2006-08-16 23:13:54 UTC (rev 271)
@@ -0,0 +1,52 @@
+/***************************************************************************
+                               qtnxsessions.cpp
+                             -------------------
+    begin                : Wednesday August 16th 2006
+    copyright            : (C) 2006 by George Wright
+    email                : gwright at kde.org
+ ***************************************************************************/
+
+/***************************************************************************
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ *                                                                         *
+ ***************************************************************************/
+
+#include "qtnxsessions.h"
+
+QtNXSessions::QtNXSessions(QList<NXResumeData> sessions)
+{
+	ui_sd.setupUi(this);
+	
+	connect(ui_sd.newButton, SIGNAL(pressed()), this, SLOT(pressedNew()));
+	connect(ui_sd.resumeButton, SIGNAL(pressed()), this, SLOT(pressedResume()));
+	
+	for (int i = 0; i < sessions.size(); ++i) {
+		sessionItems.append(new QTreeWidgetItem(ui_sd.sessionsList));
+		sessionItems.last()->setText(0, QString::number(sessions.at(i).display));
+		sessionItems.last()->setText(1, sessions.at(i).sessionType);
+		sessionItems.last()->setText(2, sessions.at(i).sessionID);
+		sessionItems.last()->setText(3, QString::number(sessions.at(i).depth));
+		sessionItems.last()->setText(4, sessions.at(i).screen);
+		sessionItems.last()->setText(5, sessions.at(i).sessionName);
+	}
+}
+
+QtNXSessions::~QtNXSessions()
+{
+}
+
+void QtNXSessions::pressedNew()
+{
+	emit newPressed();
+	close();
+}
+
+void QtNXSessions::pressedResume()
+{
+	emit resumePressed(ui_sd.sessionsList->currentItem()->text(2));
+	close();
+}
\ No newline at end of file

Added: nxclientlib/qtnx/qtnxsessions.h
===================================================================
--- nxclientlib/qtnx/qtnxsessions.h	2006-08-16 22:31:35 UTC (rev 270)
+++ nxclientlib/qtnx/qtnxsessions.h	2006-08-16 23:13:54 UTC (rev 271)
@@ -0,0 +1,48 @@
+/***************************************************************************
+                               qtnxsessions.h
+                             -------------------
+    begin                : Wednesday August 16th 2006
+    copyright            : (C) 2006 by George Wright
+    email                : gwright at kde.org
+ ***************************************************************************/
+
+/***************************************************************************
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ *                                                                         *
+ ***************************************************************************/
+
+#ifndef _QTNXSESSIONS_H_
+#define _QTNXSESSIONS_H_
+
+#include <QList>
+#include <QTreeWidget>
+#include <QTreeWidgetItem>
+
+#include "nxdata.h"
+
+#include "ui_sessionsdialog.h"
+
+class QtNXSessions : public QDialog
+{
+	Q_OBJECT
+	public:
+		QtNXSessions(QList<NXResumeData>);
+		~QtNXSessions();
+	public slots:
+		void pressedNew();
+		void pressedResume();
+	signals:
+		void newPressed();
+		void resumePressed(QString);
+	private:
+		void empty();
+		
+		Ui_SessionsDialog ui_sd;
+		QList<QTreeWidgetItem*> sessionItems;
+};
+
+#endif



From gwright at mail.berlios.de  Sun Aug 20 07:03:12 2006
From: gwright at mail.berlios.de (gwright at BerliOS)
Date: Sun, 20 Aug 2006 07:03:12 +0200
Subject: [Freenx-cvs] r272 - in nxclientlib: . qtnx
Message-ID: <200608200503.k7K53CBt005930@sheep.berlios.de>

Author: gwright
Date: 2006-08-20 07:02:48 +0200 (Sun, 20 Aug 2006)
New Revision: 272

Modified:
   nxclientlib/nxclientlib.cpp
   nxclientlib/nxsession.cpp
   nxclientlib/qtnx/qtnxwindow.cpp
Log:
Patch from Christoph Mockenhaupt <Christoph.Mockenhaupt at kfpc.de> - fixes various session stuff.



Modified: nxclientlib/nxclientlib.cpp
===================================================================
--- nxclientlib/nxclientlib.cpp	2006-08-16 23:13:54 UTC (rev 271)
+++ nxclientlib/nxclientlib.cpp	2006-08-20 05:02:48 UTC (rev 272)
@@ -177,7 +177,7 @@
 	
 	// Split the string message into several different strings separated by '\n'
 	for (int i = 0;;i++) {
-		if (message.section('\n', i, i).isEmpty() && message.section('\n', i+1, i+1).isEmpty()) {
+		if (message.section('\n', i, i).isEmpty() && message.section('\n', i+1, i+1).isEmpty() && message.section('\n', i+2, i+2).isEmpty()) {
 			break;
 		} else
 			lines << message.section('\n', i, i);

Modified: nxclientlib/nxsession.cpp
===================================================================
--- nxclientlib/nxsession.cpp	2006-08-16 23:13:54 UTC (rev 271)
+++ nxclientlib/nxsession.cpp	2006-08-20 05:02:48 UTC (rev 272)
@@ -220,18 +220,16 @@
 	QStringList sessions;
 
 	for (i = 0; i < rawdata.size(); ++i) {
-		if (rawdata.at(i).contains("-------")) {
+		if (rawdata.at(i).contains("-------") && !rawdata.at(i).isEmpty()) {
 			at = i;
 		}
 	}
-
-//	if (rawdata.size() < at+1) {
-		for (i = at+1; i < rawdata.size(); ++i) {
-			if (!rawdata.at(i).contains("NX> 148"))
-				sessions << rawdata.at(i);
-		}
-//	}
 	
+	for (i = at+1; i < rawdata.size(); ++i) {
+		if (!rawdata.at(i).contains("NX> 148") && !rawdata.at(i).isEmpty())
+			sessions << rawdata.at(i);
+	}
+	
 	QList<QStringList> rawsessions;
 	
 	for (i = 0; i < sessions.size(); ++i)

Modified: nxclientlib/qtnx/qtnxwindow.cpp
===================================================================
--- nxclientlib/qtnx/qtnxwindow.cpp	2006-08-16 23:13:54 UTC (rev 271)
+++ nxclientlib/qtnx/qtnxwindow.cpp	2006-08-20 05:02:48 UTC (rev 272)
@@ -107,9 +107,9 @@
 		session.customCommand = config.customCommand;
 
 	if (config.encryption == false)
-		nxClient.invokeNXSSH(session.key , config.serverHost, false);
+		nxClient.invokeNXSSH(session.key, config.serverHost, false, 0, config.serverPort);
 	else
-		nxClient.invokeNXSSH(session.key , config.serverHost, true);
+		nxClient.invokeNXSSH(session.key, config.serverHost, true, 0, config.serverPort);
 		
 	nxClient.setUsername(ui_lg.username->text());
 	nxClient.setPassword(ui_lg.password->text());



From gwright at mail.berlios.de  Wed Aug 23 21:32:49 2006
From: gwright at mail.berlios.de (gwright at BerliOS)
Date: Wed, 23 Aug 2006 21:32:49 +0200
Subject: [Freenx-cvs] r273 - in nxclientlib: . qtnx
Message-ID: <200608231932.k7NJWnC5027831@sheep.berlios.de>

Author: gwright
Date: 2006-08-23 21:32:48 +0200 (Wed, 23 Aug 2006)
New Revision: 273

Modified:
   nxclientlib/nxclientlib.cpp
   nxclientlib/qtnx/qtnxwindow.cpp
   nxclientlib/qtnx/qtnxwindow.h
Log:
SSH confirmation message for connecting to previously unconnected hosts



Modified: nxclientlib/nxclientlib.cpp
===================================================================
--- nxclientlib/nxclientlib.cpp	2006-08-20 05:02:48 UTC (rev 272)
+++ nxclientlib/nxclientlib.cpp	2006-08-23 19:32:48 UTC (rev 273)
@@ -42,7 +42,7 @@
 
 NXClientLib::~NXClientLib()
 {
-	nxsshProcess.terminate();
+//	nxsshProcess.terminate();
 }
 
 void NXClientLib::invokeNXSSH(QString publicKey, QString serverHost, bool encryption, QByteArray key, int port)
@@ -253,7 +253,7 @@
 	if (message.contains("NX> 710 Session status: running")) {
 		invokeProxy();
 		session.wipeSessions();
-		returnMessage = "bye\n";
+//		returnMessage = "bye\n";
 	}
 	
 	return returnMessage;

Modified: nxclientlib/qtnx/qtnxwindow.cpp
===================================================================
--- nxclientlib/qtnx/qtnxwindow.cpp	2006-08-20 05:02:48 UTC (rev 272)
+++ nxclientlib/qtnx/qtnxwindow.cpp	2006-08-23 19:32:48 UTC (rev 273)
@@ -21,6 +21,7 @@
 #include <QDesktopWidget>
 #include <QDir>
 #include <QFile>
+#include <QMessageBox>
 #include <QX11Info>
 
 QtNXWindow::QtNXWindow() : QMainWindow()
@@ -63,6 +64,16 @@
 {
 }
 
+void QtNXWindow::sshContinue(QString message)
+{
+	int reply = QMessageBox::question(this, tr("SSH Request"), message, QMessageBox::Yes, QMessageBox::No, QMessageBox::NoButton);
+	if (reply == QMessageBox::Yes)
+		nxClient.allowSSHConnect(true);
+	else
+		nxClient.allowSSHConnect(false);
+
+}
+
 void QtNXWindow::startConnect()
 {
 	QDesktopWidget dw;
@@ -117,6 +128,8 @@
 	nxClient.setDepth(info.depth());
 	connect(&nxClient, SIGNAL(resumeSessions(QList<NXResumeData>)), this, SLOT(loadResumeDialog(QList<NXResumeData>)));
 	connect(&nxClient, SIGNAL(noSessions()), this, SLOT(noSessions()));
+	connect(&nxClient, SIGNAL(sshRequestConfirmation(QString)), this, SLOT(sshContinue(QString)));
+
 	//nxClient.setSession(&session);
 }
 

Modified: nxclientlib/qtnx/qtnxwindow.h
===================================================================
--- nxclientlib/qtnx/qtnxwindow.h	2006-08-20 05:02:48 UTC (rev 272)
+++ nxclientlib/qtnx/qtnxwindow.h	2006-08-23 19:32:48 UTC (rev 273)
@@ -45,6 +45,7 @@
 		void resumeNewPressed();
 		void resumeResumePressed(QString);
 		void noSessions();
+		void sshContinue(QString);
 	private:
 		Ui::LoginDialog ui_lg;
 



From gwright at mail.berlios.de  Wed Aug 23 21:33:45 2006
From: gwright at mail.berlios.de (gwright at BerliOS)
Date: Wed, 23 Aug 2006 21:33:45 +0200
Subject: [Freenx-cvs] r274 - nxclientlib
Message-ID: <200608231933.k7NJXjZl027945@sheep.berlios.de>

Author: gwright
Date: 2006-08-23 21:33:44 +0200 (Wed, 23 Aug 2006)
New Revision: 274

Modified:
   nxclientlib/nxclientlib.cpp
Log:
This shouldn't have been commented out.


Modified: nxclientlib/nxclientlib.cpp
===================================================================
--- nxclientlib/nxclientlib.cpp	2006-08-23 19:32:48 UTC (rev 273)
+++ nxclientlib/nxclientlib.cpp	2006-08-23 19:33:44 UTC (rev 274)
@@ -253,7 +253,7 @@
 	if (message.contains("NX> 710 Session status: running")) {
 		invokeProxy();
 		session.wipeSessions();
-//		returnMessage = "bye\n";
+		returnMessage = "bye\n";
 	}
 	
 	return returnMessage;



From gwright at mail.berlios.de  Wed Aug 23 21:42:25 2006
From: gwright at mail.berlios.de (gwright at BerliOS)
Date: Wed, 23 Aug 2006 21:42:25 +0200
Subject: [Freenx-cvs] r275 - in nxclientlib: . qtnx
Message-ID: <200608231942.k7NJgP8R028793@sheep.berlios.de>

Author: gwright
Date: 2006-08-23 21:42:23 +0200 (Wed, 23 Aug 2006)
New Revision: 275

Modified:
   nxclientlib/nxclientlib.cpp
   nxclientlib/qtnx/qtnxwindow.cpp
   nxclientlib/qtnx/qtnxwindow.h
Log:
Give some meaningful status updates via the callback interface


Modified: nxclientlib/nxclientlib.cpp
===================================================================
--- nxclientlib/nxclientlib.cpp	2006-08-23 19:33:44 UTC (rev 274)
+++ nxclientlib/nxclientlib.cpp	2006-08-23 19:42:23 UTC (rev 275)
@@ -162,8 +162,10 @@
 	}
 
 	for (i = messages.constBegin(); i != messages.constEnd(); ++i) {
-		if ((*i).contains("Password"))
+		if ((*i).contains("Password")) {
+			emit callbackWrite(tr("Authenticating with NX server"));
 			password = true;
+		}
 		if (!isFinished)
 			write(session.parseSSH(*i));
 		else
@@ -261,6 +263,8 @@
 
 void NXClientLib::invokeProxy()
 {
+	emit callbackWrite(tr("Starting NX session"));
+	
 	QFile options;
 	QDir nxdir;
 	
@@ -272,7 +276,7 @@
 		data = "nx,session=session,cookie=" + proxyData.cookie + ",root=" + QDir::homePath() + "/.nx,id=" + proxyData.id + ",listen=" + QString::number(proxyData.port) + ":" + QString::number(proxyData.display) + "\n";
 	else
 		data = "nx,session=session,cookie=" + proxyData.cookie + ",root=" + QDir::homePath() + "/.nx,id=" + proxyData.id + ",connect=" + proxyData.server + ":" + QString::number(proxyData.display) + "\n";
-
+	
 	options.open(QIODevice::WriteOnly);
 	options.write(data.toAscii());
 	options.close();
@@ -281,7 +285,13 @@
 	nxproxyProcess.setEnvironment(nxproxyProcess.systemEnvironment());
 
 	arguments << "-S" << "options=" + options.fileName() + ":" + QString::number(proxyData.display);
+	
 	nxproxyProcess.start(NXPROXY_BIN, arguments);
+
+	if (nxproxyProcess.waitForStarted())
+		emit callbackWrite(tr("Session started successfully"));
+	else
+		emit callbackWrite(tr("Session failed to start"));
 }
 
 void NXClientLib::noSuspendedSessions()

Modified: nxclientlib/qtnx/qtnxwindow.cpp
===================================================================
--- nxclientlib/qtnx/qtnxwindow.cpp	2006-08-23 19:33:44 UTC (rev 274)
+++ nxclientlib/qtnx/qtnxwindow.cpp	2006-08-23 19:42:23 UTC (rev 275)
@@ -129,10 +129,15 @@
 	connect(&nxClient, SIGNAL(resumeSessions(QList<NXResumeData>)), this, SLOT(loadResumeDialog(QList<NXResumeData>)));
 	connect(&nxClient, SIGNAL(noSessions()), this, SLOT(noSessions()));
 	connect(&nxClient, SIGNAL(sshRequestConfirmation(QString)), this, SLOT(sshContinue(QString)));
-
+	connect(&nxClient, SIGNAL(callbackWrite(QString)), this, SLOT(updateStatusBar(QString)));
 	//nxClient.setSession(&session);
 }
 
+void QtNXWindow::updateStatusBar(QString message)
+{
+	statusBar->showMessage(message);
+}
+
 void QtNXWindow::configure()
 {
 	if (ui_lg.session->currentText() == tr("Create new session"))

Modified: nxclientlib/qtnx/qtnxwindow.h
===================================================================
--- nxclientlib/qtnx/qtnxwindow.h	2006-08-23 19:33:44 UTC (rev 274)
+++ nxclientlib/qtnx/qtnxwindow.h	2006-08-23 19:42:23 UTC (rev 275)
@@ -46,6 +46,7 @@
 		void resumeResumePressed(QString);
 		void noSessions();
 		void sshContinue(QString);
+		void updateStatusBar(QString);
 	private:
 		Ui::LoginDialog ui_lg;
 



From gwright at mail.berlios.de  Wed Aug 23 22:33:29 2006
From: gwright at mail.berlios.de (gwright at BerliOS)
Date: Wed, 23 Aug 2006 22:33:29 +0200
Subject: [Freenx-cvs] r276 - in nxclientlib: . qtnx
Message-ID: <200608232033.k7NKXTca008944@sheep.berlios.de>

Author: gwright
Date: 2006-08-23 22:33:29 +0200 (Wed, 23 Aug 2006)
New Revision: 276

Modified:
   nxclientlib/nxclientlib.cpp
   nxclientlib/nxclientlib.h
   nxclientlib/qtnx/qtnx.pro
   nxclientlib/qtnx/qtnxsessions.cpp
   nxclientlib/qtnx/qtnxsettings.cpp
   nxclientlib/qtnx/qtnxsettings.h
   nxclientlib/qtnx/qtnxwindow.cpp
   nxclientlib/qtnx/qtnxwindow.h
Log:
Custom key support


Modified: nxclientlib/nxclientlib.cpp
===================================================================
--- nxclientlib/nxclientlib.cpp	2006-08-23 19:42:23 UTC (rev 275)
+++ nxclientlib/nxclientlib.cpp	2006-08-23 20:33:29 UTC (rev 276)
@@ -55,7 +55,9 @@
 	}
 
 	if (publicKey == "default" || publicKey == "supplied") {
-		cerr << tr("WARNING: Using hardcoded NoMachine public key.").toStdString() << endl;
+		if (publicKey == "default")
+			cerr << tr("WARNING: Using hardcoded NoMachine public key.").toStdString() << endl;
+		
 		keyFile = new QTemporaryFile;
 		keyFile->open();
 		
@@ -133,7 +135,7 @@
 
 void NXClientLib::failedLogin()
 {
-	emit callbackWrite(tr("Username or password incorrect"));
+	emit loginFailed();
 	nxsshProcess.terminate();
 }
 
@@ -159,7 +161,8 @@
 		returnMessage = "NX> 299 Switching connection to: ";
 		returnMessage += proxyData.proxyIP + ":" + QString::number(proxyData.port) + " cookie: " + proxyData.cookie + "\n";
 		write(returnMessage);
-	}
+	} else if (message.contains("NX> 287 Redirected I/O to channel descriptors"))
+		emit callbackWrite(tr("The session has been started successfully"));
 
 	for (i = messages.constBegin(); i != messages.constEnd(); ++i) {
 		if ((*i).contains("Password")) {
@@ -199,7 +202,8 @@
 		returnMessage = "NX> 299 Switching connection to: ";
 		returnMessage += proxyData.proxyIP + ":" + QString::number(proxyData.port) + " cookie: " + proxyData.cookie + "\n";
 		write(returnMessage);
-	}
+	} else if (message.contains("NX> 287 Redirected I/O to channel descriptors"))
+		emit callbackWrite(tr("The session has been started successfully"));
 
 	emit stderr(message);
 }
@@ -288,9 +292,7 @@
 	
 	nxproxyProcess.start(NXPROXY_BIN, arguments);
 
-	if (nxproxyProcess.waitForStarted())
-		emit callbackWrite(tr("Session started successfully"));
-	else
+	if (!nxproxyProcess.waitForStarted())
 		emit callbackWrite(tr("Session failed to start"));
 }
 

Modified: nxclientlib/nxclientlib.h
===================================================================
--- nxclientlib/nxclientlib.h	2006-08-23 19:42:23 UTC (rev 275)
+++ nxclientlib/nxclientlib.h	2006-08-23 20:33:29 UTC (rev 276)
@@ -96,6 +96,7 @@
 
 		void resumeSessions(QList<NXResumeData>);
 		void noSessions();
+		void loginFailed();
 	private:
 		bool usingHardcodedKey;
 		bool isFinished;

Modified: nxclientlib/qtnx/qtnx.pro
===================================================================
--- nxclientlib/qtnx/qtnx.pro	2006-08-23 19:42:23 UTC (rev 275)
+++ nxclientlib/qtnx/qtnx.pro	2006-08-23 20:33:29 UTC (rev 276)
@@ -2,7 +2,7 @@
 
 CONFIG		+= qt warn_on debug
 
-FORMS = settingsdialog.ui logindialog.ui sessionsdialog.ui
+FORMS = settingsdialog.ui logindialog.ui sessionsdialog.ui keydialog.ui
 
 SOURCES = main.cpp qtnxwindow.cpp qtnxsettings.cpp qtnxsessions.cpp
 

Modified: nxclientlib/qtnx/qtnxsessions.cpp
===================================================================
--- nxclientlib/qtnx/qtnxsessions.cpp	2006-08-23 19:42:23 UTC (rev 275)
+++ nxclientlib/qtnx/qtnxsessions.cpp	2006-08-23 20:33:29 UTC (rev 276)
@@ -49,4 +49,4 @@
 {
 	emit resumePressed(ui_sd.sessionsList->currentItem()->text(2));
 	close();
-}
\ No newline at end of file
+}

Modified: nxclientlib/qtnx/qtnxsettings.cpp
===================================================================
--- nxclientlib/qtnx/qtnxsettings.cpp	2006-08-23 19:42:23 UTC (rev 275)
+++ nxclientlib/qtnx/qtnxsettings.cpp	2006-08-23 20:33:29 UTC (rev 276)
@@ -27,6 +27,7 @@
 QtNXSettings::QtNXSettings(QString sessionName) : QDialog()
 {
 	filedesc = sessionName;
+	keyDialog = 0;
 	
 	if (!sessionName.isEmpty())
 		fileName = QDir::homePath() + "/.qtnx/" + sessionName + ".nxml";
@@ -44,6 +45,7 @@
 	connect(ui_sd.applyButton, SIGNAL(pressed()), this, SLOT(applyPressed()));
 	connect(ui_sd.okButton, SIGNAL(pressed()), this, SLOT(okPressed()));
 	connect(ui_sd.cancelButton, SIGNAL(pressed()), this, SLOT(cancelPressed()));
+	connect(ui_sd.setAuthKeyButton, SIGNAL(pressed()), this, SLOT(authKeyPressed()));
 }
 
 QtNXSettings::~QtNXSettings()
@@ -168,9 +170,10 @@
 
 void QtNXSettings::keyChanged(int state)
 {
-	if (state == Qt::Checked)
+	if (state == Qt::Checked) {
+		config.key = "";
 		ui_sd.setAuthKeyButton->setEnabled(false);
-	else
+	} else
 		ui_sd.setAuthKeyButton->setEnabled(true);
 }
 
@@ -186,6 +189,29 @@
 	close();
 }
 
+void QtNXSettings::authKeyPressed()
+{
+	keyDialog = 0;
+	delete keyDialog;
+	keyDialog = new QDialog(this);
+	ui_kd.setupUi(keyDialog);
+	keyDialog->show();
+	QTextDocument *doc_key = new QTextDocument(config.key);
+	ui_kd.key->setDocument(doc_key);
+	
+	connect(keyDialog, SIGNAL(accepted()), this, SLOT(keyDialogAccept()));
+}
+
+void QtNXSettings::keyDialogAccept()
+{
+	
+	config.key = ui_kd.key->document()->toPlainText();
+}
+
+void QtNXSettings::keyDialogReject()
+{
+}
+
 void QtNXSettings::applyPressed()
 {
 	// File has been renamed, remove old one

Modified: nxclientlib/qtnx/qtnxsettings.h
===================================================================
--- nxclientlib/qtnx/qtnxsettings.h	2006-08-23 19:42:23 UTC (rev 275)
+++ nxclientlib/qtnx/qtnxsettings.h	2006-08-23 20:33:29 UTC (rev 276)
@@ -23,6 +23,7 @@
 #include "nxdata.h"
 
 #include "ui_settingsdialog.h"
+#include "ui_keydialog.h"
 
 class QtNXSettings : public QDialog
 {
@@ -41,10 +42,15 @@
 		void cancelPressed();
 		void okPressed();
 		void setData(NXConfigData data) { config = data; };
+		void authKeyPressed();
+		void keyDialogAccept();
+		void keyDialogReject();
 	signals:
 		void closing();
 	private:
 		Ui::SettingsDialog ui_sd;
+		Ui::KeyDialog ui_kd;
+		QDialog *keyDialog;
 		NXConfigData config;
 		QString fileName;
 		QString filedesc;

Modified: nxclientlib/qtnx/qtnxwindow.cpp
===================================================================
--- nxclientlib/qtnx/qtnxwindow.cpp	2006-08-23 19:42:23 UTC (rev 275)
+++ nxclientlib/qtnx/qtnxwindow.cpp	2006-08-23 20:33:29 UTC (rev 276)
@@ -64,6 +64,11 @@
 {
 }
 
+void QtNXWindow::failedLogin()
+{
+	QMessageBox::critical(this, tr("Authentication failure"), tr("You have supplied an incorrect username or password for this NX server."), QMessageBox::Ok, QMessageBox::NoButton, QMessageBox::NoButton);
+	statusBar->showMessage(tr("Login failed"));
+}
 void QtNXWindow::sshContinue(QString message)
 {
 	int reply = QMessageBox::question(this, tr("SSH Request"), message, QMessageBox::Yes, QMessageBox::No, QMessageBox::NoButton);
@@ -76,6 +81,7 @@
 
 void QtNXWindow::startConnect()
 {
+	QByteArray key;
 	QDesktopWidget dw;
 	QX11Info info;
 
@@ -108,20 +114,28 @@
 	session.agentPass = config.agentPass;
 	session.cups = config.cups;
 	session.fullscreen = config.fullscreen;
-	
-	if (!config.key.isEmpty())
-		session.key = config.key;
-	else
+
+	if (!config.key.isEmpty()) {
+		key = config.key.toAscii();
+		session.key = "supplied";
+	} else
 		session.key = "default";
 
 	if (config.sessionType == "unix-application")
 		session.customCommand = config.customCommand;
 
-	if (config.encryption == false)
-		nxClient.invokeNXSSH(session.key, config.serverHost, false, 0, config.serverPort);
-	else
-		nxClient.invokeNXSSH(session.key, config.serverHost, true, 0, config.serverPort);
-		
+	if (config.encryption == false) {
+		if (session.key == "supplied")
+			nxClient.invokeNXSSH(session.key, config.serverHost, false, key, config.serverPort);
+		else if (session.key == "default")
+			nxClient.invokeNXSSH(session.key, config.serverHost, false, 0, config.serverPort);
+	} else {
+		if (session.key == "supplied")
+			nxClient.invokeNXSSH(session.key, config.serverHost, true, key, config.serverPort);
+		else if (session.key == "default")
+			nxClient.invokeNXSSH(session.key, config.serverHost, true, 0, config.serverPort);
+	}
+	
 	nxClient.setUsername(ui_lg.username->text());
 	nxClient.setPassword(ui_lg.password->text());
 	nxClient.setResolution(dw.screenGeometry(this).width(), dw.screenGeometry(this).height());
@@ -130,6 +144,7 @@
 	connect(&nxClient, SIGNAL(noSessions()), this, SLOT(noSessions()));
 	connect(&nxClient, SIGNAL(sshRequestConfirmation(QString)), this, SLOT(sshContinue(QString)));
 	connect(&nxClient, SIGNAL(callbackWrite(QString)), this, SLOT(updateStatusBar(QString)));
+	connect(&nxClient, SIGNAL(loginFailed()), this, SLOT(failedLogin()));
 	//nxClient.setSession(&session);
 }
 

Modified: nxclientlib/qtnx/qtnxwindow.h
===================================================================
--- nxclientlib/qtnx/qtnxwindow.h	2006-08-23 19:42:23 UTC (rev 275)
+++ nxclientlib/qtnx/qtnxwindow.h	2006-08-23 20:33:29 UTC (rev 276)
@@ -47,6 +47,7 @@
 		void noSessions();
 		void sshContinue(QString);
 		void updateStatusBar(QString);
+		void failedLogin();
 	private:
 		Ui::LoginDialog ui_lg;
 



From gwright at mail.berlios.de  Wed Aug 23 22:34:34 2006
From: gwright at mail.berlios.de (gwright at BerliOS)
Date: Wed, 23 Aug 2006 22:34:34 +0200
Subject: [Freenx-cvs] r277 - nxclientlib/qtnx
Message-ID: <200608232034.k7NKYYYB009100@sheep.berlios.de>

Author: gwright
Date: 2006-08-23 22:34:29 +0200 (Wed, 23 Aug 2006)
New Revision: 277

Added:
   nxclientlib/qtnx/keydialog.ui
Log:
Need this for custom keys


Added: nxclientlib/qtnx/keydialog.ui
===================================================================
--- nxclientlib/qtnx/keydialog.ui	2006-08-23 20:33:29 UTC (rev 276)
+++ nxclientlib/qtnx/keydialog.ui	2006-08-23 20:34:29 UTC (rev 277)
@@ -0,0 +1,118 @@
+<ui version="4.0" >
+ <author></author>
+ <comment></comment>
+ <exportmacro></exportmacro>
+ <class>KeyDialog</class>
+ <widget class="QDialog" name="KeyDialog" >
+  <property name="geometry" >
+   <rect>
+    <x>0</x>
+    <y>0</y>
+    <width>400</width>
+    <height>300</height>
+   </rect>
+  </property>
+  <property name="windowTitle" >
+   <string>Dialog</string>
+  </property>
+  <layout class="QVBoxLayout" >
+   <property name="margin" >
+    <number>9</number>
+   </property>
+   <property name="spacing" >
+    <number>6</number>
+   </property>
+   <item>
+    <widget class="QTextEdit" name="key" >
+     <property name="font" >
+      <font>
+       <family>Courier</family>
+       <pointsize>9</pointsize>
+       <weight>50</weight>
+       <italic>false</italic>
+       <bold>false</bold>
+       <underline>false</underline>
+       <strikeout>false</strikeout>
+      </font>
+     </property>
+     <property name="lineWrapMode" >
+      <enum>QTextEdit::NoWrap</enum>
+     </property>
+    </widget>
+   </item>
+   <item>
+    <layout class="QHBoxLayout" >
+     <property name="margin" >
+      <number>0</number>
+     </property>
+     <property name="spacing" >
+      <number>6</number>
+     </property>
+     <item>
+      <spacer>
+       <property name="orientation" >
+        <enum>Qt::Horizontal</enum>
+       </property>
+       <property name="sizeHint" >
+        <size>
+         <width>131</width>
+         <height>31</height>
+        </size>
+       </property>
+      </spacer>
+     </item>
+     <item>
+      <widget class="QPushButton" name="okButton" >
+       <property name="text" >
+        <string>OK</string>
+       </property>
+      </widget>
+     </item>
+     <item>
+      <widget class="QPushButton" name="cancelButton" >
+       <property name="text" >
+        <string>Cancel</string>
+       </property>
+      </widget>
+     </item>
+    </layout>
+   </item>
+  </layout>
+ </widget>
+ <pixmapfunction></pixmapfunction>
+ <resources/>
+ <connections>
+  <connection>
+   <sender>okButton</sender>
+   <signal>clicked()</signal>
+   <receiver>KeyDialog</receiver>
+   <slot>accept()</slot>
+   <hints>
+    <hint type="sourcelabel" >
+     <x>278</x>
+     <y>253</y>
+    </hint>
+    <hint type="destinationlabel" >
+     <x>96</x>
+     <y>254</y>
+    </hint>
+   </hints>
+  </connection>
+  <connection>
+   <sender>cancelButton</sender>
+   <signal>clicked()</signal>
+   <receiver>KeyDialog</receiver>
+   <slot>reject()</slot>
+   <hints>
+    <hint type="sourcelabel" >
+     <x>369</x>
+     <y>253</y>
+    </hint>
+    <hint type="destinationlabel" >
+     <x>179</x>
+     <y>282</y>
+    </hint>
+   </hints>
+  </connection>
+ </connections>
+</ui>



From gwright at mail.berlios.de  Wed Aug 23 23:00:20 2006
From: gwright at mail.berlios.de (gwright at BerliOS)
Date: Wed, 23 Aug 2006 23:00:20 +0200
Subject: [Freenx-cvs] r278 - nxclientlib/qtnx
Message-ID: <200608232100.k7NL0KXa012130@sheep.berlios.de>

Author: gwright
Date: 2006-08-23 23:00:18 +0200 (Wed, 23 Aug 2006)
New Revision: 278

Modified:
   nxclientlib/qtnx/qtnx.pro
   nxclientlib/qtnx/qtnxwindow.cpp
   nxclientlib/qtnx/qtnxwindow.h
Log:
Add a logging window


Modified: nxclientlib/qtnx/qtnx.pro
===================================================================
--- nxclientlib/qtnx/qtnx.pro	2006-08-23 20:34:29 UTC (rev 277)
+++ nxclientlib/qtnx/qtnx.pro	2006-08-23 21:00:18 UTC (rev 278)
@@ -2,7 +2,7 @@
 
 CONFIG		+= qt warn_on debug
 
-FORMS = settingsdialog.ui logindialog.ui sessionsdialog.ui keydialog.ui
+FORMS = settingsdialog.ui logindialog.ui sessionsdialog.ui keydialog.ui logwindow.ui
 
 SOURCES = main.cpp qtnxwindow.cpp qtnxsettings.cpp qtnxsessions.cpp
 

Modified: nxclientlib/qtnx/qtnxwindow.cpp
===================================================================
--- nxclientlib/qtnx/qtnxwindow.cpp	2006-08-23 20:34:29 UTC (rev 277)
+++ nxclientlib/qtnx/qtnxwindow.cpp	2006-08-23 21:00:18 UTC (rev 278)
@@ -26,6 +26,12 @@
 
 QtNXWindow::QtNXWindow() : QMainWindow()
 {
+	logWindow = new QDialog(0);
+	ui_lw.setupUi(logWindow);
+
+	log = new QTextDocument();
+	ui_lw.output->setDocument(log);
+	
 	loginDialog = new QWidget(this);
 	menuBar = new QMenuBar(this);
 	statusBar = new QStatusBar(this);
@@ -46,6 +52,8 @@
 
 	fileMenu->addAction(tr("Quit"), qApp, SLOT(quit()), QKeySequence(tr("CTRL+Q")));
 
+	connectionMenu->addAction(tr("Show log window"), this, SLOT(showLogWindow()), QKeySequence(tr("CTRL+L")));
+	
 	connectionMenu->addAction(tr("Connect..."), this, SLOT(startConnect()));
 
 	QDir dir(QDir::homePath()+"/.qtnx","*.nxml");
@@ -64,6 +72,14 @@
 {
 }
 
+void QtNXWindow::showLogWindow()
+{
+	if (logWindow->isHidden())
+		logWindow->show();
+	else
+		logWindow->hide();
+}
+
 void QtNXWindow::failedLogin()
 {
 	QMessageBox::critical(this, tr("Authentication failure"), tr("You have supplied an incorrect username or password for this NX server."), QMessageBox::Ok, QMessageBox::NoButton, QMessageBox::NoButton);
@@ -140,11 +156,16 @@
 	nxClient.setPassword(ui_lg.password->text());
 	nxClient.setResolution(dw.screenGeometry(this).width(), dw.screenGeometry(this).height());
 	nxClient.setDepth(info.depth());
+	
 	connect(&nxClient, SIGNAL(resumeSessions(QList<NXResumeData>)), this, SLOT(loadResumeDialog(QList<NXResumeData>)));
 	connect(&nxClient, SIGNAL(noSessions()), this, SLOT(noSessions()));
 	connect(&nxClient, SIGNAL(sshRequestConfirmation(QString)), this, SLOT(sshContinue(QString)));
 	connect(&nxClient, SIGNAL(callbackWrite(QString)), this, SLOT(updateStatusBar(QString)));
 	connect(&nxClient, SIGNAL(loginFailed()), this, SLOT(failedLogin()));
+	connect(&nxClient, SIGNAL(stdout(QString)), this, SLOT(logStd(QString)));
+	connect(&nxClient, SIGNAL(stderr(QString)), this, SLOT(logStd(QString)));
+	connect(&nxClient, SIGNAL(stdin(QString)), this, SLOT(logStd(QString)));
+	
 	//nxClient.setSession(&session);
 }
 
@@ -205,3 +226,9 @@
 {
 	nxClient.setSession(&session);
 }
+
+void QtNXWindow::logStd(QString message)
+{
+	log->setPlainText(log->toPlainText() + message);
+}
+

Modified: nxclientlib/qtnx/qtnxwindow.h
===================================================================
--- nxclientlib/qtnx/qtnxwindow.h	2006-08-23 20:34:29 UTC (rev 277)
+++ nxclientlib/qtnx/qtnxwindow.h	2006-08-23 21:00:18 UTC (rev 278)
@@ -30,6 +30,7 @@
 #include "qtnxsettings.h"
 
 #include "ui_logindialog.h"
+#include "ui_logwindow.h"
 
 class QtNXWindow : public QMainWindow
 {
@@ -48,9 +49,12 @@
 		void sshContinue(QString);
 		void updateStatusBar(QString);
 		void failedLogin();
+		void showLogWindow();
+		void logStd(QString);
 	private:
 		Ui::LoginDialog ui_lg;
-
+		Ui::LogWindow ui_lw;
+		
 		NXSessionData session;
 		NXConfigData config;
 		
@@ -59,10 +63,12 @@
 		QtNXSettings *settingsDialog;
 		QtNXSessions *sessionsDialog;
 		
+		QDialog *logWindow;
 		QMenu *fileMenu;
 		QMenu *connectionMenu;
 		QMenuBar *menuBar;
 		QStatusBar *statusBar;
+		QTextDocument *log;
 		QWidget *loginDialog;
 };
 



From gwright at mail.berlios.de  Wed Aug 23 23:00:42 2006
From: gwright at mail.berlios.de (gwright at BerliOS)
Date: Wed, 23 Aug 2006 23:00:42 +0200
Subject: [Freenx-cvs] r279 - nxclientlib/qtnx
Message-ID: <200608232100.k7NL0gCj012197@sheep.berlios.de>

Author: gwright
Date: 2006-08-23 23:00:42 +0200 (Wed, 23 Aug 2006)
New Revision: 279

Added:
   nxclientlib/qtnx/logwindow.ui
Log:
Log window


Added: nxclientlib/qtnx/logwindow.ui
===================================================================
--- nxclientlib/qtnx/logwindow.ui	2006-08-23 21:00:18 UTC (rev 278)
+++ nxclientlib/qtnx/logwindow.ui	2006-08-23 21:00:42 UTC (rev 279)
@@ -0,0 +1,51 @@
+<ui version="4.0" >
+ <author></author>
+ <comment></comment>
+ <exportmacro></exportmacro>
+ <class>LogWindow</class>
+ <widget class="QDialog" name="LogWindow" >
+  <property name="geometry" >
+   <rect>
+    <x>0</x>
+    <y>0</y>
+    <width>400</width>
+    <height>300</height>
+   </rect>
+  </property>
+  <property name="windowTitle" >
+   <string>Dialog</string>
+  </property>
+  <layout class="QVBoxLayout" >
+   <property name="margin" >
+    <number>9</number>
+   </property>
+   <property name="spacing" >
+    <number>6</number>
+   </property>
+   <item>
+    <widget class="QTextEdit" name="output" >
+     <property name="font" >
+      <font>
+       <family>Courier</family>
+       <pointsize>9</pointsize>
+       <weight>50</weight>
+       <italic>false</italic>
+       <bold>false</bold>
+       <underline>false</underline>
+       <strikeout>false</strikeout>
+      </font>
+     </property>
+     <property name="lineWrapMode" >
+      <enum>QTextEdit::NoWrap</enum>
+     </property>
+     <property name="readOnly" >
+      <bool>true</bool>
+     </property>
+    </widget>
+   </item>
+  </layout>
+ </widget>
+ <pixmapfunction></pixmapfunction>
+ <resources/>
+ <connections/>
+</ui>



From gwright at mail.berlios.de  Thu Aug 24 23:03:12 2006
From: gwright at mail.berlios.de (gwright at BerliOS)
Date: Thu, 24 Aug 2006 23:03:12 +0200
Subject: [Freenx-cvs] r280 - nxclientlib/qtnx
Message-ID: <200608242103.k7OL3CqT015832@sheep.berlios.de>

Author: gwright
Date: 2006-08-24 23:03:11 +0200 (Thu, 24 Aug 2006)
New Revision: 280

Modified:
   nxclientlib/qtnx/qtnxsettings.cpp
Log:
Stop it from reverting to KDE everytime GNOME is selected :D


Modified: nxclientlib/qtnx/qtnxsettings.cpp
===================================================================
--- nxclientlib/qtnx/qtnxsettings.cpp	2006-08-23 21:00:42 UTC (rev 279)
+++ nxclientlib/qtnx/qtnxsettings.cpp	2006-08-24 21:03:11 UTC (rev 280)
@@ -81,7 +81,7 @@
 			ui_sd.type->setCurrentIndex(ui_sd.type->findText(tr("KDE")));
 		} else if (config.sessionType == "unix-gnome") {
 			ui_sd.platform->setCurrentIndex(ui_sd.platform->findText(tr("UNIX")));
-			ui_sd.type->setCurrentIndex(ui_sd.type->findText(tr("KDE")));
+			ui_sd.type->setCurrentIndex(ui_sd.type->findText(tr("GNOME")));
 		} else if (config.sessionType == "unix-cde") {
 			ui_sd.platform->setCurrentIndex(ui_sd.platform->findText(tr("UNIX")));
 			ui_sd.type->setCurrentIndex(ui_sd.type->findText(tr("CDE")));



From gwright at mail.berlios.de  Thu Aug 24 23:09:04 2006
From: gwright at mail.berlios.de (gwright at BerliOS)
Date: Thu, 24 Aug 2006 23:09:04 +0200
Subject: [Freenx-cvs] r281 - nxclientlib/qtnx
Message-ID: <200608242109.k7OL942C017229@sheep.berlios.de>

Author: gwright
Date: 2006-08-24 23:09:04 +0200 (Thu, 24 Aug 2006)
New Revision: 281

Modified:
   nxclientlib/qtnx/qtnxwindow.cpp
Log:
Explicitly set suspended to false


Modified: nxclientlib/qtnx/qtnxwindow.cpp
===================================================================
--- nxclientlib/qtnx/qtnxwindow.cpp	2006-08-24 21:03:11 UTC (rev 280)
+++ nxclientlib/qtnx/qtnxwindow.cpp	2006-08-24 21:09:04 UTC (rev 281)
@@ -224,6 +224,7 @@
 
 void QtNXWindow::noSessions()
 {
+	session.suspended = false;
 	nxClient.setSession(&session);
 }
 



